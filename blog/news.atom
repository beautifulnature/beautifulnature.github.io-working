<?xml version="1.0" encoding="utf-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.optaplanner.org/</id>
    <title>OptaPlanner</title>
    <updated>2021-12-20T00:00:00+00:00</updated>
    <link href="https://www.optaplanner.org/blog/news.atom" rel="self" type="application/atom+xml" />
    <link href="https://www.optaplanner.org/" rel="alternate" type="text/html" />
    <icon>https://www.optaplanner.org/favicon.ico</icon>
    <logo>https://www.optaplanner.org/headerFooter/optaPlannerLogo200px.png</logo>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/10/26/DocsTurnOverANewLeaf.html</id>
            <title type="html">OptaPlanner documentation turns over a new leaf</title>
            <updated>2021-10-26T00:00:00+00:00</updated>
            <published>2021-10-26T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/10/26/DocsTurnOverANewLeaf.html" rel="alternate" type="text/html" />
            <author>
                <name>rsynek</name>
            </author>
                    <category term="documentation"></category>
                    <category term="website"></category>
            <summary type="html">
                 For years, OptaPlanner has been offering the documentation in two formats: single-page HTML and PDF. This now changes with the launch a new documentation website, built using Antora. What&amp;#8217;s ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For years, &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; has been offering the documentation in two formats:
single-page HTML and PDF.
This now changes with the launch a new documentation website, built using &lt;a href=&quot;https://antora.org/&quot;&gt;Antora&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s so exciting about the new documentation?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First and foremost, it loads instantly as opposed to the old single-page HTML documentation.
For example, if I want to read about &lt;em&gt;repeated planning&lt;/em&gt;,
I open the single-page HTML docs and wait nearly half a minute for the page to load, despite having a very good cable connection.
With the new documentation, it took me only 2 seconds as each chapter has its own HTML page and thus
the content that has to be loaded is limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This also means it&amp;#8217;s now easier to effectively share links to a particular section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, now you can search through the entire docs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/26/DocsSearch.png&quot; alt=&quot;Search in the docs&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The search box at the top of the page shows suggestions as soon as you start typing. Each suggestion consists of
the chapter and a link to where the search term occurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Third, if you spot a discrepancy in the documentation and would like to improve it, contributing was never easier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/26/DocsEdit.png&quot; alt=&quot;Edit the docs&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, this new documentation website is much friendlier to search engines, which should make it show up in Google search results more often than before.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_building_the_documentation_website&quot;&gt;Building the documentation website&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation sources remain in
the &lt;a href=&quot;https://github.com/kiegroup/optaplanner/tree/main/optaplanner-docs&quot;&gt;optaplanner-docs module in the optaplanner repository&lt;/a&gt;,
but the website assembly, named &lt;code&gt;optaplanner-website-docs&lt;/code&gt;, became a part of the &lt;a href=&quot;https://github.com/kiegroup/optaplanner-website&quot;&gt;optaplanner-website&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/26/WebsiteStructure.png&quot; alt=&quot;optaplanner-website directory structure&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly to the entire &lt;code&gt;optaplanner-website&lt;/code&gt;, the &lt;code&gt;optaplanner-website-docs&lt;/code&gt; is built using Maven. The Maven module
acts as a wrapper over Antora, which generates the static site from AsciiDoc sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two Antora playbooks referring to documentation sources. The first one, used by default, is &lt;code&gt;antora-playbook.yml&lt;/code&gt;
that refers to the latest OptaPlanner release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;...
content:
  edit_url: &apos;{web_url}/edit/main/{path}&apos;
  sources:
    - url: git@github.com:kiegroup/optaplanner.git
      # Updates with every release to point to the latest release branch.
      branches: [8.12.x]
      start_path: optaplanner-docs/src
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To render the latest documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd optaplanner-website/optaplanner-website-docs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mvn clean package&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;index.html&lt;/code&gt; located in &lt;code&gt;target/website/docs&lt;/code&gt; in your browser.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second Antora playbook, &lt;code&gt;antora-playbook-author.yml&lt;/code&gt;, is activated by the &lt;code&gt;author&lt;/code&gt; maven profile and
refers to the current optaplanner local Git repository HEAD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;...
content:
  edit_url: &apos;{web_url}/edit/main/{path}&apos;
  sources:
    # Assuming the optaplanner local repository resides next to the optaplanner-website.
    - url: ../../optaplanner
      branches: [HEAD]
      start_path: optaplanner-docs/src
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To preview local changes in the documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Make sure the optaplanner and optaplanner-website Git repositories are located in the same directory or change the local URL accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd optaplanner-website/optaplanner-website-docs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mvn clean package -Pauthor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;index.html&lt;/code&gt; located in &lt;code&gt;target/website/docs&lt;/code&gt; in your browser.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_supported_documentation_formats&quot;&gt;Supported documentation formats&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Introducing new formats does not have to result in abandoning the old ones, and in our case it does not.
While I encourage everyone to visit the new documentation website, the existing formats continue to be published with
every release as before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, should you need to have a look at a particular version of the documentation,
it&amp;#8217;s still at your hand in the &lt;a href=&quot;https://docs.optaplanner.org/&quot;&gt;archive&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the &lt;code&gt;8.12.0.Final&lt;/code&gt; release, there is a new documentation website available under &lt;a href=&quot;https://www.optaplanner.org/docs&quot; class=&quot;bare&quot;&gt;https://www.optaplanner.org/docs&lt;/a&gt;.
The documentation is now structured into pages by chapters and searchable. The single-page HTML and PDF documentation
remains available for every release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/10/14/OrderPickingQuickstart.html</id>
            <title type="html">Order picking optimization in warehouses and supermarkets with OptaPlanner</title>
            <updated>2021-10-14T00:00:00+00:00</updated>
            <published>2021-10-14T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/10/14/OrderPickingQuickstart.html" rel="alternate" type="text/html" />
            <author>
                <name>wmedvede</name>
            </author>
                    <category term="use case"></category>
                    <category term="order picking"></category>
                    <category term="quarkus"></category>
            <summary type="html">
                 During the pandemic year, we saw many stores and supermarkets adapt their business in several ways. Sometimes these changes occurred from day to day. For example, as a consequence of the sharp ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the pandemic year, we saw many stores and supermarkets adapt their business in several ways. Sometimes these changes occurred from day to day.
For example, as a consequence of the sharp decrease in customer physical visits, online orders increased exponentially.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How many of them were prepared to deal optimally with this increase&amp;#8230;&amp;#8203;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we present the new OptaPlanner &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts/tree/development/use-cases/order-picking&quot;&gt;order-picking quickstart&lt;/a&gt; that shows how to complete online orders in an optimized way!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_order_picking_problem&quot;&gt;The order picking problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The order picking problem consists of a set of orders that need to be prepared for delivery to various customers. Each order is composed of a set of order items (the requested products). These products are located on shelves in the warehouse or in the supermarket and occupy a specific volume of space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To complete the orders, there is a set of available trolleys that follow a calculated path in the supermarket and pick the order items. One order item is picked on each step of this path.
The location of the products within the warehouse determine the path of the trolley, and the space in each trolley is divided into a number of buckets with a specified capacity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal of the order picking problem is to calculate a picking plan that provides the path for each trolley and considers the following constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The distance to travel by the trolleys is minimized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the order items must be picked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Items from different orders mustn&amp;#8217;t be mixed in the same bucket, so enough buckets must be reserved for each of the orders that will be prepared on the same trolley.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bucket&amp;#8217;s capacity is not exceeded by the total volume of the items on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The splitting of an order into different trolleys should be minimized.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows a simplified view of the order picking problem input data and calculated picking plan:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/14/orderPickingProblem.png&quot; alt=&quot;orderPickingProblem&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_warehouse_structure&quot;&gt;Warehouse structure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To formulate the problem, the warehouse is defined as a set of shelves organized into columns and rows.
Products are located on the left or right side of a specific shelf, on a specific row. The shelf, side, and row determine the product location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/14/orderPickingSimplifiedWarehouseStructure.png&quot; alt=&quot;orderPickingSimplifiedWarehouseStructure&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_new_quickstart&quot;&gt;The new quickstart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_project_structure&quot;&gt;Project structure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows the maven project that comprises the quickstart:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/14/orderPickingProjectStructure.png&quot; alt=&quot;orderPickingProjectStructure&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server side code is in the &lt;code&gt;src/main/java&lt;/code&gt; directory and is organized in four packages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;bootstrap&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Helper classes for generating the randomized (but reproducible) data set used by the quickstart on application startup.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;domain&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Contains the domain model for representing the problem, and the planning classes used by OptaPlanner, for example the &lt;code&gt;@PlanningSolution&lt;/code&gt; and the &lt;code&gt;@PlanningEntity&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;solver&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Contains the &lt;code&gt;ConstraintProvider&lt;/code&gt; implementation.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;rest&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Contains the REST API used by the client-side code to start and stop solving, and to retrieve the best solution to display.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client code is in the &lt;code&gt;src/main/resources/META-INF/resources/&lt;/code&gt; directory.
This directory has an &lt;code&gt;index.html&lt;/code&gt; file that contains the basic HTML structure and loads the &lt;code&gt;app.js&lt;/code&gt; file that calls the server&amp;#8217;s REST API and makes the web page dynamic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_planning_domain_model&quot;&gt;Planning domain model&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/14/orderPickingClassDiagram.png&quot; alt=&quot;orderPickingClassDiagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_order_picking_constraints&quot;&gt;Order picking constraints&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The order picking constraints are implemented using the Constraint Streams API, and they can be found in the &lt;code&gt;org.acme.orderpicking.solver.OrderPickingConstraintProvider&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following constraints are provided:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;requiredNumberOfBuckets&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Hard constraint to enforce the requirement that a trolley has a sufficient number of buckets for holding all of the elements picked along the path for each order, while at the same time the bucket’s capacity is not exceeded, and items from different orders are not mixed in the same bucket.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;minimizeDistanceFromPreviousTrolleyStep&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Soft constraint to enforce the requirement that the distance between the current trolley step, and the previous step in the calculated path is minimized.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;minimizeDistanceFromLastTrolleyStepToPathOrigin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Soft constraint to enforce the requirement that the distance between the first trolley stop (the path origin), and the last trolley stop in the calculated path is minimized.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The conjunction of the &lt;code&gt;minimizeDistanceFromPreviousTrolleyStep&lt;/code&gt; constraint applied to every step on the path, and the &lt;code&gt;minimizeDistanceFromLastTrolleyStepToPathOrigin&lt;/code&gt; constraint, enforces the entire path minimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;minimizeOrderSplitByTrolley&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Soft constraint to minimize the orders splitting into different trolleys.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_execution_explained&quot;&gt;Execution explained&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you first start the order picker, you will see that no picking plan or paths are calculated. No worries, it&amp;#8217;s perfectly fine because the solver isn&amp;#8217;t executed yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a moment to take a look at the initial data set before starting the solver. You use the Unassigned tab to do this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_unassigned_entities&quot;&gt;Unassigned entities&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The information about the unassigned trolleys and orders is shown on the different sub-tabs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting the solver, you can view all of the elements in the initial data set on this tab. However, as soon the solver starts solving, you will see that elements start disappearing from this tab. Good news, they&amp;#8217;re becoming part of the picking plan!.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Unassigned trolleys&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/14/orderPickingUnassignedTrolleys.png&quot; alt=&quot;orderPickingUnassignedTrolleys&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Unassigned Order_1&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/14/orderPickingUnassignedOrders.png&quot; alt=&quot;orderPickingUnassignedOrders&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_solver_execution&quot;&gt;Solver execution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click the Start button to start the solver. When the solver is started, you&amp;#8217;ll see that the Picking plan tab will start showing the information about the calculated plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/14/orderPickingPlan.png&quot; alt=&quot;orderPickingPlan&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
While the solver is running, the calculated plan is refreshed every 2 seconds, causing a screen refresh effect. You can use the stop solving button to mitigate this effect.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_trolley_navigation&quot;&gt;Trolley navigation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the Map tab to view a representation of how the different trolleys navigate the warehouse according to the calculated paths.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/14/orderPickingTrolleyPaths.png&quot; alt=&quot;orderPickingTrolleyPaths&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_running_the_quickstart&quot;&gt;Running the quickstart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run the quickstart, follow these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Clone the optaplanner-quickstarts repository:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ git clone https://github.com/kiegroup/optaplanner-quickstarts&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;Switch to the &lt;code&gt;development&lt;/code&gt; branch with the following commands:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ cd optaplanner-quickstarts
$ git checkout development&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;Navigate to the &lt;code&gt;use-cases/order-picking&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ cd use-cases/order-picking&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;4&quot;&gt;
&lt;li&gt;
&lt;p&gt;Start the Order Picking quick start in Quarkus development mode:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ mvn quarkus:dev&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot; start=&quot;5&quot;&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt; in your browser and click on the &lt;strong&gt;Solve&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/10/12/MonitorTheSolver.html</id>
            <title type="html">Monitor OptaPlanner solvers through Micrometer</title>
            <updated>2021-10-12T00:00:00+00:00</updated>
            <published>2021-10-12T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/10/12/MonitorTheSolver.html" rel="alternate" type="text/html" />
            <author>
                <name>Christopher-Chianelli</name>
            </author>
                    <category term="monitoring"></category>
                    <category term="production"></category>
            <summary type="html">
                 It&amp;#8217;s 11 PM on Friday evening. Everything was working fine&amp;#8201;&amp;#8212;&amp;#8201;until now. Suddenly services are failing left and right, and your boss wants to know why. One tool in achieving ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s 11 PM on Friday evening. Everything was working fine&amp;#8201;&amp;#8212;&amp;#8201;until now.
Suddenly services are failing left and right, and your boss wants to know why.
One tool in achieving a diagnosis is to use a monitoring system. Let&amp;#8217;s enable monitoring to the OptaPlanner nodes and see if we can diagnose this issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_monitoring&quot;&gt;What is monitoring?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Monitoring&lt;/em&gt; is observing the quality of a service over time.
Monitoring is similar to logging, except its output is more easily analyzed by a machine and can be aggregated across multiple nodes.
The software being monitored outputs &lt;em&gt;metrics&lt;/em&gt;, a numerical measurement of some aspect of the software.
The metrics are then recorded in a monitoring system, where they can be graphed, trigger alerts, and be correlated with events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, you can monitor an OptaPlanner service.
You can check how many solvers ran last night, and how many are currently running.
If you notice the count is higher than usual, than maybe the failures are caused by CPU starvation since OptaPlanner utilizes most of the CPU.
Additionally, you can also check how long each solver ran.
If a solver ran abnormally long or short, there might be an anomaly that should be investigated.
You might also want to check if the solver threw any errors. Perhaps the issue is caused by bad data being passed to the solver.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_connecting_monitoring_systems_to_optaplanner&quot;&gt;Connecting monitoring systems to OptaPlanner&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner uses &lt;a href=&quot;https://micrometer.io/&quot;&gt;Micrometer&lt;/a&gt; to collect its metrics.
Micrometer then sends the metrics to different monitoring systems using &lt;em&gt;registries&lt;/em&gt;.
Every monitoring system supported by Micrometer has its own registry.
In Quarkus, to connect OptaPlanner to &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;, you would add its extension as a dependency in the &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.quarkus&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;quarkus-micrometer-registry-prometheus&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Spring Boot, add the Spring Boot actuator to your project along with the registry dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.micrometer&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;micrometer-registry-prometheus&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and enable the metrics endpoint in &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;management.endpoints.web.exposure.include=metrics,prometheus&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For information on how to connect Micrometer to other monitoring systems, visit &lt;a href=&quot;https://micrometer.io/docs&quot;&gt;the Micrometer documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_monitoring_the_solver&quot;&gt;Monitoring the Solver&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we know what monitoring is and how it can be useful, let&amp;#8217;s walk through an actual example.
We&amp;#8217;ll be running a modified version of the &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts/tree/stable/use-cases/school-timetabling&quot;&gt;school timetabling quickstart&lt;/a&gt; with support for multitenancy.
You can find the complete source code, along with scripts for running it on the &lt;a href=&quot;https://github.com/Christopher-Chianelli/optaplanner-micrometer-blog&quot;&gt;optaplanner-micrometer-blog&lt;/a&gt; GitHub page.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_starting_the_application&quot;&gt;Starting the application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clone the example code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/Christopher-Chianelli/optaplanner-micrometer-blog
cd optaplanner-micrometer-blog&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start the application in development mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;mvn quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the application is started, you can access the application at &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;.
To see available metrics for the application, visit &lt;a href=&quot;http://localhost:8080/q/metrics&quot; class=&quot;bare&quot;&gt;http://localhost:8080/q/metrics&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/12/ExampleMonitoringApp.png&quot; alt=&quot;Example Application&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_starting_prometheus&quot;&gt;Starting Prometheus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prometheus has a prebuilt Docker image on Dockerhub that can be used for running Prometheus.
We&amp;#8217;ll need to modify its configuration so it&amp;#8217;ll scrape our metrics endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create the &lt;code&gt;prometheus.yml&lt;/code&gt; file with the following text:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;scrape_configs:
- job_name: local application
  scrape_interval: 1s
  metrics_path: /q/metrics
  static_configs:
  - targets:
    - localhost:8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This configures Prometheus to scrape metrics from &lt;code&gt;localhost:8080/q/metrics&lt;/code&gt; every second.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start Prometheus with the preceding configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;docker run \
    --network host \
    --mount type=bind,source=prometheus.yml,destination=/etc/prometheus/prometheus.yml,ro=true,relabel=shared \
     prom/prometheus&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see the Prometheus UI by visiting &lt;a href=&quot;http://localhost:9090&quot; class=&quot;bare&quot;&gt;http://localhost:9090&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/12/PrometheusUI.png&quot; alt=&quot;Prometheus UI&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_starting_grafana&quot;&gt;Starting Grafana&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; provides a much more robust UI with additional features.
Grafana has a prebuilt image on Dockerhub that you can use to run Grafana locally. Start it using the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;docker run --network host grafana/grafana&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It might take a while to start.
After it starts, visit &lt;a href=&quot;http://localhost:3000&quot; class=&quot;bare&quot;&gt;http://localhost:3000&lt;/a&gt; to see the Grafana UI.
Log in with the username &quot;admin&quot; and the password &quot;admin&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_connecting_grafana_to_prometheus&quot;&gt;Connecting Grafana to Prometheus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Click the Gear icon to go to the Configuration page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &quot;Add data source&quot; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &quot;Prometheus&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter &quot;http://localhost:9090&quot; for the URL field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Set the Scrape Interval to be equal to the one set for Prometheus (1s).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &quot;Save &amp;amp; Test&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If it is set up correctly, a green textbox will appear above &quot;Save &amp;amp; Test&quot; with text &quot;Data source is working&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/12/GrafanaConfigurePrometheus.png&quot; alt=&quot;Grafana Prometheus Configuration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_create_a_dashboard_to_monitor_metrics&quot;&gt;Create a dashboard to monitor metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With all that setup, we can finally graph some metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Click the &quot;+&quot; icon on the left sidebar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &quot;Add an empty panel&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beneath &quot;A&quot;, in the text box to the right of &quot;Metrics&quot;, enter &quot;optaplanner_solver_solve_duration_seconds_active_count&quot;. This adds a graph for the number of active solvers. It might say &quot;No data&quot; if no solvers were started yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the clock icon in the top right, and select &quot;Last 15 minutes&quot; under &quot;Relative time range&quot;. This makes the dashboard show data that occurred during the past 15 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &quot;http://localhost:8080&quot; and start some solvers. Use the &quot;School Id&quot; selector to change schools, and click the &quot;Solve&quot; button to start solving the current school timetable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The dashboard should display a graph similar to this one depending on how many solvers were started:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/12/GrafanaGraphExample.png&quot; alt=&quot;Grafana Graph&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_metrics_available&quot;&gt;Metrics available&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beside &quot;optaplanner_solver_solve_duration_seconds_active_count&quot;, there are several other metrics available by default:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;optaplanner_solver_errors_total: the total number of errors that occurred while solving since the start of the measuring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optaplanner_solver_solve_duration_seconds_max: run time of the longest-running currently active solver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optaplanner_solver_solve_duration_seconds_duration_sum: the sum of each active solver’s solve duration. For example, if there are two active solvers, one running for three minutes and the other for one minute, the total solve time is four minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 8.12.0.Final and above, additional metrics can be configured by adding a &lt;code&gt;&amp;lt;monitoring&amp;gt;&lt;/code&gt; section to the solver config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;solver xmlns=&quot;https://www.optaplanner.org/xsd/solver&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd&quot;&amp;gt;
  &amp;lt;monitoring&amp;gt;
    &amp;lt;metric&amp;gt;BEST_SCORE&amp;lt;/metric&amp;gt;
    &amp;lt;metric&amp;gt;CONSTRAINT_MATCH_TOTAL_BEST_SCORE&amp;lt;/metric&amp;gt;
    &amp;lt;!-- ... --&amp;gt;
  &amp;lt;/monitoring&amp;gt;
&amp;lt;/solver&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more infomation about OptaPlanner monitoring support, see the &lt;a href=&quot;https://docs.optaplanner.org/latest/optaplanner-docs/html_single/index.html#monitoring&quot;&gt;Monitoring&lt;/a&gt; section of the OptaPlanner documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_next&quot;&gt;What next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial covers the basics of what you can do with Grafana. Additional things you can do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://grafana.com/docs/grafana/latest/alerting/old-alerting/create-alerts/&quot;&gt;Create alerts that trigger whenever a certain condition is met&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://grafana.com/docs/grafana/latest/panels/transformations/&quot;&gt;Perform transformations on queries&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://grafana.com/docs/grafana/latest/visualizations/&quot;&gt;Visualize data in a variety of graphs and charts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Monitoring systems are a helpful tool for diagnosing and alerting us to issues.
&lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; integrates with monitoring systems using &lt;a href=&quot;https://micrometer.io/&quot;&gt;Micrometer&lt;/a&gt;, providing useful metrics such as active solver count.
One example of a monitoring system is &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;, which scrape metrics from an endpoint.
&lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; is an analytics visualization platform that allows us to visualize data and create alerts when certain conditions are met.
As always, the complete source code for this example is &lt;a href=&quot;https://github.com/Christopher-Chianelli/optaplanner-micrometer-blog&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/10/05/ANewAIConstraintSolverForPythonOptaPy.html</id>
            <title type="html">A new AI constraint solver for Python: OptaPy</title>
            <updated>2021-10-05T00:00:00+00:00</updated>
            <published>2021-10-05T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/10/05/ANewAIConstraintSolverForPythonOptaPy.html" rel="alternate" type="text/html" />
            <author>
                <name>Christopher-Chianelli</name>
            </author>
                    <category term="python"></category>
                    <category term="integration"></category>
            <summary type="html">
                 Python developers can now solve AI planning problems (such as the vehicle routing problem and employee rostering) with OptaPy. Let me show you how to use OptaPy and a bit of plain Python code to ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Python developers can now solve AI planning problems (such as the &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/vehicleRoutingProblem.html&quot;&gt;vehicle routing problem&lt;/a&gt; and &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/employeeRostering.html&quot;&gt;employee rostering&lt;/a&gt;) with &lt;strong&gt;&lt;a href=&quot;https://www.optapy.org&quot;&gt;OptaPy&lt;/a&gt;&lt;/strong&gt;.
Let me show you how to use OptaPy and a bit of plain Python code to tackle a typical mathematical optimization problem: generate a better school timetable schedule for teachers and students.
OptaPy is an open source project. It&amp;#8217;s available in &lt;a href=&quot;https://pypi.org/project/optapy/&quot;&gt;PyPI&lt;/a&gt; and is usable from a normal Python installation.
Internally, OptaPy uses OptaPlanner, so it does need a JDK installed.
Currently, it&amp;#8217;s significantly slower than using OptaPlanner directly from Java (or Kotlin for that matter), but it works and we&amp;#8217;re investigating ways to bridge the performance gap.
Let&amp;#8217;s optimize that school timetable in pure Python. &lt;strong&gt;Feel free to follow along in the &lt;a href=&quot;https://mybinder.org/v2/gh/optapy/optapy/main?filepath=index.ipynb&quot;&gt;OptaPy Jupyter notebook&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2021/10/05/schoolTimetablingInputOutput.png&quot; alt=&quot;Assign rooms and timeslots to lessons using OptaPy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python 3.9 or later is installed&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://adoptium.net/&quot;&gt;JDK 11 or later&lt;/a&gt; is installed with the environment variable JAVA_HOME configured to the JDK installation directory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_setup&quot;&gt;Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create a new Python virtual environment.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;python3 -m venv optapy-env&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activate the Python virtual environment.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;source optapy-env/bin/activate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use pip to install OptaPy.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;python3 -m pip install optapy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_school_timetabling&quot;&gt;School timetabling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In school timetabling, we need to assign a list of lessons to timeslots and rooms.
Additionally, there are some constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A room can have at most one lesson at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A teacher can teach at most one lesson at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A student can attend at most one lesson at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A teacher prefers to teach all lessons in the same room.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A teacher prefers to teach sequential lessons and dislikes gaps between lessons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A student dislikes sequential lessons on the same subject.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_modelling_the_domain&quot;&gt;Modelling the domain&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Objects used in constraints are known as the domain of the problem. In school timetabling, the domain consist of lessons, rooms and timeslots.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_problem_facts&quot;&gt;Problem Facts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Problem facts do not change throughout solving. Rooms and timeslots are examples of problem facts. Create a &lt;code&gt;domain.py&lt;/code&gt; file with the following code to create the &lt;code&gt;Room&lt;/code&gt; class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-python hljs&quot; data-lang=&quot;python&quot;&gt;from optapy import problem_fact, planning_id

@problem_fact
class Room:
    def __init__(self, id, name):
        self.id = id
        self.name = name

    @planning_id
    def get_id(self):
        return self.id

    def __str__(self):
        return f&quot;Room(id={self.id}, name={self.name})&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@problem_fact&lt;/code&gt; decorator registers the class as a problem fact, which allows it to be used in constraints.
The &lt;code&gt;@planning_id&lt;/code&gt; decorator registers &lt;code&gt;getId&lt;/code&gt; as the planning ID for &lt;code&gt;Room&lt;/code&gt;. OptaPlanner requires a planning ID for some functionality, such as generating unique pairs. The planning ID should be unique for instances of the same class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, in &lt;code&gt;domain.py&lt;/code&gt;, let&amp;#8217;s add the following code to create the &lt;code&gt;Timeslot&lt;/code&gt; class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-python hljs&quot; data-lang=&quot;python&quot;&gt;@problem_fact
class Timeslot:
    def __init__(self, id, day_of_week, start_time, end_time):
        self.id = id
        self.day_of_week = day_of_week
        self.start_time = start_time
        self.end_time = end_time

    @planning_id
    def get_id(self):
        return self.id

    def __str__(self):
        return (
                f&quot;Timeslot(&quot;
                f&quot;id={self.id}, &quot;
                f&quot;day_of_week={self.day_of_week}, &quot;
                f&quot;start_time={self.start_time}, &quot;
                f&quot;end_time={self.end_time})&quot;
        )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_planning_entities&quot;&gt;Planning Entities&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Planning entities change throughout solving. Lesson is a planning entity, since its &lt;code&gt;room&lt;/code&gt; and
&lt;code&gt;timeslot&lt;/code&gt; properties change throughout solving. Since the &lt;code&gt;room&lt;/code&gt; and &lt;code&gt;timeslot&lt;/code&gt; properties change throughout solving, they are known as planning variables. Let&amp;#8217;s add the following code to &lt;code&gt;domain.py&lt;/code&gt; to create the &lt;code&gt;Lesson&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-python hljs&quot; data-lang=&quot;python&quot;&gt;from optapy import planning_entity, planning_variable

@planning_entity
class Lesson:
    def __init__(self, id, subject, teacher, student_group, timeslot=None, room=None):
        self.id = id
        self.subject = subject
        self.teacher = teacher
        self.student_group = student_group
        self.timeslot = timeslot
        self.room = room

    @planning_id
    def get_id(self):
        return self.id

    @planning_variable(Timeslot, [&quot;timeslotRange&quot;])
    def get_timeslot(self):
        return self.timeslot

    def set_timeslot(self, new_timeslot):
        self.timeslot = new_timeslot

    @planning_variable(Room, [&quot;roomRange&quot;])
    def get_room(self):
        return self.room

    def set_room(self, new_room):
        self.room = new_room

    def __str__(self):
        return (
            f&quot;Lesson(&quot;
            f&quot;id={self.id}, &quot;
            f&quot;timeslot={self.timeslot}, &quot;
            f&quot;room={self.room}, &quot;
            f&quot;teacher={self.teacher}, &quot;
            f&quot;subject={self.subject}, &quot;
            f&quot;student_group={self.student_group}&quot;
            f&quot;)&quot;
        )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@planning_entity&lt;/code&gt; decorator registers the class as a planning entity, which allows OptaPlanner to assign its planning variables and for it to be used in constraints.
The &lt;code&gt;@planning_variable(variable_type, [value_range_provider_refs&amp;#8230;&amp;#8203;])&lt;/code&gt; decorator registers a method as the getter of a planning variable.
The getter must be named &lt;code&gt;get&amp;lt;X&amp;gt;&lt;/code&gt; and the setter must be named &lt;code&gt;set&amp;lt;X&amp;gt;&lt;/code&gt;.
The first argument, &lt;code&gt;variable_type&lt;/code&gt;, tells OptaPlanner what type of values OptaPlanner can assign to this planning variable.
The second argument, &lt;code&gt;value_range_provider_refs&lt;/code&gt;, tells OptaPlanner what value ranges it takes its values from. We will explain value ranges later in this example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_constraints&quot;&gt;Constraints&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Constraints define the score calculation, or the fitness function, of a planning problem. Each solution of a planning problem is graded with a score. A score represents the quality of a specific solution. The higher the score the better. OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time. It might or might not be the optimal solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because this use case has hard and soft constraints, use the HardSoftScore class to represent the score:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hard constraints must not be broken. For example: &lt;em&gt;A room can have at most one lesson at the same time&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Soft constraints should not be broken. For example: &lt;em&gt;A teacher prefers to teach in a single room&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hard constraints are weighted against other hard constraints. Soft constraints are weighted too, against other soft constraints. Hard constraints always outweigh soft constraints, regardless of their respective weights.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To calculate the score, create a constraint provider function in the file &lt;code&gt;constraints.py&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-python hljs&quot; data-lang=&quot;python&quot;&gt;from domain import Lesson, Room
from optapy import constraint_provider, get_class
from optapy.types import Joiners, HardSoftScore

# Constraint Factory takes Java Classes, not Python Classes
LessonClass = get_class(Lesson)
RoomClass = get_class(Room)

@constraint_provider
def define_constraints(constraint_factory):
    return [
        # Hard constraints
        room_conflict(constraint_factory),
        teacher_conflict(constraint_factory),
        student_group_conflict(constraint_factory),
        # Soft constraints are only implemented in the optapy-quickstarts code
    ]

def room_conflict(constraint_factory):
    # A room can accommodate at most one lesson at the same time.
    return constraint_factory \
            .from_(LessonClass) \
            .join(LessonClass,
                [
                    # ... in the same timeslot ...
                    Joiners.equal(lambda lesson: lesson.timeslot),
                    # ... in the same room ...
                    Joiners.equal(lambda lesson: lesson.room),
                    # ... and the pair is unique (different id, no reverse pairs) ...
                    Joiners.lessThan(lambda lesson: lesson.id)
                ]) \
            .penalize(&quot;Room conflict&quot;, HardSoftScore.ONE_HARD)


def teacher_conflict(constraint_factory):
    # A teacher can teach at most one lesson at the same time.
    return constraint_factory \
                .from_(LessonClass)\
                .join(LessonClass,
                        [
                            Joiners.equal(lambda lesson: lesson.timeslot),
                            Joiners.equal(lambda lesson: lesson.teacher),
                    Joiners.lessThan(lambda lesson: lesson.id)
                        ]) \
                .penalize(&quot;Teacher conflict&quot;, HardSoftScore.ONE_HARD)

def student_group_conflict(constraint_factory):
    # A student can attend at most one lesson at the same time.
    return constraint_factory \
            .from_(LessonClass) \
            .join(LessonClass,
                [
                    Joiners.equal(lambda lesson: lesson.timeslot),
                    Joiners.equal(lambda lesson: lesson.student_group),
                    Joiners.lessThan(lambda lesson: lesson.id)
                ]) \
            .penalize(&quot;Student group conflict&quot;, HardSoftScore.ONE_HARD)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@constraint_provider&lt;/code&gt; decorator allows OptaPlanner to use a function as a constraint provider.
The function must take exactly one argument; the passed argument is a &lt;code&gt;ConstraintFactory&lt;/code&gt; used for creating constraints.
For more information, see &lt;a href=&quot;https://docs.optaplanner.org/latest/optaplanner-docs/html_single/index.html#constraintStreams&quot;&gt;Constraint Streams&lt;/a&gt; in the OptaPlanner documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gather_the_domain_objects_in_a_planning_solution&quot;&gt;Gather the domain objects in a planning solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A TimeTable class wraps all Timeslot, Room, and Lesson instances of a single data set.
Furthermore, because it contains all lessons, each with a specific planning variable state, the TimeTable class is a planning solution and has a score:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If lessons are still unassigned, then it is an &lt;em&gt;uninitialized&lt;/em&gt; solution, for example, a solution with the score -4init/0hard/0soft.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it breaks hard constraints, then it is an &lt;em&gt;infeasible&lt;/em&gt; solution, for example, a solution with the score -2hard/-3soft.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it adheres to all hard constraints, then it is a &lt;em&gt;feasible&lt;/em&gt; solution, for example, a solution with the score 0hard/-7soft.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;code&gt;domain.py&lt;/code&gt;, add the following code to create the &lt;code&gt;TimeTable&lt;/code&gt; class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-python hljs&quot; data-lang=&quot;python&quot;&gt;from optapy import planning_solution, planning_entity_collection_property, \
                   problem_fact_collection_property, \
                   value_range_provider, planning_score
from optapy.types import HardSoftScore

def format_list(a_list):
    return &apos;,\n&apos;.join(map(str, a_list))

@planning_solution
class TimeTable:
    def __init__(self, timeslot_list, room_list, lesson_list, score=None):
        self.timeslot_list = timeslot_list
        self.room_list = room_list
        self.lesson_list = lesson_list
        self.score = score

    @problem_fact_collection_property(Timeslot)
    @value_range_provider(&quot;timeslotRange&quot;)
    def get_timeslot_list(self):
        return self.timeslot_list

    @problem_fact_collection_property(Room)
    @value_range_provider(&quot;roomRange&quot;)
    def get_room_list(self):
        return self.room_list

    @planning_entity_collection_property(Lesson)
    def get_lesson_list(self):
        return self.lesson_list

    @planning_score(HardSoftScore)
    def get_score(self):
        return self.score

    def set_score(self, score):
        self.score = score

    def __str__(self):
        return (
            f&quot;TimeTable(&quot;
            f&quot;timeslot_list={format_list(self.timeslot_list)},\n&quot;
            f&quot;room_list={format_list(self.room_list)},\n&quot;
            f&quot;lesson_list={format_list(self.lesson_list)},\n&quot;
            f&quot;score={str(self.score.toString()) if self.score is not None else &apos;None&apos;}&quot;
            f&quot;)&quot;
        )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@planning_solution&lt;/code&gt; decorator tells OptaPlanner that the class &lt;code&gt;TimeTable&lt;/code&gt; holds the input and output data.
The &lt;code&gt;@problem_fact_collection_property(fact_type)&lt;/code&gt; decorator tells OptaPlanner the function that provides problem facts.
The &lt;code&gt;fact_type&lt;/code&gt; argument tells OptaPlanner what type of fact it provides (for instance, Rooms).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@value_range_provider(range_id)&lt;/code&gt; decorator tells OptaPlanner the function that provides a value range, which is used to get possible values of planning variables.
Its argument, &lt;code&gt;range_id&lt;/code&gt; is a string which is used in &lt;code&gt;@planning_variable&lt;/code&gt; decorators to link the two (for example, &lt;code&gt;@planning_variable(Room, [&apos;roomRange&apos;])&lt;/code&gt; is linked to &lt;code&gt;@value_range_provider(&apos;roomRange&apos;)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@planning_entity_collection_property(entity_type)&lt;/code&gt; decorator tells OptaPlanner the function that provides planning entities.
The &lt;code&gt;entity_type&lt;/code&gt; argument tells OptaPlanner what type of entities it provides (for instance, Lessons).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@planning_score(score_type)&lt;/code&gt; decorator tells OptaPlanner the function that returns the score.
It must be named &lt;code&gt;get&amp;lt;X&amp;gt;&lt;/code&gt; and have a corresponding a setter &lt;code&gt;set&amp;lt;X&amp;gt;&lt;/code&gt;.
The &lt;code&gt;score_type&lt;/code&gt; argument tells OptaPlanner what type of score to use (for instance, &lt;code&gt;HardSoftScore&lt;/code&gt;).
The type should be taken from the &lt;code&gt;optapy.types&lt;/code&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_solving&quot;&gt;Solving&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To solve, we first need to create an instance of our problem. Add the following code to &lt;code&gt;domain.py&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-python hljs&quot; data-lang=&quot;python&quot;&gt;from datetime import time

def generate_problem():
    timeslot_list = [
        Timeslot(1, &quot;MONDAY&quot;, time(hour=8, minute=30), time(hour=9, minute=30)),
        Timeslot(2, &quot;MONDAY&quot;, time(hour=9, minute=30), time(hour=10, minute=30)),
        Timeslot(3, &quot;MONDAY&quot;, time(hour=10, minute=30), time(hour=11, minute=30)),
        Timeslot(4, &quot;MONDAY&quot;, time(hour=13, minute=30), time(hour=14, minute=30)),
        Timeslot(5, &quot;MONDAY&quot;, time(hour=14, minute=30), time(hour=15, minute=30)),
        Timeslot(6, &quot;TUESDAY&quot;, time(hour=8, minute=30), time(hour=9, minute=30)),
        Timeslot(7, &quot;TUESDAY&quot;, time(hour=9, minute=30), time(hour=10, minute=30)),
        Timeslot(8, &quot;TUESDAY&quot;, time(hour=10, minute=30), time(hour=11, minute=30)),
        Timeslot(9, &quot;TUESDAY&quot;, time(hour=13, minute=30), time(hour=14, minute=30)),
        Timeslot(10, &quot;TUESDAY&quot;, time(hour=14, minute=30), time(hour=15, minute=30)),
    ]
    room_list = [
        Room(1, &quot;Room A&quot;),
        Room(2, &quot;Room B&quot;),
        Room(3, &quot;Room C&quot;)
    ]
    lesson_list = [
        Lesson(1, &quot;Math&quot;, &quot;A. Turing&quot;, &quot;9th grade&quot;),
        Lesson(2, &quot;Math&quot;, &quot;A. Turing&quot;, &quot;9th grade&quot;),
        Lesson(3, &quot;Physics&quot;, &quot;M. Curie&quot;, &quot;9th grade&quot;),
        Lesson(4, &quot;Chemistry&quot;, &quot;M. Curie&quot;, &quot;9th grade&quot;),
        Lesson(5, &quot;Biology&quot;, &quot;C. Darwin&quot;, &quot;9th grade&quot;),
        Lesson(6, &quot;History&quot;, &quot;I. Jones&quot;, &quot;9th grade&quot;),
        Lesson(7, &quot;English&quot;, &quot;I. Jones&quot;, &quot;9th grade&quot;),
        Lesson(8, &quot;English&quot;, &quot;I. Jones&quot;, &quot;9th grade&quot;),
        Lesson(9, &quot;Spanish&quot;, &quot;P. Cruz&quot;, &quot;9th grade&quot;),
        Lesson(10, &quot;Spanish&quot;, &quot;P. Cruz&quot;, &quot;9th grade&quot;),
        Lesson(11, &quot;Math&quot;, &quot;A. Turing&quot;, &quot;10th grade&quot;),
        Lesson(12, &quot;Math&quot;, &quot;A. Turing&quot;, &quot;10th grade&quot;),
        Lesson(13, &quot;Math&quot;, &quot;A. Turing&quot;, &quot;10th grade&quot;),
        Lesson(14, &quot;Physics&quot;, &quot;M. Curie&quot;, &quot;10th grade&quot;),
        Lesson(15, &quot;Chemistry&quot;, &quot;M. Curie&quot;, &quot;10th grade&quot;),
        Lesson(16, &quot;French&quot;, &quot;M. Curie&quot;, &quot;10th grade&quot;),
        Lesson(17, &quot;Geography&quot;, &quot;C. Darwin&quot;, &quot;10th grade&quot;),
        Lesson(18, &quot;History&quot;, &quot;I. Jones&quot;, &quot;10th grade&quot;),
        Lesson(19, &quot;English&quot;, &quot;P. Cruz&quot;, &quot;10th grade&quot;),
        Lesson(20, &quot;Spanish&quot;, &quot;P. Cruz&quot;, &quot;10th grade&quot;),
    ]
    lesson = lesson_list[0]
    lesson.set_timeslot(timeslot_list[0])
    lesson.set_room(room_list[0])

    return TimeTable(timeslot_list, room_list, lesson_list)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we need to create a &lt;code&gt;SolverConfig&lt;/code&gt;, which tells OptaPlanner about the problem and what strategies to employ. In &lt;code&gt;main.py&lt;/code&gt;, add the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-python hljs&quot; data-lang=&quot;python&quot;&gt;from domain import Lesson, TimeTable, generate_problem
from constraints import define_constraints
from optapy import get_class
from optapy.types import SolverConfig, Duration

solver_config = SolverConfig().withEntityClasses(get_class(Lesson)) \
    .withSolutionClass(get_class(TimeTable)) \
    .withConstraintProviderClass(get_class(define_constraints)) \
    .withTerminationSpentLimit(Duration.ofSeconds(30))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the &lt;code&gt;SolverConfig&lt;/code&gt; above, we use the default strategies, use the model we defined above, and set it terminate after 30 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we pass the &lt;code&gt;SolverConfig&lt;/code&gt; and the problem instance to the &lt;code&gt;solve&lt;/code&gt; function, which returns the last best solution found. Add the following code to &lt;code&gt;main.py&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-python hljs&quot; data-lang=&quot;python&quot;&gt;from optapy import solve

solution = solve(solver_config, generate_problem())
print(solution)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution returned is a &lt;code&gt;TimeTable&lt;/code&gt; instance
of the best solution found.
When the solution is formatted into a table, it should look similar to this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-text hljs&quot; data-lang=&quot;text&quot;&gt;|------------|------------|------------|------------|
|            | Room A     | Room B     | Room C     |
|------------|------------|------------|------------|
| MON 08:30: |            | Math       | History    |
|            |            | A. Turing  | I. Jones   |
|            |            | 9th grade  | 10th grade |
|------------|------------|------------|------------|
| MON 09:30: |            | Math       | History    |
|            |            | A. Turing  | I. Jones   |
|            |            | 10th grade | 9th grade  |
|------------|------------|------------|------------|
| MON 10:30: |            | Math       | English    |
|            |            | A. Turing  | I. Jones   |
|            |            | 10th grade | 9th grade  |
|------------|------------|------------|------------|
| MON 13:30: | Math       | Spanish    |            |
|            | A. Turing  | P. Cruz    |            |
|            | 10th grade | 9th grade  |            |
|------------|------------|------------|------------|
| MON 14:30: | Math       | English    |            |
|            | A. Turing  | P. Cruz    |            |
|            | 9th grade  | 10th grade |            |
|------------|------------|------------|------------|
| TUE 08:30: | Physics    | Spanish    |            |
|            | M. Curie   | P. Cruz    |            |
|            | 9th grade  | 10th grade |            |
|------------|------------|------------|------------|
| TUE 09:30: | Chemistry  |            | English    |
|            | M. Curie   |            | I. Jones   |
|            | 10th grade |            | 9th grade  |
|------------|------------|------------|------------|
| TUE 10:30: | Physics    | Spanish    |            |
|            | M. Curie   | P. Cruz    |            |
|            | 10th grade | 9th grade  |            |
|------------|------------|------------|------------|
| TUE 13:30: | French     |            | Biology    |
|            | M. Curie   |            | C. Darwin  |
|            | 10th grade |            | 9th grade  |
|------------|------------|------------|------------|
| TUE 14:30: | Chemistry  | Geography  |            |
|            | M. Curie   | C. Darwin  |            |
|            | 9th grade  | 10th grade |            |
|------------|------------|------------|------------|&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_run_the_application&quot;&gt;Run the application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run the application, execute the main file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;python3 main.py&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With &lt;a href=&quot;https://www.optapy.org&quot;&gt;OptaPy&lt;/a&gt;, Python developers can now use OptaPlanner in plain Python code (no Java coding needed).
The full example can be found in the &lt;a href=&quot;https://github.com/optapy/optapy/tree/main/optapy-quickstarts/school-timetabling&quot;&gt;OptaPy quickstarts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html</id>
            <title type="html">How much faster is Java 17?</title>
            <updated>2021-09-15T00:00:00+00:00</updated>
            <published>2021-09-15T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/09/15/HowMuchFasterIsJava17.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="production"></category>
                    <category term="benchmark"></category>
            <summary type="html">
                 Java 17 (released yesterday) comes with many new features and enhancements. However, most of those require code changes to benefit from. Except for performance. Simply switch your JDK ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 17 (released yesterday) comes with many new features and enhancements.
However, most of those require code changes to benefit from.
&lt;em&gt;Except for performance.&lt;/em&gt;
Simply switch your JDK installation and you get a free performance boost.
But how much? Is it worth it?
Let&amp;#8217;s find out by comparing the benchmarks of JDK 17, JDK 16 and JDK 11.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_methodology&quot;&gt;Benchmark methodology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hardware: A stable machine without any other computational demanding processes running and with
&lt;code&gt;Intel® Xeon® Silver 4116 @ 2.1 GHz (12 cores total / 24 threads)&lt;/code&gt; and &lt;code&gt;128 GiB&lt;/code&gt; RAM memory, running &lt;code&gt;RHEL 8 x86_64&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDKs (used to both compile and run):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JDK 11&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;openjdk 11.0.12 2021-07-20
OpenJDK Runtime Environment Temurin-11.0.12+7 (build 11.0.12+7)
OpenJDK 64-Bit Server VM Temurin-11.0.12+7 (build 11.0.12+7, mixed mode)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK 16&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;openjdk 16.0.2 2021-07-20
OpenJDK Runtime Environment (build 16.0.2+7-67)
OpenJDK 64-Bit Server VM (build 16.0.2+7-67, mixed mode, sharing)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK 17 (downloaded 2021-09-06)&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;openjdk 17 2021-09-14
OpenJDK Runtime Environment (build 17+35-2724)
OpenJDK 64-Bit Server VM (build 17+35-2724, mixed mode, sharing)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JVM options: &lt;code&gt;-Xmx3840M&lt;/code&gt; and explicitly specify a garbage collector:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX:+UseG1GC&lt;/code&gt; for G1GC, the low latency garbage collector (the default in all three JDKs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX:+UseParallelGC&lt;/code&gt; for ParallelGC, the high throughput garbage collector.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main class: &lt;code&gt;org.optaplanner.examples.app.GeneralOptaPlannerBenchmarkApp&lt;/code&gt;
from the module &lt;code&gt;optaplanner-examples&lt;/code&gt; in OptaPlanner &lt;code&gt;8.10.0.Final&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each run solves 11 planning problems with OptaPlanner, such as
&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/employeeRostering.html&quot;&gt;employee rostering&lt;/a&gt;,
&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/schoolTimetabling.html&quot;&gt;school timetabling&lt;/a&gt; and
&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/cloudOptimization.html&quot;&gt;cloud optimization&lt;/a&gt;.
Each planning problem runs for 5 minutes. Logging is set to &lt;code&gt;INFO&lt;/code&gt;.
The benchmark starts with a 30 second JVM warm up which is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solving a planning problem involves &lt;strong&gt;no IO&lt;/strong&gt; (except a few milliseconds during startup to load the input). &lt;strong&gt;A single
CPU is completely saturated.&lt;/strong&gt; It constantly creates many short-lived objects, and the GC collects them afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmarks measure the number of scores calculated per second. Higher is better. Calculating
a score for a proposed planning solution is non-trivial: it involves many calculations, including checking for
conflicts between every entity and every other entity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runs: Each JDK and each garbage collector combination is run 3 times sequentially.
The results below is the average of those 3 runs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;runBenchmarkJDKComparison.sh.txt&quot;&gt;Here is the shell script to reproduce these results.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_results&quot;&gt;Results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_java_11_lts_and_java_16_versus_java_17_lts&quot;&gt;Java 11 (LTS) and Java 16 versus Java 17 (LTS)&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/09/15/comparison-java11-java16-java17-G1GC.png&quot; alt=&quot;comparison java11 java16 java17 G1GC&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Score calculation count per second with G1GC on different JDKs&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6924%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;103,606&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;96,700&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;274,103&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;37,421&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11,779&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13,660&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14,354&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,982&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,585&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,335&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,019&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK 16&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;109,203&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;97,567&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;243,096&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;38,031&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13,950&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16,251&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15,218&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9,528&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,817&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,508&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,472&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK 17&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;106,147&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;98,069&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;245,645&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;42,096&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14,406&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16,924&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15,619&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9,726&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,802&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,601&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,618&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11 → 17&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;8.66%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.45%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.42%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-10.38%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.49%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22.30%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.90%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.81%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.28%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.05%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7.98%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.95%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16 → 17&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2.41%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.80%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.51%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.05%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10.69%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.27%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.14%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.63%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.08%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.39%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.65%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.67%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/09/15/comparison-java11-java16-java17-ParallelGC.png&quot; alt=&quot;comparison java11 java16 java17 ParallelGC&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Score calculation count per second with ParallelGC on different JDKs&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6924%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;128,553&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;121,974&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;292,761&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;48,339&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13,397&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15,540&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16,392&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9,887&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,409&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,148&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,097&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK 16&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;128,723&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;123,314&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;281,882&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;45,622&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16,243&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18,528&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17,742&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10,744&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,608&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,348&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,578&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK 17&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;130,215&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;124,498&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;262,753&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;45,058&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16,479&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18,904&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18,023&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10,845&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,658&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,430&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,641&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11 → 17&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;6.54%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.29%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.07%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-10.25%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.79%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21.64%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.95%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.68%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.63%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.80%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.92%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16 → 17&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.37%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.16%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.96%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.79%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.24%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.45%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.03%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.59%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.94%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.08%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.89%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.96%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking at the raw data of the 3 individual runs (not shown here),
the Machine Reassignment numbers (B1 and B10) fluctuate a lot between runs on the same JDK and GC.
Often by more than 10%. The other numbers don&amp;#8217;t suffer from this unreliability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;It&amp;#8217;s arguably better to ignore the Machine Reassignment numbers&lt;/em&gt;.
But to avoid cherry-picking data concerns, these results and averages do include them.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_g1gc_versus_parallelgc_on_java_17&quot;&gt;G1GC versus ParallelGC on Java 17&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/09/15/comparison-G1GC-ParallelGC-java17.png&quot; alt=&quot;comparison G1GC ParallelGC java17&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. Score calculation count per second on JDK 17 with different GCs&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6924%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;sup&gt;.&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;G1GC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;106,147&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;98,069&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;245,645&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;42,096&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14,406&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16,924&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15,619&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9,726&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,802&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,601&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,618&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ParallelGC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;130,215&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;124,498&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;262,753&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;45,058&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16,479&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18,904&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18,023&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10,845&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,658&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,430&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,641&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;G1 → ParallelGC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;16.39%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22.67%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;26.95%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.96%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7.04%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14.39%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.69%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15.39%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.50%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22.50%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.01%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18.20%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_executive_summary&quot;&gt;Executive summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On average, for OptaPlanner use cases, these benchmarks indicate that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Java 17 is 8.66% faster than Java 11&lt;/strong&gt; and 2.41% faster than Java 16 for G1GC (default).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 17 is 6.54% faster than Java 11 and 0.37% faster than Java 16 for ParallelGC.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Parallel Garbage Collector is 16.39% faster than the G1 Garbage Collector.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No big surprises here: the latest JDK is faster
and the high throughput garbage collector is faster than the low latency garbage collector.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wait_a_minute_here&quot;&gt;Wait a minute here&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When &lt;a href=&quot;https://www.optaplanner.org/blog/2021/01/26/HowMuchFasterIsJava15.html&quot;&gt;we benchmarked JDK 15&lt;/a&gt;,
we saw that Java 15 was 11.24% faster than Java 11. Now, the gain of Java 17 over Java 11 is less.
Does that mean that Java 17 is slower than Java 15?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, no. &lt;em&gt;Java 17 is faster than Java 15 too.&lt;/em&gt;
Those previous benchmarks were run on a different codebase (OptaPlanner 7.44 instead of 8.10).
Don&amp;#8217;t compare apples and oranges.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In conclusion, the performance gained in the JDK17 version is well worth the upgrade - at least for &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, the fastest garbage collector for these use cases is still &lt;code&gt;ParallelGC&lt;/code&gt;, instead of &lt;code&gt;G1GC&lt;/code&gt; (the default).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/08/19/ConstraintStreamsSomeMoreLove.html</id>
            <title type="html">Constraint Streams get some more love</title>
            <updated>2021-08-19T00:00:00+00:00</updated>
            <published>2021-08-19T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/08/19/ConstraintStreamsSomeMoreLove.html" rel="alternate" type="text/html" />
            <author>
                <name>triceo</name>
            </author>
                    <category term="constraint"></category>
                    <category term="feature"></category>
            <summary type="html">
                 We have recently merged a lot of improvements to OptaPlanner&apos;s Constraint Streams API in order to make it faster and even easier to use. Let&amp;#8217;s take a closer look at some of them. Constraint ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have recently merged a lot of improvements to &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;&apos;s &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#constraintStreams&quot;&gt;Constraint Streams API&lt;/a&gt;
in order to make it faster and even easier to use.
Let&amp;#8217;s take a closer look at some of them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_constraint_streams_by_default&quot;&gt;Constraint Streams by default&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I find it hard to believe that it&amp;#8217;s been over two years already since we&amp;#8217;ve introduced Constraint Streams into OptaPlanner; how time flies!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get you started, OptaPlanner has always brought a &lt;a href=&quot;https://www.optaplanner.org/download/download.html&quot;&gt;wide selection of examples&lt;/a&gt; and more recently &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts&quot;&gt;quickstarts&lt;/a&gt;.
While quickstarts have always used Constraint Streams and Constraint Streams only, the examples being older in age, they typically bring more scoring implementations, such as &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#droolsScoreCalculation&quot;&gt;DRL&lt;/a&gt; or &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#incrementalJavaScoreCalculation&quot;&gt;incremental Java&lt;/a&gt;.
To clearly state that Constraint Streams are now the scoring method of choice, we have recently converted all OptaPlanner examples to use Constraint Streams by default.
That said, we do not intend to deprecate any of the other scoring methods any time soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_constraint_collectors&quot;&gt;New constraint collectors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Seeing increased adoption of Constraint Streams, we have been expanding the selection of &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#constraintStreamsGroupingAndCollectors&quot;&gt;constraint collectors&lt;/a&gt; available out of the box.
Recently, we have added the following new constraint collectors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;average()&lt;/code&gt; constraint collector allows you to calculate an average of a group of items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;compose()&lt;/code&gt; collector allows you to merge results of several constraint collectors. (For example, the &lt;code&gt;average()&lt;/code&gt; collector is a composite of &lt;code&gt;count()&lt;/code&gt; and &lt;code&gt;sum()&lt;/code&gt;.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;conditionally()&lt;/code&gt; constraint collectors allows you to only delegate to another collector if a given condition is met first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Especially with the latter two collectors, the expressive power of Constraint Streams has grown significantly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_faster_constraint_collectors&quot;&gt;Faster constraint collectors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until recently, constraint collectors &lt;code&gt;toList()&lt;/code&gt;, &lt;code&gt;toSet()&lt;/code&gt;, &lt;code&gt;toSortedSet()&lt;/code&gt;, &lt;code&gt;toMap()&lt;/code&gt; and &lt;code&gt;toSortedMap()&lt;/code&gt; have been comparatively slow.
We have now changed the underlying implementation to be much more friendly to incremental calculation, and the end result is a performance improvement on the order of magnitudes on large enough data sets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_experimental_constraint_collectors&quot;&gt;Experimental constraint collectors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we were implementing constraint providers for all the various examples, we noticed some constraints (which were already hard to implement in DRL) were impossible with Constraint Streams as it stands.
Consider the following &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#nurseRostering&quot;&gt;Nurse Rostering&lt;/a&gt; &lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/8.10.0.Final/optaplanner-examples/src/main/resources/org/optaplanner/examples/nurserostering/solver/nurseRosteringConstraints.drl#L97&quot;&gt;DRL-based constraint&lt;/a&gt; to penalize too many consecutive shifts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-drl hljs&quot; data-lang=&quot;drl&quot;&gt;    rule &quot;insertEmployeeConsecutiveAssignmentStart&quot; when
        ... // Omitted for brevity.
    then
        insertLogical(new EmployeeConsecutiveAssignmentStart($employee, $shiftDate));
    end

    rule &quot;insertEmployeeConsecutiveAssignmentEnd&quot; when
        ... // Omitted for brevity.
    then
        insertLogical(new EmployeeConsecutiveAssignmentEnd($employee, $shiftDate));
    end

    rule &quot;insertEmployeeWorkSequence&quot; when
        EmployeeConsecutiveAssignmentStart($employee : employee, $firstDayIndex : shiftDateDayIndex)
        EmployeeConsecutiveAssignmentEnd(employee == $employee, shiftDateDayIndex &amp;gt;= $firstDayIndex, $lastDayIndex : shiftDateDayIndex )
        not EmployeeConsecutiveAssignmentEnd(employee == $employee, shiftDateDayIndex &amp;gt;= $firstDayIndex &amp;amp;&amp;amp; &amp;lt; $lastDayIndex)
    then
        insertLogical(new EmployeeWorkSequence($employee, $firstDayIndex, $lastDayIndex));
    end

    rule &quot;minimumConsecutiveWorkingDays&quot; when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.CONSECUTIVE_WORKING_DAYS, minimumEnabled == true,
            $contract : contract, $minimumValue : minimumValue
        )
        EmployeeWorkSequence(getEmployee().getContract() == $contract, dayLength &amp;lt; $minimumValue, $dayLength : dayLength)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($dayLength - $minimumValue) * $contractLine.getMinimumWeight());
    end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, this is a lot of DRL which fundamentally does this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Infer the first shift in a sequence of consecutive shifts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Infer the last shift in a sequence of consecutive shifts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Infer all the non-overlapping sequences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Penalize sequences longer than what is prescribed by the contract.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now consider how the same constraint is accomplished with Constraint Streams, using the experimental consecutive constraint collector:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;    Constraint consecutiveWorkingDays(ConstraintFactory constraintFactory) {
        return constraintFactory.from(MinMaxContractLine.class)
            .filter(minMaxContractLine -&amp;gt; minMaxContractLine
                .getContractLineType() == ContractLineType.CONSECUTIVE_WORKING_DAYS &amp;amp;&amp;amp;
                minMaxContractLine.isEnabled())
            .join(ShiftAssignment.class,
                Joiners.equal(ContractLine::getContract, ShiftAssignment::getContract))
            .groupBy((contract, shift) -&amp;gt; shift.getEmployee(),
                (contract, shift) -&amp;gt; contract,
                ExperimentalConstraintCollectors.consecutive((contract, shift) -&amp;gt; shift.getShiftDate(),
                    ShiftDate::getDayIndex))
            .flattenLast(ConsecutiveInfo::getConsecutiveSequences)
            .filter((employee, contract, shiftList) -&amp;gt; contract.isViolated(shiftList.getLength()))
            .penalize(&quot;consecutiveWorkingDays&quot;, HardSoftScore.ONE_SOFT,
                    (employee, contract, shiftList) -&amp;gt; contract.getViolationAmount(shiftList.getLength()));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This constraint uses the experimental consecutive constraint collector to get us a list of all sequences of consecutive shifts.
This list is then &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#constraintStreamsFlattening&quot;&gt;flattened&lt;/a&gt;, giving us each sequence individually.
As you can see, this is a much more concise implementation of the same behavior, with the brunt of the logic hidden inside the constraint collector itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This constraint collector &lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/8.10.0.Final/optaplanner-examples/src/main/java/org/optaplanner/examples/common/experimental/ExperimentalConstraintCollectors.java&quot;&gt;is not part of our public API&lt;/a&gt; and we consider it experimental.
Before we make it part of the public API, we are looking for your feedback to make sure it fits the various use cases that are out there.
If you have any questions or see issues in applying this pattern to your own constraints, do not hesitate to &lt;a href=&quot;https://www.optaplanner.org/community/getHelp.html&quot;&gt;reach out to us&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of these improvements are available as of OptaPlanner 8.11.0.Final, coming soon to a mirror near you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will continue improving Constraint Streams as we find more and more problems to solve.
If you want to make sure we can solve your problems too, &lt;a href=&quot;https://www.optaplanner.org/community/getHelp.html&quot;&gt;share them with us&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/07/26/LetsOptaPlanYourJbpmTasksPart2.html</id>
            <title type="html">Let&amp;#8217;s OptaPlan your jBPM tasks (part 2) - BPM Task assigning in the cloud</title>
            <updated>2021-07-26T00:00:00+00:00</updated>
            <published>2021-07-26T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/07/26/LetsOptaPlanYourJbpmTasksPart2.html" rel="alternate" type="text/html" />
            <author>
                <name>wmedvede</name>
            </author>
                    <category term="feature"></category>
                    <category term="task assignment"></category>
                    <category term="cloud"></category>
            <summary type="html">
                 In the following paragraphs we will show that by combining the Kogito business processes with OptaPlanner optimization, it is possible to automatically assign tasks to users. Furthermore, we can ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following paragraphs we will show that by combining the &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; business processes with OptaPlanner optimization, it is possible to automatically assign tasks to users. Furthermore, we can optimize those assignments, for example, to ensure that every user has the right skills for executing a task, a fair workload between users is produced, tasks are assigned according priorities, and other criteria. Finally, all this will take place in the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But, wait! Isn&amp;#8217;t this &lt;em&gt;task assigning problem&lt;/em&gt; already solved in &lt;a href=&quot;https://www.optaplanner.org/blog/2020/07/03/LetsOptaPlanYourJbpmTasksPart1.html&quot;&gt;Let&amp;#8217;s OptaPlan your jBPM tasks (part 1)&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes…, but this time we challenged OptaPlanner to solve it by coordinating independent business processes that execute as cloud-native services, and this last definitely means &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_not_yet_familiar_with_kogito&quot;&gt;Not yet familiar with Kogito?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To summarize, &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; is the cloud-native business automation ecosystem for building modern applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essentially, when you use &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; you are building a cloud-native application as a set of independent domain-specific services. These services can be constructed by using business processes, business rules, decisions and constraints solving, as well as other &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; supporting services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a user, you simply focus on creating your business processes, rules, etc. and &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; will take care of the most difficult part of the job: &lt;em&gt;to make these assets work as cloud-native services&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, by using any of the OptaPlanner &lt;a href=&quot;https://www.optaplanner.org/compatibility/quarkus.html&quot;&gt;Quarkus&lt;/a&gt; or &lt;a href=&quot;https://www.optaplanner.org/compatibility/springBoot.html&quot;&gt;SpringBoot&lt;/a&gt; extensions, your optimization problems can be easily solved in your cloud-application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_new_context&quot;&gt;The new context&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make comparison with the previous results easy, we&amp;#8217;ll use the same &quot;Credit Dispute&quot; process presented in: &lt;a href=&quot;https://www.optaplanner.org/blog/2020/07/03/LetsOptaPlanYourJbpmTasksPart1.html&quot;&gt;Let&amp;#8217;s OptaPlan your jBPM tasks (part 1)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But let&amp;#8217;s take a look at how things look like when we move to &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_business_processes_with_kogito&quot;&gt;Business Processes with Kogito&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;When your &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; project is built, several processings are realized and finally a cloud-native &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; application is automatically generated for you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For assets like the business processes, different services are generated, and proper REST endpoints are automatically provided for executing and interacting with the process instances and human tasks of that process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Granularity is determined by the user, i.e., you decide how many business processes to include in your project, and thus it&amp;#8217;s very easy to move to a microservices approach too. For example, you could decide to group the processes related with the Hiring Procedure of your company in one project, and the processes related with the Support Procedure in another. By doing this, two different cloud-native applications with the corresponding business processes services will be generated. In this way, two different logical units will be present along the CI/CD pipeline, for example, the Hiring Procedure related processes will execute at the same OpenShift/Kubernetes Pod, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additionally, by combining different &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; building blocks, called add-ons, you can make your services to be automatically plugged with persistence, additional administration endpoints, kafka based cloud events generation, and many more.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following image we can see a simplified diagram of the generated Kogito Application for the &lt;strong&gt;task-assigning-demo&lt;/strong&gt; project, which contains the &lt;strong&gt;CreditDispute.bpmn&lt;/strong&gt; process and includes the &lt;strong&gt;kogito-addons-quarkus-events-smallrye&lt;/strong&gt; to connect with Kafka.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/07/26/KogitoProject2Built.png&quot; alt=&quot;KogitoProject2Built&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_optaplanner_with_kogito&quot;&gt;OptaPlanner with Kogito&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, when the OptaPlanner &lt;a href=&quot;https://www.optaplanner.org/compatibility/quarkus.html&quot;&gt;Quarkus&lt;/a&gt; or &lt;a href=&quot;https://www.optaplanner.org/compatibility/springBoot.html&quot;&gt;SpringBoot&lt;/a&gt; extension is included in your application, the following actions take place:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;When your project is built, OptaPlanner definitions like the Solver configuration file, the PlanningSolution, the PlanningEntities, etc., are processed and proper ready for cloud runtime components are automatically generated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your application can simply use these components when needed, typically by using CDI and OptaPlanner standard APIs. All the rest is managed by OptaPlanner runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following image we show a simplified diagram of the &lt;strong&gt;task-assigning-service&lt;/strong&gt; project, which contains the &lt;strong&gt;taskAssigningDefaultSolverConfig.xml&lt;/strong&gt; (Solver configuration), the &lt;strong&gt;TaskAssigningSolution&lt;/strong&gt; (PlanningSolution), the &lt;strong&gt;TaskAssignment&lt;/strong&gt; and &lt;strong&gt;User&lt;/strong&gt; (PlanningEntities) and includes the &lt;strong&gt;optaplanner-quarkus&lt;/strong&gt; extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See how these elements can be used in your code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/07/26/TaskAssigningServiceApplication.png&quot; alt=&quot;TaskAssigningServiceApplication&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_task_assigning_service&quot;&gt;The Task Assigning Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we can see all the building blocks working together:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/07/26/TaskAssigningServiceArchitecture.png&quot; alt=&quot;TaskAssigningServiceArchitecture&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the CreditDispute process is executed the following actions takes place:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A process instance is created by using the corresponding endpoints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the human tasks are created/completed/etc. Cloud Events are produced and delivered to Kafka thanks to the inclusion of the kogito-addons-quarkus-events-smallrye.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Different &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; supporting services like the &lt;a href=&quot;https://docs.kogito.kie.org/latest/html_single/#con-data-index-service_kogito-configuring&quot;&gt;Data Index Service&lt;/a&gt; or the &lt;a href=&quot;https://docs.kogito.kie.org/latest/html_single/#con-kogito-task-assigning-service_kogito-configuring&quot;&gt;Task Assigning Service&lt;/a&gt; receives these events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the &lt;a href=&quot;https://docs.kogito.kie.org/latest/html_single/#con-kogito-task-assigning-service_kogito-configuring&quot;&gt;Task Assigning Service&lt;/a&gt;, OptaPlanner takes immediate control on these events, and the new task assignments plan is calculated and optimized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, by using the generated process endpoints the necessary assignments are produced.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This cycle is repeated over and over.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information see: &lt;a href=&quot;https://docs.kogito.kie.org/latest/html_single/#con-kogito-task-assigning-service_kogito-configuring&quot;&gt;Task Assigning Service&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_process_execution&quot;&gt;Process execution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s now execute the Credit Dispute process in the &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/07/26/CreditDisputeProcessDiagramWithTaskInputs.png&quot; alt=&quot;CreditDisputeProcessDiagramWithTaskInputs&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows how a new process instance is created by using the Kogito generated endpoints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/07/26/Start_CreditDispute_1111_MASTER_Spanish.png&quot; alt=&quot;Start CreditDispute 1111 MASTER Spanish&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Analogous the previous use case (see: &lt;a href=&quot;https://www.optaplanner.org/blog/2020/07/03/LetsOptaPlanYourJbpmTasksPart1.html&quot;&gt;Let&amp;#8217;s OptaPlan your jBPM tasks (part 1)&lt;/a&gt;), this information combined with the user&amp;#8217;s configuration is used to establish which of the available users are best suited for each task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time, the following user&amp;#8217;s configuration is used:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;User&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Belongs the group&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Has skills in&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;katy&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CreditAnalyst&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CITI and MASTER cards.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;emily&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CreditAnalyst&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VISA and AMERICAN_EXPRESS cards.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;bob&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ClientRelations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Spanish and English languages.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;frank&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ClientRelations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Chinese language.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, when the process is started a new instance of the ResolveDispute task is created and automatically assigned:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/07/26/ResovleDispute_1111_MASTER_Spanish_katy.png&quot; alt=&quot;ResovleDispute 1111 MASTER Spanish katy&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The task requires &quot;a CreditAnalyst user with skills in the MASTER credit card&quot;. This is why it was automatically assigned to katy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As soon this task is completed, a new instance of the NotifyCustomer task is created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows the new instance information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/07/26/NotifyCustomer_1111_MASTER_Spanish_bob.png&quot; alt=&quot;NotifyCustomer 1111 MASTER Spanish bob&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The task requires &quot;a ClientRelations user with skills in the Spanish language&quot;, and this is why this new task is assigned to bob.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, the example above is quite linear, a few users are defined, and the possible assignments are direct. This was done intentionally to show how the assignment decisions are made accordingly with the configured users, the tasks configurations and also the related business data. The real power of this solution can be seen when we move to real environments, where many tasks are in progress and many users are available for selection. In those cases, OptaPlanner can really make his job and produce the optimized assignments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We started by formulating an already solved problem, but using a completely different underlying ecosystem. This time, our business processes are cloud-native services. All this is facilitated by &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To integrate OptaPlanner in your cloud application is straightforward: you instruct OptaPlanner with the model, and the Solver configuration to use, and that’s all ;), OptaPlanner &lt;a href=&quot;https://www.optaplanner.org/compatibility/quarkus.html&quot;&gt;Quarkus&lt;/a&gt; or &lt;a href=&quot;https://www.optaplanner.org/compatibility/springBoot.html&quot;&gt;SpringBoot&lt;/a&gt; extensions will manage all the complexity of the Solver instantiation and management. This has represented a very important simplification for building the &lt;a href=&quot;https://docs.kogito.kie.org/latest/html_single/#con-kogito-task-assigning-service_kogito-configuring&quot;&gt;Task Assigning Service&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, former conclusions still apply, that is: by integrating OptaPlanner the responsibility of the task assignments and decision-making is transferred from humans to optimization algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/06/09/StaticWebsiteGenerationWithJavaMavenAndJBake.html</id>
            <title type="html">Static website generation with Java, Maven and JBake</title>
            <updated>2021-06-09T00:00:00+00:00</updated>
            <published>2021-06-09T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/06/09/StaticWebsiteGenerationWithJavaMavenAndJBake.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="community"></category>
            <summary type="html">
                 Did you notice? Last week, we migrated the entire www.optaplanner.org website (1399 files) to build with Java and Maven, instead of Ruby and Rake. On the face of it, nothing changed. But in the ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Did you notice?
Last week, we migrated the entire &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;www.optaplanner.org&lt;/a&gt; website (1399 files)
to build with Java and Maven, instead of Ruby and Rake.
On the face of it, nothing changed.
But in the sources, for our team of Java developers, it is a game changer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our Java team can now contribute to the website easily.
Within hours of completing the migration, there was already a commit of one of our developers
who would &lt;em&gt;rather not touch the previous source code with a ten-foot pole&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
We built this site.&lt;br&gt;
We built this site on Java and Maven.&lt;br&gt;
We built this site.&lt;br&gt;
We built this site on JBake and FreeMarker.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_a_static_website_generator&quot;&gt;Why a static website generator?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A static website generator transforms templates and content files into a static HTML/JS/CSS website.
This has many advantages over a Content Management System (CMS) for projects such as ours:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hosting&lt;/strong&gt; is cheap. &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt; even hosts static websites for free.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The source files go into Git for &lt;strong&gt;backup&lt;/strong&gt; and &lt;strong&gt;history&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The source files are in &lt;strong&gt;plain text&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Changes come in as a Pull Request for proper &lt;strong&gt;review&lt;/strong&gt; and CI validation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sources are open in our IDEs, which encourages refactoring them alongside the code.
This results in &lt;strong&gt;less stale&lt;/strong&gt; content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For many years, Awestruct has served us well.
But due to lack of activity, it was time to upgrade.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_jbake&quot;&gt;Why JBake?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because we&amp;#8217;re Java programmers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several good static website generators out there, such as Jekyll (Ruby) and Hugo (Go).
We choose &lt;a href=&quot;https://jbake.org/&quot;&gt;JBake&lt;/a&gt; (Java), because:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Our website now &lt;strong&gt;builds with Maven&lt;/strong&gt; (&lt;code&gt;mvn generate-resources&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;No need to install anything. Not even JBake.&lt;/em&gt;
Everyone builds with the same version of JBake, as declared in the &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And it&amp;#8217;s fast: even a &lt;code&gt;mvn clean&lt;/code&gt; build of 150 output pages only takes 20 seconds on my machine.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s all &lt;strong&gt;Java underneath&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writing conditional expressions is straightforward.
The APIs (&lt;code&gt;String.substring()&lt;/code&gt;, &amp;#8230;&amp;#8203;) are familiar.
Date formatting (&lt;code&gt;d MMMM yyyy&lt;/code&gt;) and regular expressions behave as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And most importantly, error messages are clear.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For 8 years, I wrote the website with Awestruct (Ruby).
But I never took the time to decently learn Ruby, so every change entailed hours of trial and error.
I couldn&amp;#8217;t just read the error message and fix it.
This isn&amp;#8217;t Ruby&amp;#8217;s fault. It was because I never took a few days to actually learn Ruby.
With JBake, I fix errors in a fraction of time: no more trial and error.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_jbake&quot;&gt;What is JBake?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JBake is a static website generator with many options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build with Maven or Gradle.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We choose &lt;a href=&quot;https://maven.apache.org/&quot;&gt;Maven&lt;/a&gt;, because all our repos build with Maven
(although two &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts&quot;&gt;OptaPlanner Quickstarts&lt;/a&gt; also build with Gradle because OptaPlanner supports Gradle too).&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write content in Asciidoc, Markdown or HTML.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We choose &lt;a href=&quot;https://asciidoc.org/&quot;&gt;Asciidoc&lt;/a&gt;
because it&amp;#8217;s &lt;a href=&quot;https://docs.asciidoctor.org/asciidoc/latest/asciidoc-vs-markdown/&quot;&gt;richer and more reliable&lt;/a&gt; than Markdown.
Also, all our documentation is written in Asciidoc.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create templates with FreeMarker, Thymeleaf or Groovy.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We choose &lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;FreeMarker&lt;/a&gt;
because it&amp;#8217;s a powerful, battle-tested templating engine.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tips_and_tricks&quot;&gt;Tips and tricks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are common tasks to build an advanced static website
and how to implement each task in JBake-FreeMarker.
You might even call these &lt;em&gt;JBake Design Patterns&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_use_a_macro_to_render_shared_content&quot;&gt;Use a macro to render shared content&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Almost all our templates show the same &lt;em&gt;Latest releases&lt;/em&gt; panel:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/06/09/staticWebsiteMacroLatestReleases.png&quot; alt=&quot;Latest releases screenshot&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A FreeMarker template is perfect to avoid repeating yourself (DRY):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;code&gt;templates/macros.ftl&lt;/code&gt; with a macro that outputs the HTML:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;&amp;lt;#macro latestReleases&amp;gt;
    &amp;lt;div class=&quot;panel panel-default&quot;&amp;gt;
        &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;Latest release&amp;lt;/div&amp;gt;
        ...
    &amp;lt;/div&amp;gt;
&amp;lt;/#macro&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then use it in the &lt;code&gt;*.ftl&lt;/code&gt; templates:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;&amp;lt;#import &quot;macros.ftl&quot; as macros&amp;gt;
...
&amp;lt;div class=&quot;row&quot;&amp;gt;
    &amp;lt;div class=&quot;col-md-9&quot;&amp;gt;
        ...
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;col-md-3&quot;&amp;gt;
        &amp;lt;@macros.latestReleases/&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_use_data_files_to_add_videos_events_or_other_volatile_data&quot;&gt;Use data files to add videos, events or other volatile data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some data changes too often to maintain in a content or template file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/06/09/staticWebsiteDataVideos.png&quot; alt=&quot;Videos screenshot&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A data file, for example a simple &lt;code&gt;*.yml&lt;/code&gt; file, works well to hold such volatile data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;code&gt;data/videos.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;- youtubeId: blK7gxqu2B0
  title: &quot;Unit testing constraints&quot;
  ...

- youtubeId: gIaHtATz6n8
  title: &quot;Maintenance scheduling&quot;
  ...

- youtubeId: LTkoaBk-P6U
  title: &quot;Vaccination appointment scheduling&quot;
  ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then use it in &lt;code&gt;ftl&lt;/code&gt; templates:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;&amp;lt;#assign videos = data.get(&apos;videos.yml&apos;).data&amp;gt;

&amp;lt;div class=&quot;panel panel-default&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;Latest videos&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;#list videos[0..6] as video&amp;gt;
                &amp;lt;li&amp;gt;
                    &amp;lt;a href=&quot;https://youtu.be/${video.youtubeId}&quot;&amp;gt;${video.title}&amp;lt;/a&amp;gt;
                &amp;lt;/li&amp;gt;
            &amp;lt;/#list&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_layout_inheritance&quot;&gt;Layout inheritance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All HTML pages typically share the same HTML head (metadata), header (navigation) and footer.
These fit well into a &lt;code&gt;base.ftl&lt;/code&gt; layout, extended by all other templates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/06/09/staticWebsiteTemplateHierarchy.png&quot; alt=&quot;Template hierarchy&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though most content uses the &lt;code&gt;normalBase.ftl&lt;/code&gt;,
there&amp;#8217;s separate &lt;code&gt;useCaseBase.ftl&lt;/code&gt; template for all the use case pages,
such as the &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/vehicleRoutingProblem.html&quot;&gt;Vehicle Routing Problem (VRP)&lt;/a&gt;,
&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/maintenanceScheduling.html&quot;&gt;Maintenance Scheduling&lt;/a&gt;
and &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/employeeRostering.html&quot;&gt;Shift Rostering&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use a macro with the &lt;code&gt;&amp;lt;#nested&amp;gt;&lt;/code&gt; directive to build layout inheritance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;code&gt;templates/base.ftl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;&amp;lt;#macro layout&amp;gt;
    &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
          ...
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
            &amp;lt;div&amp;gt;
                ... &amp;lt;#-- header --&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;#nested&amp;gt;
            &amp;lt;div&amp;gt;
              ... &amp;lt;#-- footer --&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&amp;lt;/#macro&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extend it in &lt;code&gt;templates/useCaseBase.ftl&lt;/code&gt; and introduce the custom attribute &lt;code&gt;related_tag&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;&amp;lt;#import &quot;base.ftl&quot; as parent&amp;gt;

&amp;lt;@layout&amp;gt;${content.body}&amp;lt;/@layout&amp;gt;

&amp;lt;#macro layout&amp;gt;
    &amp;lt;@parent.layout&amp;gt;
        &amp;lt;h1&amp;gt;${content.title}&amp;lt;/h1&amp;gt;
        &amp;lt;#nested&amp;gt;
        &amp;lt;h2&amp;gt;Related videos&amp;lt;/h2&amp;gt;
        &amp;lt;#assign videos = data.get(&apos;videos.yml&apos;).data&amp;gt;
        &amp;lt;#assign relatedVideos = videos?filter(video -&amp;gt; video.tags.contains(content.related_tag))&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;#list relatedVideos as video&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://youtu.be/${video.youtubeId}&quot;&amp;gt;${video.title}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/#list&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/@parent.layout&amp;gt;
&amp;lt;/#macro&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the use case page &lt;code&gt;content/vehicleRoutingProblem.adoc&lt;/code&gt; that uses that template
and sets that &lt;code&gt;related_tag&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= Vehicle Routing Problem
:jbake-type: useCaseBase
:jbake-related_tag: vehicle routing

The Vehicle Routing Problem (VRP) optimizes the routes of delivery trucks,
cargo lorries, public transportation (buses, taxis and airplanes)
or technicians on the road, by improving the order of the visits.
This routing optimization heavily reduces driving time and fuel consumption compared to manual planning:

...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started&quot;&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try it yourself. To build the &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;www.optaplanner.org&lt;/a&gt; website, run these commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell hljs&quot; data-lang=&quot;shell&quot;&gt;$ git clone https://github.com/kiegroup/optaplanner-website.git
...
$ cd optaplanner-website
$ mvn clean generate-resources
...
$ firefox target/website/index.html&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or &lt;a href=&quot;https://github.com/kiegroup/optaplanner-website&quot;&gt;take a look at the source code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/05/25/WritingFastConstraintStreamsSecretRecipe.html</id>
            <title type="html">Writing fast constraints with OptaPlanner: the secret recipe</title>
            <updated>2021-05-25T00:00:00+00:00</updated>
            <published>2021-05-25T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/05/25/WritingFastConstraintStreamsSecretRecipe.html" rel="alternate" type="text/html" />
            <author>
                <name>triceo</name>
            </author>
                    <category term="constraint"></category>
                    <category term="insight"></category>
                    <category term="performance"></category>
            <summary type="html">
                 Do you want OptaPlanner to run faster? Do you want to increase your score calculation speed, reaching great solutions sooner? Let me show you how to optimize your Constraint Streams constraints ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do you want OptaPlanner to run faster?
Do you want to increase your score calculation speed, reaching great solutions sooner?
Let me show you how to optimize your
&lt;a href=&quot;https://docs.optaplanner.org/latest/optaplanner-docs/html_single/index.html#constraintStreams&quot;&gt;Constraint Streams&lt;/a&gt;
constraints for performance and scalability.
Turns out you only need to remember one advice:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_do_less&quot;&gt;Do less&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key to well-performing constraints is limiting the amount of data that flows through your Constraint Streams,
which starts with
&lt;a href=&quot;https://docs.optaplanner.org/latest/optaplanner-docs/html_single/index.html#constraintStreamsJoin&quot;&gt;joins&lt;/a&gt;.
Consider a school timetabling problem, where a teacher must not have two overlapping lessons.
This is how the lesson could look in Java:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;    @PlanningEntity
    class Lesson {

        ...

        Teacher getTeacher() { ... }

        boolean overlaps(Lesson anotherLesson) { ... }

        boolean isCancelled() { ... }

        ...

    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest possible Constraint Stream we could write to penalize all overlapping lessons would then look like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;    constraintFactory.from(Lesson.class)
        .join(Lesson.class)
        .filter((leftLesson, rightLesson) -&amp;gt;
            !leftLesson.isCancelled()
	        &amp;amp;&amp;amp; !rightLesson.isCancelled()
            &amp;amp;&amp;amp; leftLesson.getTeacher()
                .equals(rightLesson.getTeacher())
            &amp;amp;&amp;amp; leftLesson.overlaps(rightLesson))
        .penalize(&quot;Teacher lesson overlap&quot;, HardSoftScore.ONE_HARD)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What this Constraint Stream does is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It creates all possible pairs of Lessons from the planning solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then it &lt;a href=&quot;https://docs.optaplanner.org/latest/optaplanner-docs/html_single/index.html#constraintStreamsFilter&quot;&gt;filters out&lt;/a&gt; all the lessons that are cancelled, where the teachers do not match, or which do not overlap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It &lt;a href=&quot;https://docs.optaplanner.org/latest/optaplanner-docs/html_single/index.html#constraintStreamsPenaltiesRewards&quot;&gt;penalizes&lt;/a&gt; all the remaining lesson pairs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do you see the problem here?
The join creates a cross product between lessons,
producing a match (also called a tuple) for every possible combination of two lessons,
even though we know that many of these matches will not be penalized.
This shows the problem in numbers:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Fast growth of cross product&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Number of lessons&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Number of possible pairs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10 000&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1 000&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1 000 000&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to process a thousand lessons, our constraint first creates a cross product of 1 million pairs,
only to throw away pretty much all of them before penalizing!
If we can reduce the size of the cross product by half, only half of the time will be spent processing it.
This is where the original advice comes into play: do less, by avoiding unrestricted cross product.
Here’s how.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_filter_before_joining&quot;&gt;Filter before joining&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see from the first example, cancelled lessons are eventually filtered out after the join.
Let’s see if we can remove them from the cross product instead.
For the first lesson in the join (also called “left”), this is straightforward;
we simply bring the cancellation check before the join like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;    constraintFactory.from(Lesson.class)
        .filter(lesson -&amp;gt; !lesson.isCancelled())
        .join(Lesson.class)
        .filter((leftLesson, rightLesson) -&amp;gt;
            !rightLesson.isCancelled()
            &amp;amp;&amp;amp; leftLesson.getTeacher() == rightLesson.getTeacher()
            &amp;amp;&amp;amp; leftLesson.overlaps(rightLesson))
        .penalize(&quot;Teacher lesson overlap&quot;, HardSoftScore.ONE_HARD)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cancelled lessons are no longer coming in from the left, which reduces the cross product.
However, some cancelled lessons are still coming in from the right through the join.
Here, we will use a little trick and join not with a Lesson class, but with a filtered nested Constraint Stream instead:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;    constraintFactory.from(Lesson.class)
        .filter(lesson -&amp;gt; !lesson.isCancelled())
        .join(
            constraintFactory.from(Lesson.class)
                .filter(lesson -&amp;gt; !lesson.isCancelled()))
        .filter((leftLesson, rightLesson) -&amp;gt;
            leftLesson.getTeacher() == rightLesson.getTeacher()
            &amp;amp;&amp;amp; leftLesson.overlaps(rightLesson))
        .penalize(&quot;Teacher lesson overlap&quot;, HardSoftScore.ONE_HARD)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, we’ve created a new Constraint Stream from Lesson, filtering before it entered our join.
We have now applied the same improvement on both the left and right sides of the join,
making sure it only creates a cross product of lessons which we care about.
But we can still do better!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_prefer_joiners_to_filters&quot;&gt;Prefer Joiners to filters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Filters are just a simple check if a tuple matches a predicate.
If it does, it is sent downstream, otherwise the tuple is removed from the Constraint Stream.
Each tuple needs to go through this check, and that means every pair of lessons will be evaluated.
When a Lesson changes, all pairs with that Lesson will be re-evaluated, but not anymore:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;    constraintFactory.from(Lesson.class)
        .filter(lesson -&amp;gt; !lesson.isCancelled())
        .join(
            constraintFactory.from(Lesson.class)
                .filter(lesson -&amp;gt; !lesson.isCancelled()),
	        Joiners.equal(Lesson::getTeacher))
        .filter((leftLesson, rightLesson) -&amp;gt;
			leftLesson.overlaps(rightLesson))
        .penalize(&quot;Teacher lesson overlap&quot;, HardSoftScore.ONE_HARD)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the Teacher equality check moved from the final filter to something called a Joiner.
We are still saying the same thing - a Lesson pair will only be sent downstream if the Lessons share the same Teacher.
Unlike the filter, this brings the performance benefit of indexing.
Now when a Lesson changes, only the pairs with the matching Teacher will be re-evaluated.
So even though the cross-product remains the same, we are doing much less work processing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final filter now only performs one operation on the final cross product,
and the Lesson pairs that get this far are already trimmed down in the most efficient way possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_remove_more_earlier&quot;&gt;Remove more, earlier&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some cases, you may have an option to pick the order of your Joiners.
In these situations, you should put first the Joiner that will remove more tuples than the others.
This will reduce the size of your cross products faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider a new situation, where lessons also have rooms in which they happen.
Although there are possibly dozens of teachers, there are only three rooms.
Therefore the join should look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;    constraintFactory.from(Lesson.class)
        .join(Lesson.class,
            Joiners.equal(Lesson::getTeacher),
            Joiners.equal(Lesson::getRoom))
    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This way, we first create “buckets” for each of the many teachers,
and these buckets will only contain a relatively small number of lessons per room.
If we did it the other way around, there would be a small amount of large buckets,
leading to much more iteration every time a lesson changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, it is generally recommended putting Joiners based on enum fields or boolean fields last.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key to efficient constraints is the reduction of cross product.
There are three main ways of reducing cross product in Constraint Streams:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Filtering before joining.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preferring Joiners earlier to filtering later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applying the more restrictive Joiners first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are other optimization techniques as well, and we will discuss some of them in the future,
but none of them will give as big a benefit as reducing the size of cross products.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/05/06/ThePathToOptaPlannerEnlightenmentStartsInTheLog.html</id>
            <title type="html">The path to OptaPlanner enlightenment starts in the logs</title>
            <updated>2021-05-06T00:00:00+00:00</updated>
            <published>2021-05-06T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/05/06/ThePathToOptaPlannerEnlightenmentStartsInTheLog.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="algorithm"></category>
                    <category term="insight"></category>
                    <category term="production"></category>
            <summary type="html">
                 Do you want to understand what OptaPlanner is doing while it is solving? Which decisions it makes? When? And why? Do you want to open the box and take a look inside? If so, keep reading. The Age ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do you want to understand what OptaPlanner is doing while it is solving?
Which decisions it makes? When? And why?
Do you want to open the box and take a look inside?
If so, keep reading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;The Age of Enlightenment centered on the use of reason and the evidence of the senses.
Similarly, OptaPlanner enlightenment starts with the use of reason and the evidence in the logs.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OK. That&amp;#8217;s enough philosophy for this article&amp;#8230;&amp;#8203; It&amp;#8217;s time to open the box.
Take a look at the log for &lt;a href=&quot;https://youtu.be/7IuOA9n6kh0&quot;&gt;the school timetabling AI quickstart&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;12:18:04 INFO Solving started: time spent (196), best score (-38init/0hard/0soft), environment mode (REPRODUCIBLE), move thread count (NONE), random (JDK with seed 0).
12:18:04 INFO Construction Heuristic phase (0) ended: time spent (330), best score (0hard/-11soft), score calculation speed (4358/sec), step total (19).
12:18:34 INFO Local Search phase (1) ended: time spent (30000), best score (0hard/10soft), score calculation speed (12786/sec), step total (26654).
12:18:34 INFO Solving ended: time spent (30000), best score (0hard/10soft), score calculation speed (12663/sec), phase total (2), environment mode (REPRODUCIBLE), move thread count (NONE).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a lot of information, even on the &lt;code&gt;INFO&lt;/code&gt; level.
Let&amp;#8217;s investigate each nugget of information in there, one by one:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_when_did_the_solver_run&quot;&gt;When did the solver run?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The log shows when the solver started and when it ended:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;12:18:04 INFO Solving started ...
...
12:18:34 INFO Solving ended ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s useful in complex applications with other log lines intertwined.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_the_solver_doing&quot;&gt;What is the solver doing?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also displays what the solver did while solving:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;12:18:04 INFO Solving started ...
12:18:04 INFO Construction Heuristic phase (0) ended ...
12:18:34 INFO Local Search phase (1) ended ...
12:18:34 INFO Solving ended ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It ran two algorithm phases sequentially:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Phase 0: a &lt;em&gt;Construction Heuristic&lt;/em&gt; to provide an initial solution for the problem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Phase 1: a &lt;em&gt;Local Search&lt;/em&gt; to improve the solution further&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s an illustration of those phases on the N-Queens and the Cloud Balancing examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/05/06/generalPhaseSequence.png&quot; alt=&quot;General phase sequence&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the Local Search log line is missing (after the solver ends),
the Construction Heuristic did not have enough time to initialize the entire solution,
leaving no time for the Local Search algorithm.
That returns an incomplete or infeasible solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_time_spent&quot;&gt;Time spent&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The log also exhibits how long each of those phases took, in milliseconds, relevant to the start of the solver:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;12:18:04 INFO Solving started time spent (196) ...
12:18:04 INFO Construction Heuristic ended ... time spent (330) ...
12:18:34 INFO Local Search ended ... time spent (30000) ...
12:18:34 INFO Solving ended time spent (30000), ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Solver initialization took &lt;code&gt;196&lt;/code&gt; milliseconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Construction Heuristic took &lt;code&gt;330 - 196&lt;/code&gt; = &lt;code&gt;134&lt;/code&gt; milliseconds.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For big datasets, if the CH takes more than one minute,
it&amp;#8217;s worth investigating why, even if the solver runs for hours.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Local Search took &lt;code&gt;30000 - 330&lt;/code&gt; = &lt;code&gt;29670&lt;/code&gt; milliseconds.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LS gets the lion&amp;#8217;s share of the time, as it should be.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_score_quality&quot;&gt;Score quality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The log also reveals the solution quality after each algorithm:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;INFO Solving started ... best score (-38init/0hard/0soft) ...
INFO Construction Heuristic ended ... best score (0hard/-11soft) ...
INFO Local Search ended ... best score (0hard/10soft) ...
INFO Solving ended ... best score (0hard/10soft) ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The starting score &lt;code&gt;-38init/0hard/0soft&lt;/code&gt; indicates there are 38 unassigned planning variables.
That&amp;#8217;s because there are 19 lessons, each with 2 planning variables to initialize.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Construction Heuristic ends with a solution of score &lt;code&gt;0hard/-11soft&lt;/code&gt;, which is already feasible (no hard constraints broken). That&amp;#8217;s not always the case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Local Search improves the score further to score &lt;code&gt;0hard/10soft&lt;/code&gt;. That&amp;#8217;s a difference of &lt;code&gt;+21soft&lt;/code&gt; in 29 seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_performance&quot;&gt;Performance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s also performance information to discover in the log.
First ensure it&amp;#8217;s an apples-to-apples comparison:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;12:18:04 INFO Solving started ... environment mode (REPRODUCIBLE), move thread count (NONE) ...
...
12:18:34 INFO Solving ended ... environment mode (REPRODUCIBLE), move thread count (NONE).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the environment mode is any &lt;code&gt;ASSERT&lt;/code&gt; mode, performance is irrelevant,
because the extra assertions are very expensive performance wise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The move thread count indicates how many extra CPU cores it can consume.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NONE&lt;/code&gt; means all move calculations happen inside the solver&amp;#8217;s thread, so only 1 CPU is exploited.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both of these affect the &lt;em&gt;score calculation speed&lt;/em&gt;,
which shows how many moves were evaluated, normalized &lt;em&gt;per second&lt;/em&gt;,
for the solver entirely, but also each phase separately:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;12:18:04 INFO Solving started ...
12:18:04 INFO Construction Heuristic ended ... score calculation speed (4358/sec) ...
12:18:34 INFO Local Search ... score calculation speed (12786/sec) ...
12:18:34 INFO Solving ended ... score calculation speed (12663/sec) ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Construction Heuristic evaluated over 4000 moves per second.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;That&amp;#8217;s actually pretty low, but it only ran for 134 milliseconds, so the overhead weighs in too much,
lowering the number significantly. It should be run with a bigger dataset instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normally, the score calculation speed of the Construction Heuristic is higher than that of the Local Search,
because it&amp;#8217;s faster to calculate the score when half of the entities aren&amp;#8217;t initialized yet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Local Search evaluated over 12000 moves per second.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;That&amp;#8217;s good. The LS score calculation speed should always be above 10 000 per second, even for big datasets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do note that it ran for 29 seconds and a JVM can take a minute to warm up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Keep an eye on the score calculation when adding/editing constraints&lt;/strong&gt;,
running the solver for same amount of time (typically 1 minute), to discover performance bottlenecks early.
For more accurate performance investigations, use &lt;code&gt;optaplanner-benchmark&lt;/code&gt; which supports warming up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_steps&quot;&gt;Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In essence, both the Construction Heuristic phase and Local Search phase run a double loop:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;   for (Step step : steps) { // Outer loop
       for (Move move : moves) { // Inner loop
           // Evaluate move
       }
       // Take step
   }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The outer, step loop executes the best move found by the inner, move loop.
Of course, this is a gross simplification:
there are dozens of orthogonal AI subsystems on top of it.
It&amp;#8217;s only the tip of the iceberg. But it&amp;#8217;s an honest simplification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;INFO&lt;/code&gt; log shows how many of these outer loop iterations both phases did:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;...
12:18:04 INFO Construction Heuristic ended ... step total (19).
12:18:34 INFO Local Search ended ... step total (26654).
...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Construction Heuristic did 19 steps.
That&amp;#8217;s because there are 19 lessons in the dataset.
Each step assigns one lesson.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Local Search did over 26 000 steps.
It continues iterating until the termination condition is hit.
Each step modifies (often improves) the current solution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Turn on &lt;code&gt;DEBUG&lt;/code&gt; logging to get a log line per step too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;INFO  Solving started: time spent (619), best score (-38init/0hard/0soft), environment mode (REPRODUCIBLE), move thread count (NONE), random (JDK with seed 0).
DEBUG     CH step (0), time spent (650), score (-36init/0hard/0soft), selected move count (30), picked move ([Biology(18) {null -&amp;gt; Room A}, Biology(18) {null -&amp;gt; MONDAY 09:30}]).
DEBUG     CH step (1), time spent (661), score (-34init/0hard/0soft), selected move count (30), picked move ([Chemistry(28) {null -&amp;gt; Room A}, Chemistry(28) {null -&amp;gt; MONDAY 10:30}]).
DEBUG     CH step (2), time spent (672), score (-32init/0hard/0soft), selected move count (30), picked move ([Chemistry(17) {null -&amp;gt; Room A}, Chemistry(17) {null -&amp;gt; MONDAY 13:30}]).
...
DEBUG     CH step (17), time spent (741), score (-2init/0hard/-10soft), selected move count (30), picked move ([Spanish(22) {null -&amp;gt; Room B}, Spanish(22) {null -&amp;gt; TUESDAY 10:30}]).
DEBUG     CH step (18), time spent (744), score (0hard/-11soft), selected move count (30), picked move ([Spanish(23) {null -&amp;gt; Room B}, Spanish(23) {null -&amp;gt; TUESDAY 14:30}]).
INFO  Construction Heuristic phase (0) ended: time spent (768), best score (0hard/-11soft), score calculation speed (3910/sec), step total (19).
DEBUG     LS step (0), time spent (790), score (0hard/-5soft), new best score (0hard/-5soft), accepted/selected move count (1/1), picked move (Physics(27) {Room B, MONDAY 08:30} &amp;lt;-&amp;gt; Math(14) {Room A, MONDAY 08:30}).
DEBUG     LS step (1), time spent (791), score (0hard/-7soft),     best score (0hard/-5soft), accepted/selected move count (1/2), picked move (Spanish(33) {Room B -&amp;gt; Room C}).
...
DEBUG     LS step (19071), time spent (29996), score (0hard/7soft),     best score (0hard/10soft), accepted/selected move count (1/25), picked move (Geography(30) {Room C -&amp;gt; Room B}).
DEBUG     LS step (19072), time spent (30000), score (0hard/5soft),     best score (0hard/10soft), accepted/selected move count (0/25), picked move (English(20) {Room A, MONDAY 10:30} &amp;lt;-&amp;gt; Math(14) {Room A, MONDAY 14:30}).
INFO  Local Search phase (1) ended: time spent (30000), best score (0hard/10soft), score calculation speed (7927/sec), step total (19073).
INFO  Solving ended: time spent (30000), best score (0hard/10soft), score calculation speed (7858/sec), phase total (2), environment mode (REPRODUCIBLE), move thread count (NONE).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, this is a lot of information to digest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;DEBUG&lt;/code&gt; lines display when a Local Search step improves the best solution:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;INFO  Construction Heuristic ... best score (0hard/-11soft) ...
DEBUG     LS step (0) ... score (0hard/-5soft), new best score (0hard/-5soft) ...
DEBUG     LS step (1) ... score (0hard/-7soft),     best score (0hard/-5soft) ...
...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LS step 0 improved the best solution from &lt;code&gt;-11soft&lt;/code&gt; to &lt;code&gt;-5soft&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LS step 1 didn&amp;#8217;t improve the best solution of &lt;code&gt;-5soft&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It actually accepted a worse solution of &lt;code&gt;-7soft&lt;/code&gt;, which is mechanism to escape local optima,
to improve the best solutions in later steps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;DEBUG&lt;/code&gt; log even shows the winning move:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;DEBUG     LS step (0) ... picked move (Physics(27) {Room B, MONDAY 08:30} &amp;lt;-&amp;gt; Math(14) {Room A, MONDAY 08:30}).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This move swapped the &lt;code&gt;Physics&lt;/code&gt; lesson with the &lt;code&gt;Math&lt;/code&gt; lesson.
The &lt;code&gt;toString()&lt;/code&gt; method of your domain classes should return a short string (typically a name and/or ID)
to keep the logs readable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_moves&quot;&gt;Moves&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;DEBUG&lt;/code&gt; log reveals the number of moves selected per step,
which is the number of inner loop iterations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;...
DEBUG     CH step (17) ... selected move count (30) ...
DEBUG     CH step (18) ... selected move count (30) ...
INFO  Construction Heuristic ended ...
DEBUG     LS step (0) ... accepted/selected move count (1/1) ...
DEBUG     LS step (1) ... accepted/selected move count (1/2) ...
...
INFO  Local Search phase (1) ended ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Turn on &lt;code&gt;TRACE&lt;/code&gt; logging to get a log line per move too,
which exposes the score of each move evaluation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;INFO  Construction Heuristic ... time spent (395), best score (0hard/-11soft) ...
TRACE         Move index (0), score (0hard/-5soft) ...
DEBUG     LS step (0) ... score (0hard/-5soft), new best score (0hard/-5soft) ...
TRACE         Move index (0), score (-2hard/-6soft) ...
TRACE         Move index (1), score (0hard/-7soft) ...
DEBUG     LS step (1) ... score (0hard/-7soft),     best score (0hard/-5soft) ...
TRACE         Move index (0), score (-3hard/-7soft) ...
TRACE         Move index (1) not doable, ignoring move ...
TRACE         Move index (2), score (-2hard/-9soft) ...
TRACE         Move index (3), score (-2hard/-6soft) ...
TRACE         Move index (4), score (-2hard/-7soft) ...
TRACE         Move index (5), score (-1hard/-8soft) ...
TRACE         Move index (6), score (0hard/-4soft) ...
DEBUG     LS step (2) ... score (0hard/-4soft), new best score (0hard/-4soft) ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, each &lt;code&gt;TRACE&lt;/code&gt; line also shows the selected move:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;TRACE         Move index (0) ... move (Chemistry(28) {Room C -&amp;gt; Room A}).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This move changed the room of the &lt;code&gt;Chemistry&lt;/code&gt; lesson.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_get_started&quot;&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get started on your OptaPlanner enlightenment path today!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Turn on logging in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Plain Java&lt;/strong&gt;: Add a dependency on &lt;code&gt;logback-classic&lt;/code&gt; and the &lt;code&gt;logback.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;logger name=&quot;org.optaplanner&quot; level=&quot;debug&quot;/&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or instead, add a dependency on an &lt;code&gt;slf4j&lt;/code&gt; bridge to your favorite logging system.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io&quot;&gt;&lt;strong&gt;Quarkus&lt;/strong&gt;&lt;/a&gt;: Add this line in &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;quarkus.log.category.&quot;org.optaplanner&quot;.level=DEBUG&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;: Add this line in &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;logging.level.org.optaplanner=DEBUG&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The log is your friend! It tells you what &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; is doing.
Keep an eye on it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/03/25/BatchSolvingWithAmq.html</id>
            <title type="html">Batch solving a ActiveMQ queue that contains planning problem data sets in a scalable way</title>
            <updated>2021-03-25T00:00:00+00:00</updated>
            <published>2021-03-25T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/03/25/BatchSolvingWithAmq.html" rel="alternate" type="text/html" />
            <author>
                <name>rsynek</name>
            </author>
                    <category term="activemq"></category>
                    <category term="quarkus"></category>
                    <category term="integration"></category>
            <summary type="html">
                 If I want to solve many data sets of a planning problem every night, what architecture can easily scale out horizontally without loss of data? In this article, we will take a look at how to use a ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I want to solve many data sets of a planning problem every night, what architecture can easily scale out horizontally without loss of data?
In this article, we will take a look at how to use a transactional ActiveMQ queue in front of a set of stateless &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; pods.
Client applications can submit data sets to solve and listen to the resulting solutions without worrying about which OptaPlanner pod does the actual solving.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source code is available in the &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts/tree/stable/technology/java-activemq-quarkus&quot;&gt;activemq-quarkus-school-timetabling quickstart&lt;/a&gt;, along with the other &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts&quot;&gt;optaplanner-quickstarts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_batch_solving&quot;&gt;Batch Solving&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Very often, there are multiple instances of the same planning problem to solve.
Either these come from splitting an enormous input problem into smaller pieces, or just from the need to solve completely unrelated data sets.
Imagine independently scheduling many vehicle routes for several regions, or optimizing school timetables for numerous schools.
To take advantage of time, you run OptaPlanner every night to prepare for the next day in the business or even longer for the next semester.
On the other hand, during the day or in the middle of the semester, there is nothing to optimize and so there should be no OptaPlanner running.
In other words, these cases call for batch solving.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_school_timetabling&quot;&gt;School Timetabling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The quickstart focuses on the school timetabling problem, which is described in depth in the &lt;a href=&quot;https://quarkus.io/guides/optaplanner&quot;&gt;Quarkus guide&lt;/a&gt;.
Let’s just very briefly revisit the problem domain and its constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the school timetabling problem, the goal is to assign each lesson to a room and a timeslot.
To use the OptaPlanner vocabulary, the &lt;code&gt;Lesson&lt;/code&gt; is a planning entity and its references to the &lt;code&gt;Room&lt;/code&gt; and the &lt;code&gt;Timeslot&lt;/code&gt; are planning variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/03/25/schoolTimetablingClassDiagram.png&quot; alt=&quot;School Timetabling class diagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;TimeTableConstraintProvider&lt;/code&gt; defines the following constraints on how the lessons should be assigned to timeslots and rooms:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A room can have at most one lesson at the same time (hard).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A teacher can teach at most one lesson at the same time (hard).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A student can attend at most one lesson at the same time (hard).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A teacher prefers to teach in a single room (soft).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A teacher prefers to teach sequential lessons and dislikes gaps between lessons (soft).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A student dislikes sequential lessons on the same subject (soft).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_quickstart_structure&quot;&gt;Quickstart structure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/03/25/activemqProjectStructure.png&quot; alt=&quot;Project structure&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The project consists of three modules:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;activemq-quarkus-school-timetabling-common&lt;/strong&gt; defines the problem domain, and the &lt;code&gt;SolverRequest&lt;/code&gt; and &lt;code&gt;SolverResponse&lt;/code&gt; classes for messaging.
The following two modules depend on this one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;activemq-quarkus-school-timetabling-client&lt;/strong&gt; is the Client Quarkus application that contains a UI, a REST endpoint and a demo data generator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;activemq-quarkus-school-timetabling-solver&lt;/strong&gt; is the Solver Server Quarkus application that solves school timetabling problem instances coming via a message queue &lt;code&gt;solver_request&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_messaging&quot;&gt;Messaging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/03/25/activemqSolvingArchitecture.png&quot; alt=&quot;Architecture&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Client application serializes an unsolved &lt;code&gt;TimeTable&lt;/code&gt; wrapped by the &lt;code&gt;SolverRequest&lt;/code&gt; class into a JSON and sends it to the &lt;code&gt;solver_request&lt;/code&gt; queue.
The Solver Server receives the request from this queue, deserializes it and solves the &lt;code&gt;TimeTable&lt;/code&gt; via OptaPlanner.
After the solving finishes, the Solver Server wraps the &lt;code&gt;TimeTable&lt;/code&gt; by the &lt;code&gt;SolverResponse&lt;/code&gt; class, serializes it to a JSON and sends it to the &lt;code&gt;solver_response&lt;/code&gt; queue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;No solver request message must be lost, even if the Solver Server crashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any error that occurs in the Solver Server must be propagated back to the Client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invalid solver request message is sent to a dead letter queue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_activemq_is_a_natural_fit&quot;&gt;ActiveMQ is a natural fit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ActiveMQ comes as a natural fit for this use case for multiple reasons.
First, it supports huge messages without extra configuration.
Second, solving may often take several hours before the Solver Server can send a response with a solution and finally approve the request message.
Last but not least, the ActiveMQ guarantees to deliver each message exactly once, provided the messages are persisted at the broker.
These properties let the Solver Server avoid keeping any state and just transform the input planning problems into solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For different use cases, for example, real-time planning, other technologies like Kafka may be a better fit, but for this use case, the ActiveMQ wins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_when_messaging_meets_optaplanner&quot;&gt;When messaging meets OptaPlanner&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The quickstart uses Smallrye Reactive Messaging to send and receive messages.
Let’s take a look at the &lt;code&gt;TimeTableMessagingHandler&lt;/code&gt; located in the Solver Server application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;    ...
    Solver&amp;lt;TimeTable&amp;gt; solver;

    @Inject
    ObjectMapper objectMapper; // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;

    @Inject
    @Channel(&quot;solver_response&quot;) // &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    Emitter&amp;lt;String&amp;gt; solverResponseEmitter;

    @Inject
    TimeTableMessagingHandler(SolverFactory&amp;lt;TimeTable&amp;gt; solverFactory) {
        solver = solverFactory.buildSolver(); // &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
    }

    @Incoming(&quot;solver_request&quot;) // &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
    public CompletionStage&amp;lt;Void&amp;gt; solve(Message&amp;lt;String&amp;gt; solverRequestMessage) { // &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
        return CompletableFuture.runAsync(() -&amp;gt; { // &lt;b class=&quot;conum&quot;&gt;(6)&lt;/b&gt;
            SolverRequest solverRequest;
            try {
                solverRequest = objectMapper.readValue(solverRequestMessage.getPayload(), SolverRequest.class); // &lt;b class=&quot;conum&quot;&gt;(7)&lt;/b&gt;
            } catch (Throwable throwable) {
                LOGGER.warn(&quot;Unable to deserialize solver request from JSON.&quot;, throwable);
                /* Usually a bad request, which should be immediately rejected.
                   No error response can be sent back as the problemId is unknown.
                   Such a NACKed message is redirected to the DLQ (Dead letter queue).
                   Catching the Throwable to make sure no unchecked exceptions are missed. */
                solverRequestMessage.nack(throwable);
                return;
            }

            TimeTable solution;
            try {
                solution = solver.solve(solverRequest.getTimeTable()); // &lt;b class=&quot;conum&quot;&gt;(8)&lt;/b&gt;
                replySuccess(solverRequestMessage, solverRequest.getProblemId(), solution);
            } catch (Throwable throwable) {
                replyFailure(solverRequestMessage, solverRequest.getProblemId(), throwable); // &lt;b class=&quot;conum&quot;&gt;(9)&lt;/b&gt;
            }
        });
    }
    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Inject &lt;code&gt;ObjectMapper&lt;/code&gt; to unmarshall the JSON message payload.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Emitter&lt;/code&gt; sends response messages to the &lt;code&gt;solver_response&lt;/code&gt; channel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inject a &lt;code&gt;SolverFactory&lt;/code&gt; and build a &lt;code&gt;Solver&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;@Incoming&lt;/code&gt; annotation makes the method listen for incoming messages from the &lt;code&gt;solver_request&lt;/code&gt; channel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By accepting &lt;code&gt;Message&lt;/code&gt; as a parameter, you have full control over acknowledgement of the message.
The generic type of the &lt;code&gt;Message&lt;/code&gt; is &lt;code&gt;String&lt;/code&gt;, because the message contains the &lt;code&gt;SolverRequest&lt;/code&gt; serialized to a JSON String.
Finally, the return type &lt;code&gt;CompletionStage&amp;lt;Void&amp;gt;&lt;/code&gt; enables an asynchronous acknowledgement.
See &lt;a href=&quot;https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.8/model/model.html#consuming-messages&quot;&gt;Consuming Messages&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return a &lt;code&gt;CompletionStage&amp;lt;Void&amp;gt;&lt;/code&gt; to satisfy the method contract and avoid blocking the thread.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmarshall the JSON payload. If it&amp;#8217;s not possible, reject the message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solve the input timetabling problem and then send a reply (see the next figure).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In case any exception occurs, include information about the exception into the response.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example below shows how to reply and acknowledge the original request message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;private void replySuccess(Message&amp;lt;String&amp;gt; solverRequestMessage) {
    ...
    solverResponseEmitter.send(jsonResponse)
        .thenAccept(x -&amp;gt; solverRequestMessage.ack()); // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;thenAccept()&lt;/code&gt; defines what happens when the ActiveMQ broker acknowledges the response message sent via the &lt;code&gt;Emitter&lt;/code&gt;.
In this case, the request message is acknowledged.
This way, the request message is never lost even if the Solver Server dies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To understand how the channels correspond to messaging queues, see the &lt;code&gt;application.properties&lt;/code&gt; file located in &lt;code&gt;src/main/resources&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# Configure the ActiveMQ source
mp.messaging.incoming.solver_request.connector=smallrye-amqp # &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
mp.messaging.incoming.solver_request.durable=true # &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
mp.messaging.incoming.solver_request.failure-strategy=reject # &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;

# Configure the ActiveMQ sink
mp.messaging.outgoing.solver_response.connector=smallrye-amqp
mp.messaging.outgoing.solver_response.durable=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;smallrye-amqp&lt;/code&gt; connector for the &lt;code&gt;solver_request&lt;/code&gt; channel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To have the ActiveMQ broker persist messages, make the queue durable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a message is rejected, the broker redirects it to a dead letter queue and proceeds with the next message.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every property contains the channel name. By default, it matches the name of the queue at the ActiveMQ broker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_running_the_quickstart&quot;&gt;Running the quickstart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; install &lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;docker&lt;/a&gt; and &lt;a href=&quot;https://docs.docker.com/compose/install&quot;&gt;docker-compose&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;git clone &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts&quot; class=&quot;bare&quot;&gt;https://github.com/kiegroup/optaplanner-quickstarts&lt;/a&gt; &amp;amp;&amp;amp; cd optaplanner-quickstarts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git checkout development &amp;amp;&amp;amp; cd activemq-quarkus-school-timetabling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;./run.sh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt; in a browser and click the Solve button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/03/04/OptimizingCovid19VaccinationScheduling.html</id>
            <title type="html">Optimizing COVID-19 vaccination appointment scheduling</title>
            <updated>2021-03-04T00:00:00+00:00</updated>
            <published>2021-03-04T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/03/04/OptimizingCovid19VaccinationScheduling.html" rel="alternate" type="text/html" />
            <author>
                <name>pauljamesbrown</name>
            </author>
                    <category term="production"></category>
                    <category term="vaccination scheduling"></category>
            <summary type="html">
                 COVID-19 vaccination appointment scheduling has proven to be a world-wide challenge. People eligible for vaccinations haven’t been able to secure appointments despite repeated attempts. Those ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;COVID-19 vaccination appointment scheduling has proven to be a world-wide challenge. People eligible for vaccinations haven’t been able to secure appointments despite repeated attempts. Those scheduled for vaccinations sometimes arrive at a vaccination center only to learn that their appointment has been canceled. Others find that they share the same vaccination time window with hundreds of people and must wait in line for hours. However, this doesn’t have to be the case. You can use the OptaPlanner vaccination appointment scheduler quickstart to develop a schedule that is both efficient and fair. The vaccination appointment scheduler uses artificial intelligence (AI) to prioritize people and allocate time slots based on multiple constraints and priorities. It is part of the &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts&quot;&gt;OptaPlanner quickstart collection&lt;/a&gt;, available on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Watch the &lt;a href=&quot;https://www.youtube.com/watch?v=LTkoaBk-P6U&quot;&gt;OptaPlanner vaccination appointment scheduling&lt;/a&gt; video or read on to learn more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_benefits_of_a_system_automatically_assigns_appointment_scheduling_system&quot;&gt;The benefits of a system-automatically-assigns appointment scheduling system&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two main approaches to scheduling appointments. The system can either let a person choose an appointment slot (user selects) or the system assigns a slot and tells the person when and where to attend (system automatically assigns).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a quick comparison of the two approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_user_selects&quot;&gt;User selects&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach is similar to the approach used with concert ticket sites such as Ticketmaster&amp;trade;. It’s how most concert tickets are sold. People compete with each other for a fixed number of tickets or appointments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Characteristics of this approach:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Appointments are available on a first-come first-serve basis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A person chooses a preferred appointment time and location from a range of available appointments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Challenges with this approach:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First-come first-serve might not be fair.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System overloads can repeatedly shut out people with slower internet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When many people try to reserve the same appointment slot at the same time, all but one person fails to secure the appointment which results in a poor user experience. Some people might give up trying to reserve an appointment.
On the other hand, less desirable appointment slots might not be filled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It’s tricky to prioritize based on criteria such as priority, age, or second dose status.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The desired vaccine type (Pfizer&amp;trade;, Moderna&amp;trade;, AstraZeneca&amp;trade;) might not be available.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It could be argued that the user-selects method is not the most efficient method for vaccination scheduling. People can choose the closest vaccination center but that center might not have the greatest capacity. What&amp;#8217;s good for one person isn&amp;#8217;t always optimal for the population as a whole. There is no way for the system to direct a person to a vaccination center that meets the needs of the individual and is at the same time efficient for the entire population because of capacity. In addition, the system can easily be overloaded.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_system_automatically_assigns&quot;&gt;System automatically assigns&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this push-based approach, people provide their information to the system and the system assigns an appointment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Characteristics of this approach:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Appointment slots are allocated based on priority.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The system allocates the best appointment time and location based on preconfigured planning constraints.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Challenges with this approach:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The allocated time slot might not be convenient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People might be more likely to reschedule.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The system-automatically-assigns method is easier for people to use, is fairer, and is more efficient for vaccination appointment scheduling than the user-selects method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_second_dose_challenge&quot;&gt;The second dose challenge&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most COVID-19 vaccines require two doses. For optimal effectiveness, the second dose must be given within a specific time frame in relation to the first dose, using the same vaccine type. On top of that, different vaccines have different second-dose time frames. And within those time frames, there is a ready date (the first date that the second dose can be taken), an ideal date (the best date to take the second dose), and an end date (the last date that the second dose is considered to be effective). For example, the ideal date for the Pfizer second dose is 21 days after the first dose but the ideal date for the Moderna second dose is 28 days after the first dose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So let’s say that you start vaccinating people with the Moderna vaccine. After four weeks, you are still giving people the first dose, but now it’s time for people who already received their first dose to get their second dose. You have to decide whether to give an appointment to the person who needs the second dose or to give an appointment to someone for a first dose. That might seem like a no-brainer, but this scenario has potential complications. Let’s say that in the first week of vaccinations, you vaccinated people with a high priority but you also vaccinated other people as well because you found you had extra vaccines at the end of a day and you didn&amp;#8217;t want to waste them. Now, four weeks later, you must choose whether to give an appointment to a first-dose high-priority person or give it to the lower-priority person that needs second dose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One solution is to equally share appointments between people receiving first and second doses, but doing this might create a backlog of people needing a second dose. If you keep giving the first dose without prioritizing people that need the second dose, eventually the backlog of people that need the second dose will snowball. The second dose vaccination date will move very far away from the ideal date and might exceed the due date which will make the first vaccination much less effective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, prioritize second-dose appointments over first-dose appointments regardless of the first-dose person’s priority rating.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_solving_the_vaccination_appointment_scheduling_problem&quot;&gt;Solving the vaccination appointment scheduling problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OptaPlanner vaccination appointment scheduler uses the system-automatically-assigns method to solve the problem of vaccinating as many people as possible by using planning constraints to create a score for each person. The person’s score determines when they get an appointment. The higher the person’s score, the better chance they have of receiving an earlier appointment. Constraints are either hard, medium, or soft:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hard constraints cannot be broken. If any hard constraint is broken, the plan is unfeasible and cannot be executed:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Capacity: Do not over-book vaccine capacity at any time at any location.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vaccine max age: If a vaccine has a maximum age, do not administer it to people who at the time of the first dose vaccination are older than the vaccine maximum age. Ensure people are given a vaccine type appropriate for their age. For example, don’t assign a 75 year old person an appointment for a vaccine that has a maximum age restriction of 65 years.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Required vaccine type: Use the required vaccine type. For example, the second dose of a vaccine must be the same vaccine type as the first dose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ready date: Administer the vaccine on or after the specified date. For example, if a person receives a second dose, do not administer it before the recommended earliest possible vaccination date for the specific vaccine type (such as 26 days after the first dose).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due date: Administer the vaccine on or before the specified date. For example, if a person receives a second dose, administer it before the recommended vaccination final due date for the specific vaccine (such as three months after the first dose).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restrict maximum travel distance: Assign each person to one of a group of  vaccination centers nearest to them. This is typically one of three centers. This restriction is calculated by travel time, not distance, so a person that lives in an urban area usually has a lower maximum distance to travel than a rural person.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Medium constraints decide who doesn’t get an appointment when there’s not enough capacity to assign appointments to everyone. This is called overconstrained planning:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Schedule second dose vaccinations: Do not leave any second dose vaccination appointments unassigned unless the ideal date falls outside of the planning window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schedule people based on their priority rating: Each person has a priority rating. This is typically their age but it can be much higher if they are, for example, a healthcare worker. Leave only people with the lowest priority ratings unassigned. They will be picked up in the next run. This constraint is softer than the previous constraint because the second dose is always prioritized over priority rating.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Soft constraints should not be broken:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Preferred vaccination center: If a person has a preferred vaccination center, give them an appointment at that center.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distance: Minimize the distance that a person must travel to their assigned vaccination center.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ideal date: Administer the vaccine on or as close to the specified date as possible. For example, if a person receives a second dose, administer it on the ideal date for the specific vaccine (such as 28 days after the first dose). This constraint is softer than the distance constraint to avoid sending people half-way across the country just to be one day closer to their ideal date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Priority rating: Schedule people with a higher priority rating earlier in the planning window. This constraint is softer than the distance constraint to avoid sending people half-way across the country. This constraint is also softer than the ideal date constraint because the second dose is prioritized over priority rating.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hard constraints are weighted against other hard constraints. Soft constraints are weighted against other soft constraints. However, hard constraints always outweigh medium and soft constraints regardless of their respective weights.
Because you have more people than you have appointment slots, you need to make tough decisions. Second dose appointments are always assigned first to avoid creating a backlog that would overwhelm you later. After that, people are assigned based on their priority rating. Everyone starts with a priority rating that is their age. Doing this prioritizes older people over younger people. After that, people that are in specific priority groups receive a few hundred extra points. This  varies based on the priority of their group. For example, nurses might receive an extra 1000 points. This way, older nurses are prioritized over younger nurses and young nurses are prioritized over people who are not nurses. The following table illustrates this concept:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Priority rating table&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 28.5714%;&quot;&gt;
&lt;col style=&quot;width: 28.5714%;&quot;&gt;
&lt;col style=&quot;width: 42.8572%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Age&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Job&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Priority rating&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;60&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nurse&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1060&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;33&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nurse&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1033&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;71&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;retired&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;71&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;52&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;office worker&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;52&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_solver&quot;&gt;The solver&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the core of OptaPlanner is the solver,  the engine that takes the problem data set and overlays the planning constraints and configurations. The problem data set includes all of the information about the people, the vaccines, and the vaccination centers. The solver works through the various combinations of data and eventually determines an optimized appointment schedule with people assigned to vaccination appointments at a specific center.  The following illustration shows a schedule that the solver created:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/03/04/vaccinationSchedulingValueProposal.png&quot; alt=&quot;vaccinationSchedulingValueProposal&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_continuous_planning&quot;&gt;Continuous planning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continuous planning is the technique of managing one or more upcoming planning periods at the same time and repeating that process monthly, weekly, daily, hourly, or even more frequently. The planning window advances incrementally by a specified interval. The following illustration shows a two week planning window that is updated daily:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/03/04/vaccinationSchedulingContinuousPlanning.png&quot; alt=&quot;vaccinationSchedulingContinuousPlanning&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two week planning window is divided in half. The first week is in the published state and the second week is in the draft state.  People are assigned to appointments in both the published and draft parts of the planning window. However, only people in the published part of the planning window are notified of their appointments. The other appointments can still change easily in the next run. Doing this prevents the schedule from painting itself in a corner. For example, if a person who needs a second dose has a ready date of Monday and an ideal date of Wednesday, you don’t have to invite them for Monday if-and-only-if you can prove you can give them a draft appointment later in the week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can determine the size of the planning window but just be mindful of the size of the problem space. The problem space is all of the various components that go into creating the schedule. So, the more days you plan ahead the larger the problem space.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pinned_planning_entities&quot;&gt;Pinned planning entities&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are continuously planning on a daily basis, there will be appointments within the two week period that are already allocated to people. To ensure that appointments are not double-booked, you need to mark existing appointments as allocated by pinning them. Pinning is used to anchor one or more specific assignments and force OptaPlanner to schedule around those fixed assignments.  A pinned planning entity, such as an appointment, doesn’t change during solving.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether an entity is pinned or not is determined by the appointment state. If you take a look at the previous image, you can see to the left of the image that an appointment can have five states: Open, Invited, Accepted, Rejected, or Rescheduled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You don’t actually see these states directly in the quickstart demo code because the OptaPlanner engine is only interested in whether the appointment is pinned or not.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So as you can see from the image, you need to be able to plan around appointments that have already been scheduled. An appointment with the Invited or Accepted state is pinned. Appointments with the Open, Reschedule, and Rejected state are not pinned and are available for scheduling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example,  when the solver runs it searches across the entire two week planning window in both the published and draft ranges. The solver considers any unpinned entities (appointments with the Open, Reschedule, or Rejected states) in addition to the unscheduled input data, to find the optimal solution. If the solver is run daily, you will see a new day added to the schedule before you run the solver, as shown in the middle image above. The third schedule shows the results of the solver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the appointments on the new day have been assigned and Amy and Edna who were previously scheduled in the draft part of the planning window are now scheduled in the published part of the window. This was possible because Gus and Hugo requested a reschedule. This won’t cause any confusion because Amy and Edna were never notified about their draft dates. Now, because they have appointments in the published section of the planning window, they will be notified and asked to accept or reject their appointments, and their appointments are now pinned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned. We’ll be posting a follow-up blog for a deeper, more technical look at the OptaPlanner vaccination appointment scheduler quickstart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Additional resources&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LTkoaBk-P6U&quot;&gt;Vaccination appointment scheduling video&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts&quot;&gt;GitHub appointment planner code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/&quot;&gt;OptaPlanner User Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Co-authored by Emily Murphy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2021/01/26/HowMuchFasterIsJava15.html</id>
            <title type="html">How much faster is Java 15?</title>
            <updated>2021-01-26T00:00:00+00:00</updated>
            <published>2021-01-26T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2021/01/26/HowMuchFasterIsJava15.html" rel="alternate" type="text/html" />
            <author>
                <name>michaltomco</name>
            </author>
                    <category term="production"></category>
                    <category term="benchmark"></category>
            <summary type="html">
                 Java 15 was released on the 15th of September 2020 and has promised to bring with it a few performance tweaks in its G1GC and ParallelGC garbage collectors. What does it mean for OptaPlanner? Are ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 15 was released on the 15th of September 2020 and has promised to bring with it a few performance tweaks in its G1GC
and ParallelGC garbage collectors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What does it mean for
&lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;? Are there any benefits to be gained from upgrading from JDK11 to JDK15? In 2019,
we found out that ParallelGC works better for OptaPlanner. Is that still the case a year later? Let&amp;#8217;s put it to the test!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is a follow-up on our
&lt;a href=&quot;https://www.optaplanner.org/blog/2019/01/17/HowMuchFasterIsJava11.html&quot;&gt;Java 11&lt;/a&gt;
and our
&lt;a href=&quot;https://www.optaplanner.org/blog/2014/03/20/HowMuchFasterIsJava8.html&quot;&gt;Java 8&lt;/a&gt; performance comparison benchmarks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_methodology&quot;&gt;Benchmark methodology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run the benchmark we used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A stable machine without any other computational demanding processes running and with
&lt;code&gt;Intel® Xeon® Silver 4116 @ 2.1 GHz (12 cores total / 24 threads)&lt;/code&gt; and &lt;code&gt;128 GiB&lt;/code&gt; RAM memory, running &lt;code&gt;RHEL 8 x86_64&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both G1 and Parallel GC for both Java versions to compare the impact of garbage collection.
Executed &lt;code&gt;org.optaplanner.examples.app.GeneralOptaPlannerBenchmarkApp&lt;/code&gt; with the parameters &lt;code&gt;-Xmx3840M -server -XX:+UseG1GC&lt;/code&gt;
and &lt;code&gt;-Xmx3840M -server -XX:+UseParallelGC&lt;/code&gt; respectively. The results presented in this blog represent the average values
taken from 10 iterations of each garbage collector and JDK combination.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both OpenJDK 11 version &quot;11.0.6&quot;
OpenJDK Runtime Environment 18.9 (build 11.0.6+10-LTS)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.6+10-LTS, mixed mode)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both OpenJDK 15 version &quot;15.0.1&quot;
OpenJDK Runtime Environment 18.9 (build 15.0.1+9-LTS)
OpenJDK 64-Bit Server VM 18.9 (build 15.0.1+9-LTS, mixed mode)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OptaPlanner &lt;code&gt;7.44.0.Final&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solving a planning problem involves &lt;strong&gt;no IO&lt;/strong&gt; (except a few milliseconds during startup to load the input). &lt;strong&gt;A single
CPU is completely saturated.&lt;/strong&gt; It constantly creates many short-lived objects, and the GC collects them afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each run solves 11 planning problems with OptaPlanner. Each planning problem runs for 5 minutes and starts with a
30 second JVM warm up which is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmarks measure the number of scores calculated per second. Higher is better. Calculating
a score for a proposed planning solution is non-trivial: it involves many calculations, including checking for
conflicts between every entity and every other entity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_executive_summary&quot;&gt;Executive summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Java 15, the average improvement is &lt;strong&gt;11.24%&lt;/strong&gt; for G1 and &lt;strong&gt;13.85%&lt;/strong&gt; for Parallel GC. The difference between the two
garbage collectors running on JDK 15 is &lt;strong&gt;11.03%&lt;/strong&gt; leaning in favor of Parallel GC.
For more information about difference between various GC algorithms, please see the following article that compares
&lt;a href=&quot;https://dzone.com/articles/choosing-the-best-garbage-collection-algorithm-for&quot;&gt;Java garbage collectors performance&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parallel GC remains to be the preferred GC to be used with OptaPlanner, since the throughput is still the most relevant
factor when it comes to garbage collection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_results&quot;&gt;Results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_java_11_vs_java_15&quot;&gt;Java 11 vs. Java 15&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/01/26/JDK11andJDK15UsingG1GC.png&quot; alt=&quot;JDK11andJDK15UsingG1GC&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table id=&quot;table1&quot; class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Score calculation count per second with G1GC&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;71,524&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;67,266&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;253,037&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;37,346&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,841&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7,193&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10,600&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7,062&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,570&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,359&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1,806&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;72,285&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;70,786&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;285,668&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;37,371&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,405&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10,049&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12,382&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,205&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,952&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,730&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1,997&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Difference (in %)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.06&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.23&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.9&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.07&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13.42&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16.85&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16.81&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16.19&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14.86&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15.73&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10.58&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average (in %)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;11&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;11.24&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/01/26/JDK11andJDK15UsingParallelGC.png&quot; alt=&quot;JDK11andJDK15UsingParallelGC&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Score calculation count per second with ParallelGC&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;76,600&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;76,954&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;296,107&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;49,937&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,244&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7,666&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12,368&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7,904&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,941&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,729&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,090&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;91,131&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;87,565&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;301,981&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;48,518&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7,393&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9,496&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13,964&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,963&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,570&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,294&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,295&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Difference (in %)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18.97&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13.79&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.98&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.84&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18.40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.87&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.90&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13.40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21.39&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20.70&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.81&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average (in %)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;11&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;13.85&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_parallel_gc_vs_g1_gc_on_java_15&quot;&gt;Parallel GC vs. G1 GC on Java 15&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2021/01/26/G1GCandParallelGCUsingJDK15.png&quot; alt=&quot;G1GCandParallelGCUsingJDK15&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table id=&quot;table3&quot; class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. Comparison of score calculation count per second on JDK15 with ParallelGC and G1GC being used&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;sup&gt;.&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Garbage collector&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK15 G1GC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;72,285&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;70,786&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;285,668&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;37,371&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,405&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10,049&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12,382&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,205&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,952&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,730&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1,997&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK15 ParallelGC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;91,131&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;87,565&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;301,981&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;48,518&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7,393&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9,496&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13,964&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,963&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,570&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,294&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,295&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Difference (in %)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;26.07&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;19.16&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22.97&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-13.69&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-5.82&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.33&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.46&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17.31&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17.12&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.98&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average (in %)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;11&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;11.03&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In conclusion, the performance gained in the JDK15 version is well worth considering regarding OptaPlanner. In addition, the preferred garbage collector to use is still ParallelGC, the performance of which is even better in comparison with G1GC than it was in our &lt;a href=&quot;https://www.optaplanner.org/blog/2019/01/17/HowMuchFasterIsJava11.html&quot;&gt;previous JDK performance comparison&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Updated with minor corrections on April 15, 2021.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2020/10/09/FacilityLocationProblemQuickstart.html</id>
            <title type="html">Solve the facility location problem</title>
            <updated>2020-10-09T00:00:00+00:00</updated>
            <published>2020-10-09T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2020/10/09/FacilityLocationProblemQuickstart.html" rel="alternate" type="text/html" />
            <author>
                <name>yurloc</name>
            </author>
                    <category term="use case"></category>
                    <category term="facility location problem"></category>
                    <category term="quarkus"></category>
            <summary type="html">
                 We have created a new quickstart that extends OptaPlanner use case portfolio with the facility location problem and also demonstrates building a cloud-native application using Quarkus, the new ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have created a new &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts/tree/stable/use-cases/facility-location&quot;&gt;quickstart&lt;/a&gt; that extends OptaPlanner use case portfolio with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Facility_location_problem&quot;&gt;facility location problem&lt;/a&gt; and also demonstrates building a cloud-native application using &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;, the new Java Native stack.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_facility_location_problem&quot;&gt;The facility location problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The facility location problem consist of a set of potential facility locations and a set of consumer points that need to be served by the facilities.
The goal is to select a subset of the potential facility locations, to minimize the sum of distances from consumers to their assigned facilities, and to minimize the total cost of establishing the selected facilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see a sample facility location problem on the picture below.
Blue circles represent the consumers and grey pins represent potential facility locations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/10/09/facilityLocationProblemUninitialized.png&quot; alt=&quot;Facility location problem&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. An unsolved facility location problem&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To understand the problem better, let&amp;#8217;s use a concrete use case to illustrate it.
Imagine you are starting a network of coffee roasteries with the goal to supply coffeehouses all over the country.
Coffeehouses are the &lt;strong&gt;consumers&lt;/strong&gt; and roasteries are the &lt;strong&gt;facilities&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A single roastery has a producing &lt;strong&gt;capacity&lt;/strong&gt; that only allows it to cover a limited number of coffeehouses, so you will have to establish a number of roasteries.
You have been given a list of places that you can buy and run a roastery there.
These are the potential &lt;strong&gt;locations&lt;/strong&gt; where you can place a facility.
Each place has a different price that you need to pay before opening a roastery there.
The price represents the facility &lt;strong&gt;setup cost&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The challenge is to select a set of places to buy, minimize the total buying cost by preferring cheaper places and, at the same time, minimizing the sum of distances between roasteries and the coffeehouses that they supply.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_new_quickstart&quot;&gt;The new quickstart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_project_structure&quot;&gt;Project structure&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/10/09/facilityLocationProblemProject.png&quot; alt=&quot;Quickstart project structure&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Quickstart project structure&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server side code is in the &lt;code&gt;src/main/java&lt;/code&gt; directory and is organized in four packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;bootstrap&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Generates a randomized (but reproducible) data set and populates the repository with it on application startup.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;domain&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Contains the domain model used by OptaPlanner.
The &lt;code&gt;@PlanningSolution&lt;/code&gt;, &lt;code&gt;@PlanningEntity&lt;/code&gt; and &lt;code&gt;ConstraintProvider&lt;/code&gt; are in the &lt;code&gt;domain&lt;/code&gt; package.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;persistence&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Takes care of persisting the facility location problem data set.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;rest&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Contains the REST API used by the client-side code to start and stop solving and to retrieve the best solution.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client code is in the &lt;code&gt;src/main/resources/META-INF/resources/&lt;/code&gt; directory.
It has an &lt;code&gt;index.html&lt;/code&gt; file that contains the basic HTML structure and loads the &lt;code&gt;app.js&lt;/code&gt; file that calls server&amp;#8217;s REST API and makes the web page dynamic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_planning_domain_model&quot;&gt;Planning domain model&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/10/09/facilityLocationProblemClassDiagram.png&quot; alt=&quot;Class diagram&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Planning domain diagram&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_constraints&quot;&gt;Constraints&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The constraints are implemented using the Constraint Streams API.
You can find them in the &lt;code&gt;org.acme.facilitylocation.domain.FacilityLocationConstraintProvider&lt;/code&gt; class.
It defines the following constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;facilityCapacity&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Hard constraint that penalizes the demand of consumers assigned to a facility if the total demand exceeds the facility&amp;#8217;s capacity.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;setupCost&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Soft constraint that penalizes the setup cost of used facility locations.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;distanceFromFacility&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Soft constraint that penalizes the distance of a consumer from its assigned facility.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that there are two soft constraints that &amp;#8220;compete&amp;#8221; against each other because they affect the same score level.
You can control how each constraint affects the score by tweaking the constraint weights in &lt;code&gt;org.acme.facilitylocation.domain.FacilityLocationConstraintConfiguration&lt;/code&gt;.
The more weight you put on a constraint, the more it will affect the score when it is broken, and the more will OptaPlanner try to avoid it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ConstraintConfiguration
public class FacilityLocationConstraintConfiguration {
    ...
    @ConstraintWeight(FACILITY_SETUP_COST)
    HardSoftLongScore facilitySetupCost = HardSoftLongScore.ofSoft(2);
    @ConstraintWeight(DISTANCE_FROM_FACILITY)
    HardSoftLongScore distanceFromFacility = HardSoftLongScore.ofSoft(5);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use constraint weights to find a balance between minimizing the distance from consumers to facilities, and minimizing the total setup cost.
If you put too much weight on the distance constraint you might end up using unnecessarily expensive facilities.
If you put too much weight on the setup cost constraint the vehicles providing service from facilities to consumers might spend too much time traveling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_balanced_solution&quot;&gt;Balanced solution&lt;/h4&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/10/09/facilityLocationProblemSolved.png&quot; alt=&quot;Balanced solution of a facility location problem&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Balanced solution&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This screenshot of the quickstart app shows a balanced solution.
Notice the total setup cost spent on facilities and the total distance, and compare the values with the other solutions where you put an extreme weight on just one of the soft constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_priority_on_minimal_setup_cost&quot;&gt;Priority on minimal setup cost&lt;/h4&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/10/09/facilityLocationProblemPriorityCost.png&quot; alt=&quot;Balanced solution of a facility location problem&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Solution focused on minimal setup cost&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cheapest facility locations are selected, and they are utilized to 100% of their capacity, so we use a minimal number of facilities that can serve all the consumers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The distance is also minimized but the weight of the distance constraint is negligible compared to the setup cost constraint so it doesn&amp;#8217;t affect the choice of facility locations.
You could achieve the same result by making setup cost a medium constraint while leaving the distance constraint on the lower, soft level.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_priority_on_minimal_distance&quot;&gt;Priority on minimal distance&lt;/h4&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/10/09/facilityLocationProblemPriorityDistance.png&quot; alt=&quot;Balanced solution of a facility location problem&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Solution focused on minimal distance&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consumers are assigned to the closest facilities, paying only a little attention to the facility cost and utilization efficiency.
If you look closely, you can find a few places where the distance could be reduced even more.
It is just a matter of deciding the distance constraint weight.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_running_the_quickstart&quot;&gt;Running the quickstart&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run the quickstart yourself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Git clone &lt;a href=&quot;https://github.com/kiegroup/optaplanner-quickstarts&quot; class=&quot;bare&quot;&gt;https://github.com/kiegroup/optaplanner-quickstarts&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Descend into the directory &lt;code&gt;quarkus-facility-location&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;mvn quarkus:dev&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt; in your browser and click on the &lt;strong&gt;Solve&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2020/09/07/OptaPlannerWeek2020.html</id>
            <title type="html">OptaPlanner Week 2020 recordings</title>
            <updated>2020-07-09T00:00:00+00:00</updated>
            <published>2020-07-09T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2020/09/07/OptaPlannerWeek2020.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="feature"></category>
                    <category term="coding"></category>
            <summary type="html">
                 It&amp;#8217;s a wrap! Last week, during the online OptaPlanner Week event, we had 10 talks by 13 speakers across 3 days with - per day - up to 250+ live attendees and 1300+ viewers afterwards. ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a wrap! Last week, during the online &lt;strong&gt;OptaPlanner Week&lt;/strong&gt; event,
we had 10 talks by 13 speakers across 3 days with - per day -
up to 250+ live attendees and 1300+ viewers afterwards.
We&amp;#8217;ve split up the talks into separate videos for your convenience, watch them below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Big thanks to all speakers for their superb content,
all attendees for their great questions
and especially Karina Varela for organizing, hosting and moderating this event perfectly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/09/07/optaPlannerWeek2020Speakers.jpg&quot; alt=&quot;optaPlannerWeek2020Speakers&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was a lot of interaction with the audience
through live questions during the sessions and a very active YouTube chat.
Some reactions on Twitter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Learnt so much @optaplanner at the #optaplannerweek looking forward to next year&amp;#8217;s already :) cracking virtual event! Kudos to everyone that made it happen.&lt;/em&gt;
&lt;a href=&quot;https://twitter.com/AbstractRef/status/1301601544916406272&quot;&gt;Terry Strachan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Thanks again @optaplanner
for the great week with so many insights into how to build constrained optimization solutions from both a business and also a technical perspective.&lt;/em&gt;
&lt;a href=&quot;https://twitter.com/holgerbrandl/status/1301761856126750721&quot;&gt;Holger Brandl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_day_1&quot;&gt;Day 1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_kickstarting_your_optaplanner_project_patterns_and_common_practices&quot;&gt;Kickstarting your OptaPlanner project: patterns and common practices&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/x4PkS962eFs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_vehicle_routing_with_optaplanner&quot;&gt;Vehicle routing with OptaPlanner&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/sIZpmQTq1lo?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_visualizing_indictments_explaining_the_solution_to_the_user_and_identifying_deficient_resources&quot;&gt;Visualizing indictments: Explaining the solution to the user and identifying deficient resources&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/MZgWrKwfVx0?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_trustyai_and_explanation_by_example_with_optaplanner&quot;&gt;TrustyAI and explanation by example with OptaPlanner&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/4H3U6xyCgMI?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_day_2&quot;&gt;Day 2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_tasks_optimization_understand_the_chained_models&quot;&gt;Tasks Optimization: understand the chained models&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/07E_v-mZ2As?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_business_optimizer_i_bet_you_im_better_than_a_human&quot;&gt;Business optimizer: I bet you I&amp;#8217;m better than a human&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/NHU-UZM6fKI?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_constraint_streams_101_the_future_of_score_constraints_in_optaplanner&quot;&gt;Constraint Streams 101: The future of score constraints in OptaPlanner&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/XCyIdmUDMtI?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_day_3&quot;&gt;Day 3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_business_use_cases_and_the_impact_of_optaplanner&quot;&gt;Business use cases and the impact of OptaPlanner&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/waU8zZtx--g?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_quarkus_and_optaplanner_create_a_school_timetable_application&quot;&gt;Quarkus and OptaPlanner: create a school timetable application&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/E35pYMKaukw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_planning_agility_continuous_planning_real_time_planning_and_more&quot;&gt;Planning agility: continuous planning, real-time planning and more&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/Ew6pq9nJKog?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_onwards&quot;&gt;Onwards&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See you next year!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2020/07/03/LetsOptaPlanYourJbpmTasksPart1.html</id>
            <title type="html">Let&amp;#8217;s OptaPlan your jBPM tasks (part 1) - Integrating the two worlds</title>
            <updated>2020-07-03T00:00:00+00:00</updated>
            <published>2020-07-03T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2020/07/03/LetsOptaPlanYourJbpmTasksPart1.html" rel="alternate" type="text/html" />
            <author>
                <name>wmedvede</name>
            </author>
                    <category term="feature"></category>
                    <category term="task assignment"></category>
                    <category term="integration"></category>
            <summary type="html">
                 Traditionally, business process management systems (BPMS) assign human tasks to users on a group basis. This information is part of the human tasks configuration. In the following process, notice ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally, business process management systems (BPMS) assign human tasks to users on a group basis.
This information is part of the human tasks configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following process, notice how the Resolve Dispute and Notify Customer tasks are configured with the
CreditAnalyst and ClientRelations groups respectively:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/CreditDisputeProcessDiagram.png&quot; alt=&quot;CreditDisputeProcessDiagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At runtime, every time a new instance of one of these tasks is created it is automatically assigned to the respective
group with the status Ready.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This makes the task automatically available to all users that belong to the group.
All users in the group see it in their respective &lt;strong&gt;Task Inbox&lt;/strong&gt; but none are the actual owner or responsible for the task.
To be able to work with a particular task, a user must execute the claim operation to reserve the task for that user.
This is a completely manual procedure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows a list of tasks with the Ready status:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/TaskList-NoTaskIsSelected.png&quot; alt=&quot;TaskList NoTaskIsSelected&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows the result of the claim operation executed on task #74 by the user &lt;em&gt;katy&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/TaskList-UserKatyClaimedATask.png&quot; alt=&quot;TaskList UserKatyClaimedATask&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although this is the standard procedure for most BPMS products, it is not flexible enough for all use cases, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scenarios with a huge set of tasks that require an optimal distribution of tasks between users by specific criteria.
For example, distribute the tasks fairly between users, minimize the time to complete all the tasks, consider the tasks priorities, and so forth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scenarios where it&amp;#8217;s desired to combine business data for making the tasks assignments, because BPMS engines normally
assign tasks on a group basis but don&amp;#8217;t have the ability to include business data for making the assigning decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When instant reaction is required, new tasks are created or the existing tasks are completed. All of these events might
require a redistribution of the work to ensure the assignments are still optimal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So in general, when using standard BPMS products, users might find a large list of tasks up-front but do not have the
knowledge to manually claim and execute them in the best or optimal way. And the responsibility for picking the tasks in
the proper order is delegated to the users.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_about_asking_optaplanner_to_do_some_of_this_work&quot;&gt;How about asking OptaPlanner to do some of this work?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the last months we&amp;#8217;ve been working on integrating &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; and &lt;a href=&quot;https://jbpm.org/&quot;&gt;jBPM&lt;/a&gt;  with that purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The concept is very simple: &lt;em&gt; &lt;strong&gt;&amp;#8220;let each tool do the piece of work it is good at, integrate the results, and provide a
better user experience&amp;#8221;&lt;/strong&gt; &lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows a simplified view of the integration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/IntegrationDiagram.png&quot; alt=&quot;IntegrationDiagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The business process runtime executes the processes and creates the human tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; consumes the available tasks and calculates an optimized plan based on a set of constraints.
The plan establishes which tasks must be assigned to whom.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The planned assignments are executed in the &lt;a href=&quot;https://jbpm.org/&quot;&gt;jBPM&lt;/a&gt; runtime and the tasks are finally assigned to the users.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows how the tasks are assigned when integration is enabled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/TaskList-TaskAssignedAfterStartingTheIntegration.png&quot; alt=&quot;TaskList TaskAssignedAfterStartingTheIntegration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The tasks marked in blue are assigned to the user &lt;em&gt;katy&lt;/em&gt; while the tasks marked in red are assigned to the user &lt;em&gt;maciek&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_curious_about_how_this_happens&quot;&gt;Curious about how this happens?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of the integration, &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; was able to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Identify that the ResolveDispute task is configured for users that belong to the CreditAnalyst group.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify that the users katy and maciek belong to the CreditAnalyst group.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate an optimized plan with the following results:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tasks #70 and #69 should be assigned to katy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks #75 and #73 should be assigned to maciek.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the proper assignments in the &lt;a href=&quot;https://jbpm.org/&quot;&gt;jBPM&lt;/a&gt; runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep some tasks, in this example  #71, #72 and #74, unassigned.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_so_this_basically_means_that_users_no_longer_have_to_manually_claim_the_tasks&quot;&gt;So, this basically means that users no longer have to manually claim the tasks?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, now they can focus on executing their assigned work. But most importantly, it also means that the responsibility
and decision making was transferred from humans to optimization algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_are_some_tasks_still_unassigned&quot;&gt;Why are some tasks still unassigned?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually, a running BPMS creates many process instances and many human tasks. At the same time, users are working and
completing these human tasks. This cycle is repeated over and over.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; addresses this situation by recalculating the optimized plan when new human tasks are created or completed
and produces new assignments to reflect the new optimized plan. This is often achieved by combining different
&amp;#8220;Repeated Planning and Real-time Planning&amp;#8221; techniques.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, it might be the case that a plan that was optimal at time N is no longer optimal at time N+1. For example,
a higher priority task has arrived and must be performed as soon as possible. The direct impact of this situation is that
the programmed assignments at time N might change at time N+1, which means that tasks are routinely reassigned many times
when the new optimized plans are calculated. One of &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&amp;#8217;s&lt;/a&gt; strengths is the ability to react to a changing context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If not controlled, continuous task reassignment might negatively impact the user&amp;#8217;s experience because they might feel
that tasks come in and out of their workload randomly. This situation is present in other types of optimization problems
as well and is usually managed by combining different repeated and continuous planning techniques. For detailed
information see the &quot;Repeated Planning&quot; section of the &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&amp;#8217;s&lt;/a&gt; User&amp;#8217;s Guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple strategy is to introduce the concept of a planning window which is a defined subset of the available work that
will not be changed or reassigned even when new plans are calculated. Only this subset is available to users.
The tasks in the planning window are called published tasks. The previous example contains a planning window with a size of two.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Users concentrate on completing these tasks and &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; concentrates on keeping the optimized plan updated and
assigning more work to them as soon they start completing the published tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_was_the_plan_calculated&quot;&gt;How was the plan calculated?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following constraints were used for the plan calculation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A task must be assigned to one of its &quot;Potential Owners&quot; (for example, users that belong to the task&amp;#8217;s configured group),
or to the &quot;Planning User&quot; in cases where no &quot;Potential Owners&quot; are found.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a task has configured &quot;skills&quot; it can only be assigned to a user that has all of the skills. If no user can be found,
it will be assigned to the &quot;Planning User&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign higher priority tasks first whenever possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduce the time to complete all the tasks and do a fair distribution of the work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign medium and low priority tasks last.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_integrating_business_data&quot;&gt;Integrating business data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the beginning of this post we showed how the human tasks are configured and how the group information is set.
Then, we showed how this group is used for calculating the plan and making the assignments. But let&amp;#8217;s take a deeper look
at these tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/CreditDisputeProcessDiagramWithTaskInputs.png&quot; alt=&quot;CreditDisputeProcessDiagramWithTaskInputs&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The image shows how both tasks are configured with an input parameter skills that are assigned with some of the process
variable values. At runtime these assignments connect the process business data with the tasks information and &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;
can include it for the plan calculation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following example shows how the credit card type and language selection is entered when the process starts.
(Note that this information could have been collected by the process by using any other mechanism.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/StartProcessForm.png&quot; alt=&quot;StartProcessForm&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, this information will be used to establish which of the available CreditAnalyst and ClientRelations users are
best suited for each task instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following users configuration was used to execute the preceding processes:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;User&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Belongs the group&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Has skills in&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;katy&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CreditAnalyst&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CITI and MASTER cards.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;maciek&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CreditAnalyst&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VISA and AMERICAN_EXPRESS cards.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;john&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ClientRelations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Spanish and English languages.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mary&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ClientRelations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Chinese language.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s now see the information for task #70:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/ResolveDisputeTask-70-Information.png&quot; alt=&quot;ResolveDisputeTask 70 Information&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see that &quot;Task #70 requires a CreditAnalyst user with skills in the MASTER credit card&quot;. This is why it was assigned to katy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As soon as this task is completed, a new instance of the Notify Customer task is created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following image shows the new instance information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/07/03/NotifyCustomerTask-76-Information.png&quot; alt=&quot;NotifyCustomerTask 76 Information&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see that the Spanish language was selected as the &quot;Preferred language for communications&quot;, which establishes that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Task #76 requires a NotifyCustomer user with skills in the Spanish language&quot;, and this is why this new task is assigned to john.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the example above is quite linear, only four users are defined, and the possible assignments are direct.
This was done intentionally to show how the assignment decisions are made accordingly with the configured groups and the
tasks business data. However, in production environments usually both the set of available tasks and users are huge,
and for example at a certain point in time there might be many candidates for a task, and so forth.
Here is when &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&amp;#8217;s&lt;/a&gt; work becomes crucial, because the optimized plan is calculated by taking into account all
the constraints described above.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_is_this_a_hard_coded_one_shot_integration&quot;&gt;Is this a hard coded one shot integration?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No, the integration is provided as a set of Kie Server capabilities and can be easily used and integrated in other
projects and scenarios. See &lt;a href=&quot;https://docs.jboss.org/jbpm/release/7.39.0.Final/jbpm-docs/html_single/#_ch.taskAssigning&quot;&gt;KIE Server Task Assigning&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually, a running BPMS creates many process instances and many human tasks. Standard BPMS products assign these tasks
following a bucket-model, making them available to a set of users named the &quot;Potential Owners&quot; for the tasks. None of
these users are responsible for the tasks and before working with a particular task they must claim it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This model transfers the responsibility of the tasks selection to the users that must execute a manual procedure.
In many scenarios that selection is far from optimal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By integrating &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; with &lt;a href=&quot;https://jbpm.org/&quot;&gt;jBPM&lt;/a&gt;, we can go one step further and produce direct assignments of tasks to the users
according to an optimized plan. This plan is calculated by considering the process semantics, a set of constraints,
and the business data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Responsibility and decision making was transferred from humans to optimization algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/ZBzzdQJDapU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2020/05/08/AIVersusCovid-19.html</id>
            <title type="html">AI versus COVID-19: How Java helps nurses and doctors in this fight</title>
            <updated>2020-05-08T00:00:00+00:00</updated>
            <published>2020-05-08T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2020/05/08/AIVersusCovid-19.html" rel="alternate" type="text/html" />
            <author>
                <name>Christopher-Chianelli</name>
            </author>
                    <category term="use case"></category>
            <summary type="html">
                 Scheduling a hospital is tough. To maintain employees&amp;#8217; happiness and health, you need to take into account sick days, days off requests, and assure the employees have ample time between ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Scheduling a hospital is tough. To maintain employees&amp;#8217; happiness and health,
you need to take into account sick days, days off requests, and assure
the employees have ample time between shifts. This is doubly so in a pandemic,
where you need to minimize exposure to the new disease and have nurses with
varying susceptibilities to the disease. Let&amp;#8217;s take a look at how we can quickly and efficiently
schedule a hospital roster that minimizes cross-contamination between wards
and maximizes employees&amp;#8217; happiness using OptaWeb Employee Rostering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_domain&quot;&gt;The domain&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s set out the domain of our model:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are &lt;em&gt;wards&lt;/em&gt;, which are sections of the hospital, and are separated into
COVID-19 wards and non-COVID-19 wards&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are &lt;em&gt;employees&lt;/em&gt;, who are doctors and nurses who can be assigned to a ward,
each having different susceptibilities to COVID-19 (for instance,
some nurses are older and thus are more vulnerable)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are &lt;em&gt;skills&lt;/em&gt;, which describes what skill set an employee must have in
order to work in a particular ward&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are &lt;em&gt;shifts&lt;/em&gt;, which are positions that need to be filled at a given ward
at a particular time, and may require additional skills in addition to those of
its ward (for example, we need a repository specialist nurse in a COVID-19
ward, as well as a nurse and a doctor)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, there are &lt;em&gt;availabilities&lt;/em&gt;, which describes when an employee is unable to
work, desires to work, or is requesting time off&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following class diagram shows the Java classes that represent this domain:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/08/CovidEmployeeRosteringClassDiagram.png&quot; alt=&quot;Class Diagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_constraints&quot;&gt;The constraints&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaWeb Employee Rostering comes with a set of builtin
constraints, which you can add to, modify or remove according to your needs.
A few examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An employee cannot work two shifts that overlap; after all, how do you expect an
employee to be in two places at the same time? As such, this is a hard constraint,
meaning a schedule is infeasible if broken.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whenever possible, an employee should not be working on a day they request off.
Since the schedule remains feasible when an employee is working on a day they want off,
this is a soft constraint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The higher an employee&amp;#8217;s COVID-19 susceptibility is, the less they should
work in a COVID-19 ward. This is another soft constraint.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These, and the rest of the constraints, can be found in the
&lt;a href=&quot;https://github.com/kiegroup/optaweb-employee-rostering/blob/15c515de6c9faa79df957146a029531d49ea650c/optaweb-employee-rostering-backend/src/main/resources/org/optaweb/employeerostering/service/solver/employeeRosteringScoreRules.drl&quot;&gt;Drools constraints
file&lt;/a&gt;. They can also be implemented in Java using &lt;a href=&quot;https://docs.optaplanner.org/7.36.0.Final/optaplanner-docs/html_single/index.html#constraintStreams&quot;&gt;OptaPlanner&amp;#8217;s Constraint Streams
API&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_using_the_application&quot;&gt;Using the application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can build and run OptaWeb Employee Rostering locally by cloning
&lt;a href=&quot;https://github.com/kiegroup/optaweb-employee-rostering/tree/covid-19&quot;&gt;its GitHub repository&lt;/a&gt;,
switching to the &lt;code&gt;covid-19&lt;/code&gt; branch, and following the instructions in the README.
OptaWeb Employee Rostering comes with both a backend and frontend. You could use the
bundled frontend or use the backend&amp;#8217;s REST endpoints. The application by default
starts with demo data, allowing you to try out the application. Let&amp;#8217;s use one of
example tenant and solve its roster. Navigate to the &quot;Scheduling&quot; tab and click
the (?) button next to the score. You will see a detailed summary of all the constraints.
On the bottom of the list, we see the constraint &quot;Assign every shift&quot; has 1116 matches, meaning we have
1116 unassigned shifts. Let&amp;#8217;s fix that right now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/08/ConstraintSummary1.png&quot; alt=&quot;Unassigned Shifts&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Close the summary popup and click on the &quot;Schedule&quot; button. OptaPlanner will begin solving
the roster. After about 30 seconds, you&amp;#8217;ll see there are no more unassigned shifts&amp;#8201;&amp;#8212;&amp;#8201;that is, OptaPlanner assigned an employee to each of the 1116 shifts, all the while
making sure no employee gets two shifts at the same time, each employee has the required
skills for their shift, and each employee has enough rest between shifts. Imagine
making a feasible schedule by assigning 1116 shifts by hand; it would take a good
while longer than 30 seconds!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/08/ConstraintSummary1.png&quot; alt=&quot;Assigned Shifts&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While solving, OptaPlanner will keep looking for better solutions, gradually improving
the score. You might have already seen the schedule change several times already.
Let&amp;#8217;s stop solving for now. Click the Ward selector (left side of the toolbar) and
change to the ward &quot;COVID-19 Ward 1&quot;. Every shift has a small circle at the top of
it denoting the COVID-19 susceptibility of its employee. A shield represents
inoculated employees; people who have acquired immunity to COVID-19. A near-empty
circle means the employee has a low COVID-19 susceptibility, while a more filled in
circle means a higher COVID-19 susceptibility. Finally, a red circle means the employee
is extremely susceptible to COVID-19, and should not be placed in a ward with COVID-19.
Notice how there are no Extreme risk employees in the COVID-19 ward? Moreover, most
of the COVID-19&amp;#8217;s ward shifts either have inoculated or low-risk employees.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/08/CovidWardNoExtremeRisk.png&quot; alt=&quot;No Extreme Risk Employees in COVID-19 Ward&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One second, I am getting a call. Okay, I&amp;#8217;m back. Beth P. Watt caught the flu and
as such is not able to make her shift this Saturday. Luckily for us, OptaPlanner
can handle sudden changes well. Go to the &quot;Availability&quot; tab. Click the Employee
selector (left side of the toolbar) and type in &quot;Beth P. Watt&quot;. Click the Clock
icon on the week selector to jump to the current week. Now click the area under
the Saturday label on the calendar. This creates a new unavailability for the
employee Beth P. Watt on Saturday.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/08/EmployeeUnavailable.png&quot; alt=&quot;Beth P. Watt is unavailable&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now see a message indicating the schedule is not feasible in the
toolbar. This is because Beth P. Watt is unavailable on Saturday but is
assigned to a shift on Saturday. Let&amp;#8217;s fix that. Navigate to the &quot;Adjustments&quot;
tab, and click &quot;Reschedule&quot;. You should notice OptaPlanner quickly fixed the
schedule by assigning Beth P. Watt&amp;#8217;s two shifts to another employee. Also, note
that OptaPlanner changed only those two shifts; OptaPlanner will try to minimize
the number of published shifts changed (after all, nurses and doctors have a
life, which they plan around their schedules).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/08/ScheduleAfterReplanning.png&quot; alt=&quot;Only the two shifts Beth P. Watt was unavailable for changed&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few other things you can do with this application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can &quot;pin&quot; an employee to a particular shift, meaning OptaPlanner
will not change that shift&amp;#8217;s employee when solving.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can create a rotation for the employees, giving them more consistency
in their day-to-day lives and allowing automatic provisioning of new shifts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you just saw, OptaWeb Employee Rostering allows you to easily create
and optimize rosters, that does not only minimize COVID-19&amp;#8217;s effect on
health care workers, but also maximizes their happiness. You can find the
source code of this application at
&lt;a href=&quot;https://github.com/kiegroup/optaweb-employee-rostering/tree/covid-19&quot;&gt;the OptaWeb Employee Rostering GitHub repository&lt;/a&gt;. This was only
possible as OptaPlanner has such a flexible and easy way to add new constraints,
allowing us to quickly modify OptaWeb Employee Rostering to accommodate
the new constraints that came with COVID-19. You might also be interested
in &lt;a href=&quot;https://developers.redhat.com/devnation/tech-talks/AI-vs-covid19-java/&quot;&gt;Geoffrey De Smet&amp;#8217;s talk on the application&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2020/05/05/WorkflowProcessesWithAIScheduling.html</id>
            <title type="html">Workflow processes with AI scheduling</title>
            <updated>2020-05-05T00:00:00+00:00</updated>
            <published>2020-05-05T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2020/05/05/WorkflowProcessesWithAIScheduling.html" rel="alternate" type="text/html" />
            <author>
                <name>Christopher-Chianelli</name>
            </author>
                    <category term="use case"></category>
                    <category term="quarkus"></category>
            <summary type="html">
                 A BPMN diagram models a Business Process. When the Business Process involves optimization at some step, OptaPlanner can help you quickly find an optimal solution. Now with Kogito, it is easier ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A BPMN diagram models a Business Process. When the Business
Process involves optimization at some step,
&lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; can help you quickly find an optimal solution.
Now with &lt;a href=&quot;https://kogito.kie.org/&quot;&gt;Kogito&lt;/a&gt;, it is easier than ever before to integrate
OptaPlanner into your BPMN diagrams! It is so simple, that by the end of this blog,
you will create a Business Process for scheduling a flight in an airline from scratch using
OptaPlanner, BPMN and Quarkus in 15 minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_project_setup&quot;&gt;Project Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a new folder to hold this project. Run the following command to
create a new Quarkus project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;mvn io.quarkus:quarkus-maven-plugin:1.4.1.Final:create \
    -DprojectGroupId=com.company \
    -DprojectArtifactId=airline-bpmn-optaplanner \
    -Dextensions=&quot;resteasy, resteasy-jackson, optaplanner, \
                  optaplanner-jackson, kogito-quarkus, smallrye-openapi&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_creating_your_bpmn_file&quot;&gt;Creating your BPMN file&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will be creating a simple BPMN that models the following process:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Airline creates a flight&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the flight is open for boarding:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;When a passenger order a ticket, create a task for security to approve/deny
them&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;If approved, add the passenger to the flight&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, do nothing&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send the flight with the finalized passenger list to OptaPlanner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send the optimized seat assignments to the airline for final approval&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to the &lt;a href=&quot;https://bpmn.new&quot;&gt;Kogito BPMN Editor&lt;/a&gt;,
a free online editor for editing and creating BPMN files, no account required.
You should be greeted with the following screen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNNewFile.png&quot; alt=&quot;BPMNNewFile&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the edit button next to &lt;code&gt;new-file.bpmn&lt;/code&gt; and name it something more
appropriate, like &lt;code&gt;flight-process&lt;/code&gt;. Now click the &quot;Properties&quot; button
on the right sidebar&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNProperties.png&quot; alt=&quot;BPMNProperties&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Replace the auto-generated name in the &quot;Name&quot; field with &quot;Flight Process&quot; and
the auto-generated id in the &quot;Id&quot; field with &quot;flightProcess&quot;. Enter &quot;com.company&quot;
into the &quot;Package&quot; field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNNameIdFields.png&quot; alt=&quot;BPMNNameIdFields&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before proceeding, we need to know our business process&amp;#8217; variables (that is,
what data is processed by the business process). Expand the &quot;Process Data&quot;
tab in the Properties Sidebar and click the &quot;+&quot; icon in the &quot;Process Variable&quot;
table. In this case, we only have one process variable: the flight we are
planning. Enter &quot;flight&quot; into the &quot;Name&quot; field, and in the &quot;Type&quot; field,
select &quot;Custom&amp;#8230;&amp;#8203;&quot; and enter &quot;com.company.Flight&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNProcessVariables.png&quot; alt=&quot;BPMNProcessVariables&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we get to design the actual business process. Create a start node
by clicking on the Green Circle in the toolbar on the left, and drag the
&quot;Start&quot; row somewhere on the canvas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNStartNode.png&quot; alt=&quot;BPMNStartNode&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we are going to create a User Task to finalize the passenger list.
Click on the Rectangle in the toolbar on the left, then drag the
&quot;User Task&quot; row next to the start node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNCreateFinalizedPassengerListTask.png&quot; alt=&quot;BPMNCreateFinalizedPassengerListTask&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the start node, then click on the solid arrow icon, then
click on the newly created User Task to create a sequence flow
from &quot;Start&quot; to &quot;Task&quot; (this tell the process that after it is
started, to go to the &quot;Task&quot; node).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNCreateSequenceFlow.png&quot; alt=&quot;BPMNCreateSequenceFlow&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the &quot;Task&quot; node to open up its properties (if you closed
the properties panel from earlier, you can open it up again by clicking on
the properties icon). Rename the task to &quot;Finalize Passenger List&quot;. Open
its &quot;Implementation/Execution&quot; tab. Change the &quot;Task Name&quot; field to
&quot;finalizePassengerList&quot;; this field will be used to determine the REST endpoint
for this task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNRenameFinalizePassengerList.png&quot; alt=&quot;BPMNRenameFinalizePassengerList&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we are going to model passengers ordering tickets for the flight.
Create an Event-based subprocess by clicking on the Rectangle with an inner
filled rectangle on the left toolbar, and drag the &quot;Event&quot; row above
the start node and task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNCreateEventBasedSubprocess.png&quot; alt=&quot;BPMNCreateEventBasedSubprocess&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the Event-based subprocess is covering other nodes, you can move it by
dragging the Event-based subprocess. Open the Event-based subprocess properties
by clicking on it (opening the properties sidebar if necessary), and rename it
to &quot;Passenger Requests Ticket Subprocess&quot;. This subprocess can have its own
variables, and also inherits the main process&amp;#8217; variables. In this case, we
need two additional variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The passenger who requested a ticket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The response from security&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expand the &quot;Process Data&quot; tab and create two new variables in the same manner
you created the &quot;flightProcess&quot; variable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;passenger&quot;, of type &quot;com.company.Passenger&quot; (use Custom type)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;isPassengerApprovedBySecurity&quot;, of type &quot;Boolean&quot; (use the type in the dropdown)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNPassengerRequestsTicketSubprocessProperties.png&quot; alt=&quot;BPMNPassengerRequestsTicketSubprocessProperties&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need to model the event of a passenger requesting a ticket. This can
be modelled by a &quot;Start Signal&quot; event. Click the green circle on the left
toolbar and drag the &quot;Start Signal&quot; row into
&quot;Passenger Requests Ticket Subprocess&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNCreateStartSignal.png&quot; alt=&quot;BPMNCreateStartSignal&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the &quot;Start Signal&quot; event you just created and open its properties.
Rename the event to &quot;Passenger Request Ticket&quot;. In the Implementation/Execution
section, select &quot;New&amp;#8230;&amp;#8203;&quot; in the &quot;Signal&quot; field and enter &quot;passengerRequestTicket&quot;.
Finally, in the &quot;Data Assignment&quot; section, click on the Edit icon beneath
&quot;Assignments&quot; to open a Task Data I/O modal. Click the &quot;Add&quot; button in the
modal to add a new assignment. Put &quot;passenger&quot; for Name, select &quot;Custom&amp;#8230;&amp;#8203;&quot;
and enter &quot;com.company.Passenger&quot; for Type, and select &quot;passenger&quot; for Target.
Click save to add the assignment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNStartSignalProperties.png&quot; alt=&quot;BPMNStartSignalProperties&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now create a new User Task and drag it into the
&quot;Passenger Requests Ticket Subprocess&quot;. Rename it to &quot;Approve Passenger for
Flight&quot;. In its &quot;Implementation/Execution&quot; tab, change &quot;Task Name&quot;
to &quot;approvePassengerForFlight&quot;. Click on the edit icon beneath &quot;Assignments&quot;
and add a row for both &quot;Data Inputs and Assignments&quot; and
&quot;Data Outputs and Assignments&quot;. For the &quot;Data Inputs and Assignments&quot;
row, put &quot;passenger&quot; for Name, &quot;com.company.Passenger&quot; for Type and
select &quot;passenger&quot; for source. For the &quot;Data Outputs&quot;, put
&quot;isPassengerApprovedBySecurity&quot; for Name, select &quot;Boolean&quot; for Type,
and select &quot;isPassengerApprovedBySecurity&quot; for Target.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNApprovePassengerForFlightProperties.png&quot; alt=&quot;BPMNApprovePassengerForFlightProperties&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need to model a decision being made in the process: should we add
the passenger to the flight or not? We model decisions in the process
with &quot;Exclusive&quot; Gateways. Click on the diamond in the left toolbar and
drag the &quot;Exclusive&quot; row into &quot;Passenger Requests Ticket Subprocess&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNCreateExclusiveGateway.png&quot; alt=&quot;BPMNCreateExclusiveGateway&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &quot;Passenger Requests Ticket Subprocess&quot; might be running out of space now,
so drag the subprocess to a place that has more room and increase it size
by dragging the dot on the bottom-right corner of the subprocess.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNMoveResizeSubprocess.png&quot; alt=&quot;BPMNMoveResizeSubprocess&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need to create the two potential outcomes of the decision: either
we end the process immediately or we add the passenger to the flight. We are
going to model adding a passenger to the flight first. Create a &quot;Service Task&quot;
by clicking the rectangle icon in the left toolbar and dragging the
&quot;Service Task&quot; row into &quot;Passenger Requests Ticket Subprocess&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNCreateServiceTask.png&quot; alt=&quot;BPMNCreateServiceTask&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rename the &quot;Service Task&quot; to &quot;Add Passenger To Flight&quot;. In the
&quot;Implementation/Execution&quot; section, put &quot;com.company.FlightService&quot;
for &quot;Interface&quot;, &quot;addPassengerToFlight&quot; for &quot;Operation&quot;. And add the following
two input assignments (in the same manner you did input assignments for
&quot;Approve Passenger for Flights&quot;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Name: &quot;flight&quot;, Type: &quot;com.company.Flight&quot;, Source: &quot;flight&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name: &quot;passenger&quot;, Type: &quot;com.company.Passenger&quot;, Source: &quot;passenger&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNAddPassengerToFlightProperties.png&quot; alt=&quot;BPMNAddPassengerToFlightProperties&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now create two &quot;End&quot; nodes; one for the &quot;Passenger is not approved&quot; path
and the other for the passenger is approved path. Click the red circle and
drag the &quot;End&quot; row underneath the &quot;Exclusive Gateway&quot; and again under
&quot;Add Passenger To Flight&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNCreateEndEvents.png&quot; alt=&quot;BPMNCreateEndEvents&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now create the following sequence flows (click on the &quot;From&quot; node, then click
the arrow, then click the &quot;To&quot; node):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;From: &quot;Approve Passenger To Flight&quot;, To: &quot;Exclusive Gateway&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From: &quot;Exclusive Gateway&quot;, To: &quot;First End&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From: &quot;Exclusive Gateway&quot;, To: &quot;Add Passenger To Flight&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From: &quot;Add Passenger To Flight&quot;, To: &quot;Second End&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNConnectPassengerRequestsTicketSubprocess.png&quot; alt=&quot;BPMNConnectPassengerRequestsTicketSubprocess&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the arrow from &quot;Exclusive Gateway&quot; to &quot;Add Passenger To Flight&quot;.
In its &quot;Implementation/Execution&quot; section, put in the following code in the &quot;Expression&quot;
text box:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;return isPassengerApprovedBySecurity;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNPassengerApprovedPath.png&quot; alt=&quot;BPMNPassengerApprovedPath&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now click on the arrow from &quot;Exclusive Gateway&quot; to &quot;First End&quot;. In its
&quot;Implementation/Execution&quot; section, put in the following code in the &quot;Expression&quot;
text box:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;return !isPassengerApprovedBySecurity;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNPassengerNotApprovedPath.png&quot; alt=&quot;BPMNPassengerNotApprovedPath&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are now done with the &quot;Passenger Requests Ticket Subprocess&quot;. Since we
can add passengers to our flight, it is now time to integrate OptaPlanner into
our BPMN. Create a new &quot;Service Task&quot; in the main process (&lt;strong&gt;not&lt;/strong&gt; in
&quot;Passenger Requests Ticket Subprocess&quot;) and create a sequence flow
from &quot;Finalize Passenger List&quot; to it. Rename it to &quot;Create Seat Assignments&quot;, and
in the &quot;Implementation/Execution&quot; section, put &quot;com.company.FlightService&quot;
for &quot;Interface&quot;, &quot;createSeatAssignments&quot; for &quot;Operation&quot;. Add the following
input and output assignments:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Name: &quot;flight&quot;, Type: &quot;com.company.Flight&quot;, Source: &quot;flight&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Name: &quot;flight&quot;, Type: &quot;com.company.Flight&quot;, Target: &quot;flight&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Yes, both input and output have the same values for their respective columns;
this is not an error)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/BPMNCreateSeatAssignments.png&quot; alt=&quot;BPMNCreateSeatAssignments&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are almost finished with the BPMN. Create an &quot;End&quot; node in the main process
and create a sequence flow from &quot;Create Seat Assignments&quot; to it. Here is the
final BPMN diagram:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/FinalBPMN.png&quot; alt=&quot;FinalBPMN&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the &quot;Download&quot; button at the top right of the page to download the
BPMN diagram. Create the directories &quot;src/main/resources/com/company&quot; and
move the downloaded file there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_creating_the_java_interfaces&quot;&gt;Creating the Java Interfaces&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our BPMN, we referenced Java classes and services we still need to create.
In particular:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We referenced &lt;code&gt;com.company.Flight&lt;/code&gt; which is used when creating, modifying
and getting the seat assignments of a flight.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We referenced &lt;code&gt;com.company.Passenger&lt;/code&gt; which is used when we add a passenger
to a flight.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We referenced the operation &lt;code&gt;addPassengerToFlight&lt;/code&gt; of
&lt;code&gt;com.company.FlightService&lt;/code&gt; when we add a passenger to the flight.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We referenced the operation &lt;code&gt;createSeatAssignments&lt;/code&gt; of
&lt;code&gt;com.company.FlightService&lt;/code&gt; when we create the seat assignments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll be using the following domain model for our classes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/05/05/flightSeatAssignmentClassDiagram.png&quot; alt=&quot;flightSeatAssignmentClassDiagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A seat has a seat identifier (ex: &quot;3A&quot;) and what type it is.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class Seat {
    @PlanningId
    public String seatIdentifier;
    public Type type;

    public enum Type {
        WINDOW, AISLE, OTHER
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A Passenger has a name and a preferred seat type (Window, Aisle, etc.) and
is assigned a seat on the flight.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@PlanningEntity
public class Passenger {
    @PlanningId
    public String name;

    @PlanningVariable(valueRangeProviderRefs = &quot;seatRange&quot;)
    public Seat seat;

    public Seat.Type preferredSeatType;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A Flight has an id, a list of passengers on the flight, and the number
of rows of columns on the plane.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@PlanningSolution
public class Flight {

    public String id;

    @PlanningScore
    public HardSoftScore score;

    @PlanningEntityCollectionProperty
    public List&amp;lt;Passenger&amp;gt; passengerList;

    public int rowCount;
    public int columnCount;

    @ValueRangeProvider(id = &quot;seatRange&quot;)
    private List&amp;lt;Seat&amp;gt; calculateSeatList() {
        List&amp;lt;Seat&amp;gt; out = new ArrayList&amp;lt;&amp;gt;(rowCount * columnCount);
        final int MIDDLE_OF_ROW = columnCount / 2;
        for (int column = 0; column &amp;lt; columnCount; column++) {
            for (int row = 0; row &amp;lt; rowCount; row++) {
                Seat seat = new Seat();
                // &apos;A&apos; + n = nth letter of the alphabet
                seat.seatIdentifier = (row + 1) + String.valueOf((char)(&apos;A&apos; + column));
                seat.type = (column == 0 || column == columnCount - 1)? Seat.Type.WINDOW :
                    (column == MIDDLE_OF_ROW || column == MIDDLE_OF_ROW + 1)? Seat.Type.AISLE :
                        Seat.Type.OTHER;
                out.add(seat);
            }
        }
        return out;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have our domain model, we can create our services. For the
&lt;code&gt;addPassengerToFlight&lt;/code&gt; service, we can simply add the passenger to the
flight&amp;#8217;s passenger list. For the &lt;code&gt;createSeatAssignments&lt;/code&gt; service,
we can use &lt;code&gt;SolverManager&lt;/code&gt; to create a &lt;code&gt;Solver&lt;/code&gt; for us and wait for the
final best solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class FlightService {
    @Inject
    SolverManager&amp;lt;Flight, String&amp;gt; solverManager;

    public void addPassengerToFlight(Flight flight, Passenger passenger) {
        flight.passengerList.add(passenger);
    }

    public Flight createSeatAssignments(Flight flight) {
        try {
            return solverManager.solve(flight.id, flight).getFinalBestSolution();
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
            return null;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we need to modify &lt;code&gt;application.properties&lt;/code&gt; so the &lt;code&gt;Solver&lt;/code&gt; know
when to terminate. Modify your &lt;code&gt;application.properties&lt;/code&gt; to look like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;# The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.
# It&apos;s recommended to run for at least 5 minutes (&quot;5m&quot;) otherwise.
quarkus.optaplanner.solver.termination.spent-limit=5s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_creating_the_constraints&quot;&gt;Creating the Constraints&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can use the Constraint Stream API to create the constraints of our
application in Java. We&amp;#8217;ll have two constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No two passengers can be in the same seat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maximize the number of passengers who get seats they prefer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do this, we create a &lt;code&gt;ConstraintProvider&lt;/code&gt; that implements these constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class FlightSeatingConstraintProvider implements ConstraintProvider {

    @Override
    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {
        return new Constraint[] {
            onlyOnePassengerPerSeat(constraintFactory),
            seatTypePreference(constraintFactory)
        };
    }

    private Constraint onlyOnePassengerPerSeat(ConstraintFactory constraintFactory) {
        return constraintFactory.fromUniquePair(Passenger.class, Joiners.equal(p -&amp;gt; p.seat))
                   .penalize(&quot;Only one passenger per seat&quot;, HardSoftScore.ONE_HARD);
    }

    private Constraint seatTypePreference(ConstraintFactory constraintFactory) {
        return constraintFactory.from(Passenger.class)
                   .join(Seat.class, Joiners.equal(p -&amp;gt; p.seat, s -&amp;gt; s))
                   .filter((p,s) -&amp;gt; p.preferredSeatType != null &amp;amp;&amp;amp; p.preferredSeatType != s.type)
                   .penalize(&quot;Seat type preference&quot;, HardSoftScore.ONE_SOFT);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_testing_the_flight_application&quot;&gt;Testing the Flight Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we are ready to test out the Flight Application we just created!
Run the following command in the terminal to start the server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;./mvnw quarkus:dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see the generated API methods by copying
&lt;a href=&quot;http://localhost:8080/openapi&quot; class=&quot;bare&quot;&gt;http://localhost:8080/openapi&lt;/a&gt; to &lt;a href=&quot;https://editor.swagger.io&quot;&gt;The Swagger Editor&lt;/a&gt;.
Let&amp;#8217;s try creating a flight. Run the following command :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;curl -X POST &quot;localhost:8080/flightProcess&quot; -H  &quot;accept: application/json&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;{\&quot;flight\&quot;:{\&quot;id\&quot;:\&quot;string\&quot;,\&quot;passengerList\&quot;:[],\&quot;rowCount\&quot;:4,\&quot;columnCount\&quot;:4}}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response that looks like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;id&quot;:&quot;${id}&quot;,
  &quot;flight&quot;:{
    &quot;id&quot;:&quot;string&quot;,
    &quot;score&quot;:null,
    &quot;passengerList&quot;:[],
    &quot;rowCount&quot;:4,
    &quot;columnCount&quot;:4
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let add a few passengers to our flight (replace ${id} with the id you got from
the previous command).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;curl -X POST &quot;localhost:8080/flightProcess/${id}/passengerRequestTicket&quot; -H  &quot;accept: application/json&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;{\&quot;name\&quot;:\&quot;Amy Cole\&quot;,\&quot;preferredSeatType\&quot;:\&quot;WINDOW\&quot;}&quot;
curl -X POST &quot;localhost:8080/flightProcess/${id}/passengerRequestTicket&quot; -H  &quot;accept: application/json&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;{\&quot;name\&quot;:\&quot;John Smith\&quot;,\&quot;preferredSeatType\&quot;:\&quot;AISLE\&quot;}&quot;
curl -X POST &quot;localhost:8080/flightProcess/${id}/passengerRequestTicket&quot; -H  &quot;accept: application/json&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;{\&quot;name\&quot;:\&quot;Bad Guy\&quot;}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let look at our tasks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;curl -X GET &quot;localhost:8080/flightProcess/${id}/tasks&quot; -H  &quot;accept: application/json&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should get a response that look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;b484124e-e015-488a-8ee2-4643199a32c5&quot;:&quot;approvePassengerForFlight&quot;,
  &quot;8d7710d5-e67c-4b3d-bcbb-5e545373560a&quot;:&quot;approvePassengerForFlight&quot;,
  &quot;c27c6e51-7599-4ab3-879c-105c5e27190d&quot;:&quot;approvePassengerForFlight&quot;,
  &quot;dd8d9039-9375-4040-96da-89926ce16f93&quot;:&quot;finalizePassengerList&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let looks at one of our passengers (replace ${taskId} with the id of the &quot;approvePassengerForFlight&quot; you want to inspect):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt; curl -X GET &quot;localhost:8080/flightProcess/${id}/approvePassengerForFlight/${taskId}&quot; -H  &quot;accept: application/json&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;passenger&quot;:{
    &quot;name&quot;:&quot;John Smith&quot;,
    &quot;seat&quot;:null,
    &quot;preferredSeatType&quot;:&quot;AISLE&quot;
  },
  &quot;name&quot;:&quot;approvePassengerForFlight&quot;,
  &quot;id&quot;:&quot;b484124e-e015-488a-8ee2-4643199a32c5&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let approve &quot;Amy Cole&quot; and &quot;John Smith&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;curl -X POST &quot;localhost:8080/flightProcess/${id}/approvePassengerForFlight/${taskId}&quot; -H  &quot;accept: application/json&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;{\&quot;isPassengerApprovedBySecurity\&quot;:true}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(run the command twice; one for the &quot;approvePassengerForFlight&quot; task for Amy Cole,
and one for the &quot;approvePassengerForFlight&quot; task for John Smith).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And let deny &quot;Bad Guy&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;curl -X POST &quot;localhost:8080/flightProcess/${id}/approvePassengerForFlight/${taskId}&quot; -H  &quot;accept: application/json&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;{\&quot;isPassengerApprovedBySecurity\&quot;:false}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(replace ${taskId} with Bad Guy&amp;#8217;s &quot;approvePassengerForFlight&quot; task id)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, let create the seat assignments:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;curl -X POST &quot;localhost:8080/flightProcess/${id}/finalizePassengerList/${taskId}&quot; -H  &quot;accept: application/json&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;{}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Use &quot;finalizePassengerList&quot; task&amp;#8217;s id here)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This request will take several seconds to return as it waits for OptaPlanner
to optimize the flight seating. It will return a JSON containing the process
variables, including the optimized seat assignments in the &quot;flight&quot; field:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &quot;id&quot;:&quot;61210009-8f75-4bf7-9221-d5c92d7d1be3&quot;,
  &quot;flight&quot;:{
    &quot;id&quot;:&quot;string&quot;,
    &quot;score&quot;:{
      &quot;initScore&quot;:0,
      &quot;hardScore&quot;:0,
      &quot;softScore&quot;:0,
      &quot;feasible&quot;:true,
      &quot;solutionInitialized&quot;:true
    },
    &quot;passengerList&quot;:[
      {
        &quot;name&quot;:&quot;Amy Cole&quot;,
        &quot;seat&quot;:{&quot;seatIdentifier&quot;:&quot;1A&quot;,&quot;type&quot;:&quot;WINDOW&quot;},
        &quot;preferredSeatType&quot;:&quot;WINDOW&quot;
      },
      {
        &quot;name&quot;:&quot;John Smith&quot;,
        &quot;seat&quot;:{&quot;seatIdentifier&quot;:&quot;1B&quot;,&quot;type&quot;:&quot;AISLE&quot;},
        &quot;preferredSeatType&quot;:&quot;AISLE&quot;
      }
    ],
    &quot;rowCount&quot;:4,
    &quot;columnCount&quot;:4
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the above example, &quot;Amy Cole&quot; is assigned to seat &quot;1A&quot; and
&quot;John Smith&quot; is assigned to seat &quot;1B&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_next&quot;&gt;What Next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we have a fully functional REST service, we can easily extend it by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Creating a UI frontend to the service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Signaling the BPMN process when OptaPlanner is finished solving instead of
waiting for solving to finish, and poll the latest solutions client-side&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send Kafka messages whenever OptaPlanner finds a new solution and consume
them in the BPMN process&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find an extended version of the flight example created in this blog
at &lt;a href=&quot;https://github.com/kiegroup/kogito-examples/tree/main/process-optaplanner-quarkus&quot;&gt;the Kogito Examples repository&lt;/a&gt;,
which has a full UI and poll for the latest solution from the solver instead of
waiting for solving to finish.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2020/04/07/ConstraintStreams.html</id>
            <title type="html">Constraint Streams - Modern Java constraints without the Drools Rule Language</title>
            <updated>2020-04-07T00:00:00+00:00</updated>
            <published>2020-04-07T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2020/04/07/ConstraintStreams.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="feature"></category>
                    <category term="coding"></category>
                    <category term="constraint"></category>
            <summary type="html">
                 Traditionally, to scale out with OptaPlanner, you had to learn DRL. No more. With the new Constraints Streams API, inspired by Java 8 Streams and SQL, you can now write your constraints in Java ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally, to scale out with &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;,
you had to learn DRL. &lt;em&gt;No more.&lt;/em&gt;
With the new &lt;em&gt;Constraints Streams&lt;/em&gt; API, inspired by Java 8 Streams and SQL,
you can now &lt;strong&gt;write your constraints in Java&lt;/strong&gt; (or Kotlin or Scala)
and still benefit from incremental calculation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Underneath, Constraints Streams (CS) still use the powerful &lt;a href=&quot;https://www.drools.org/&quot;&gt;Drools&lt;/a&gt; engine.
We also still fully support score DRLs too. They are &lt;em&gt;not&lt;/em&gt; deprecated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start with an example.
In nurse rostering, to avoid assigning shifts to employee &lt;code&gt;Ann&lt;/code&gt;,
you would write this constraint in DRL:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-drl hljs&quot; data-lang=&quot;drl&quot;&gt;rule &quot;Don&apos;t assign Ann&quot;
    when
        Shift(getEmployee().getName() == &quot;Ann&quot;)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the same constraint in Java using Constraint Streams:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;Constraint constraint = constraintFactory
        .from(Shift.class)
        .filter(shift -&amp;gt; shift.getEmployee().getName().equals(&quot;Ann&quot;))
        .penalize(&quot;Don&apos;t assign Ann&quot;, HardSoftScore.ONE_SOFT);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re familiar with SQL or Java 8 streams, this should look familiar.
Given a potential solution with four shifts (two of which are assigned to &lt;code&gt;Ann&lt;/code&gt;),
those shifts flow through the Constraint Stream like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/constraintStreamFilter_part.png&quot; alt=&quot;constraintStreamFilter part&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new approach to writing constraints has several benefits:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_incremental_calculation&quot;&gt;Incremental calculation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First off, unlike an &lt;code&gt;EasyScoreCalculator&lt;/code&gt;,
Constraint Streams still apply incremental score calculation to scale out, just like DRL.
For example, when a move swaps the employee of two shifts, only the delta is calculated.
That&amp;#8217;s a huge scalability gain:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/constraintStreamIncrementalCalculation.png&quot; alt=&quot;constraintStreamIncrementalCalculation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_indexing&quot;&gt;Indexing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When joining multiple types, just like an SQL &lt;code&gt;JOIN&lt;/code&gt; operator,
Constraint Streams apply hash lookups on indexes to scale better:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/constraintStreamJoinWithJoiners.png&quot; alt=&quot;constraintStreamJoinWithJoiners&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ide_support&quot;&gt;IDE support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because ConstraintsStreams are written in the Java language,
they piggy-back on very strong tooling support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code highlighting, code completion and debugging just work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_code_highlighting&quot;&gt;Code highlighting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DRL code in IntelliJ IDEA Ultimate:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/codeHighlightingDRL.png&quot; alt=&quot;codeHighlightingDRL&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java code using Constraint Streams in IntelliJ IDEA Ultimate, for the same constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/codeHighlightingConstraintStreams.png&quot; alt=&quot;codeHighlightingConstraintStreams&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_code_completion&quot;&gt;Code completion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code completion for Constraint Streams:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/codeCompletionConstraintStreams.png&quot; alt=&quot;codeCompletionConstraintStreams&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, all API methods have Javadocs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_debugging&quot;&gt;Debugging&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add a breakpoint in ConstraintStream&amp;#8217;s &lt;code&gt;filter()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/codeDebuggingConstraintStreams1.png&quot; alt=&quot;codeDebuggingConstraintStreams1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To diagnose issues while debugging:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/codeDebuggingConstraintStreams2.png&quot; alt=&quot;codeDebuggingConstraintStreams2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_java_syntax&quot;&gt;Java syntax&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Constraints written in Java with Constraint Streams follow the Java Language Specification (JLS), for good or bad.
Similar logic applies when using Constraint Streams from Kotlin or Scala.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When migrating between DRL and Constraint Streams, be aware of some differences between DRL and Java:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A DRL&amp;#8217;s &lt;code&gt;==&lt;/code&gt; operator translates  to &lt;code&gt;equals()&lt;/code&gt; in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Besides getters, DRL also allows MVEL expressions that translate into getters in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, this DRL has &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-drl hljs&quot; data-lang=&quot;drl&quot;&gt;rule &quot;Don&apos;t assign Ann&quot;
    when
        Employee(name == &quot;Ann&quot;)
    then ...
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the Java variant for the exact same constraint has &lt;code&gt;getName()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; instead:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;constraintFactory.from(Employee.class)
        .filter(employee -&amp;gt; employee.getName().equals(&quot;Ann&quot;))
        .penalize(&quot;Don&apos;t assign Ann&quot;, ...);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_advanced_functions&quot;&gt;Advanced functions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Constraint Streams API allows us to add syntactic sugar
and powerful new concepts, specifically tailored to help you build complex constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just to highlight one of these, let&amp;#8217;s take a look at the powerful &lt;code&gt;groupBy&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2020/04/07/constraintStreamGroupBy.png&quot; alt=&quot;constraintStreamGroupBy&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similar to an SQL &lt;code&gt;GROUP BY&lt;/code&gt; operator or a Java 8 Stream &lt;code&gt;Collector&lt;/code&gt;,
it supports &lt;code&gt;sum()&lt;/code&gt;, &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;countDistinct()&lt;/code&gt;, &lt;code&gt;min()&lt;/code&gt;, &lt;code&gt;max()&lt;/code&gt;, &lt;code&gt;toList()&lt;/code&gt;
and even custom functions, again without loss of incremental score calculation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_future_work_for_constraint_streams&quot;&gt;Future work for Constraint Streams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First off, a big thanks to &lt;a href=&quot;https://github.com/triceo&quot;&gt;Lukáš Petrovický&lt;/a&gt;
 for all his work on Constraints Streams!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But this is just the beginning.
We envision more advanced functions,
such as load balancing/fairness methods
to make such constraints easier to implement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Right now, our first priority is to make it easier to unit test constraints in isolation.
Think Test Driven Design. Stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2019/12/18/HowToPlanAndOptimizeASecretSanta.html</id>
            <title type="html">How to plan (and optimize) a Secret Santa</title>
            <updated>2019-12-18T00:00:00+00:00</updated>
            <published>2019-12-18T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2019/12/18/HowToPlanAndOptimizeASecretSanta.html" rel="alternate" type="text/html" />
            <author>
                <name>Christopher-Chianelli</name>
            </author>
                    <category term="use case"></category>
            <summary type="html">
                 Many workplaces host a &amp;#8220;Secret Santa&amp;#8221;, where each employee gets assigned a coworker whom they need to buy a present for. This fosters good relations between the employees and brings ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many workplaces host a &amp;#8220;Secret Santa&amp;#8221;, where each employee gets assigned
a coworker whom they need to buy a present for. This fosters good relations
between the employees and brings them closer together. But what about global
companies, where coworkers may be many miles apart? Ideally, we want
employees who are further apart to give gifts to each other, since they
are the ones who probably know the least about each other. Let&amp;#8217;s optimize
it with OptaPlanner!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_constraints&quot;&gt;The Constraints&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most obvious constraints is that everyone should get a gift.
Or phrased a little differently: no one should get multiple gifts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is how one would create this constraint in OptaPlanner using the
constraint streams API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;private Constraint sameReceiverConflict(ConstraintFactory constraintFactory) {
    return constraintFactory
            .fromUniquePair(SecretSantaAssignment.class,
                    Joiners.equal(SecretSantaAssignment::getReceiver))
            .penalize(&quot;Same Receiver&quot;, HardMediumSoftBigDecimalScore.ONE_HARD);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we need to reward assignments where the gifter and the receiver
are farther apart. Here&amp;#8217;s how we do it with constraint streams:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;private Constraint largerDistanceAward(ConstraintFactory constraintFactory) {
    return constraintFactory
            .from(SecretSantaAssignment.class)
            .rewardConfigurableBigDecimal(&quot;secretFactor&quot;, &quot;Larger Distance Award&quot;,
                              (m) -&amp;gt; BigDecimal.valueOf(Location.calculateDistanceBetween(m.getGifter().getLocation(),
                                                                       m.getReceiver().getLocation())));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s try solving with just these two constraints to see what we get:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/12/18/noPairChecking.png&quot; alt=&quot;noPairChecking&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alice is assigned to Daniella, Daniella is assigned to Alice&amp;#8230;&amp;#8203;
Bob is assigned to Austin, Austin is assigned to Bob&amp;#8230;&amp;#8203;
Something about this solution seems odd; it only has assignments
where the gifter is the receiver&amp;#8217;s recipient!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_happened&quot;&gt;What happened?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not odd at all, but rather a consequence of how we defined
our constraints: if Alice is the person furthest from Daniella, then
Daniella is most likely the person furthest from Alice. This means our
&quot;Larger Distance Award&quot; constraint will strongly favor pairs of employees.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is this a bad thing? Yes, it is: imagine if Alice got a $100 gift from
Daniella, but only got Daniella a $10 gift. Alice will probably feel bad,
and Daniella will feel disappointed. If Alice gave the $10 gift to Bob
and Bob gave a $30 gift to Daniella, Alice wouldn&amp;#8217;t feel bad and
Daniella wouldn&amp;#8217;t feel cheated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s add this constraint (using, you guessed it, constraint streams!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;private Constraint giftPair(ConstraintFactory constraintFactory) {
    return constraintFactory
            .fromUniquePair(SecretSantaAssignment.class,
            // Here, we are joining (a,b) where:
            // a.gifter = b.receiver
            // and
            // a.receiver = b.gifter
            // In other words: a&apos;s gifter is getting a gift from b&apos;s gifter
            // and b&apos;s gifter is getting a gift from a&apos;s gifter, which mean
            // we have a pair!
                            Joiners.equal(SecretSantaAssignment::getGifter, SecretSantaAssignment::getReceiver),
                            Joiners.equal(SecretSantaAssignment::getReciever, SecretSantaAssignment::getGifter))
            .penalize(&quot;Gifter-Receiver Cycle&quot;, HardMediumSoftBigDecimalScore.ONE_MEDIUM);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This constraint should be a medium constraint - we want to avoid it if possible,
but it isn&amp;#8217;t as much of a dealbreaker as someone not receiving a gift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s try solving again after adding the gift pair constraint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/12/18/withPairChecking.png&quot; alt=&quot;withPairChecking&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Much better; we end up with two chains: Alice gives to Austin who gives
to Bob who gives to Charlie who gives to Alice; and Dina gives to
Dennis who gives to Daniella who gives to Julian who gives to Dina.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is just the beginning of what you can do to optimize Secret Santa using
OptaPlanner. For instance, you can do the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow each person to input a list of people who they do not want to be
Secret Santa for, and add a medium constraint that ensures they are not
the Secret Santa for anyone in their list (if possible).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a secret factor that sightly influences distance so people cannot
find out who their Secret Santa is just by running OptaPlanner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pin a Secret Santa assignment to force OptaPlanner to use that assignment
in its solution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn more about OptaPlanner by visting &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;the OptaPlanner website&lt;/a&gt; and
find the full Secret Santa OptaPlanner example &lt;a href=&quot;https://github.com/Christopher-Chianelli/SecretSanta&quot;&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2019/10/22/ExploringTheNewOptaWebEmployeeRosteringBackend.html</id>
            <title type="html">Exploring the new OptaWeb Employee Rostering backend</title>
            <updated>2019-10-22T00:00:00+00:00</updated>
            <published>2019-10-22T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2019/10/22/ExploringTheNewOptaWebEmployeeRosteringBackend.html" rel="alternate" type="text/html" />
            <author>
                <name>jucui</name>
            </author>
                    <category term="employee rostering"></category>
                    <category term="coding"></category>
                    <category term="algorithm"></category>
                    <category term="production"></category>
            <summary type="html">
                 To help you solve employee shift rostering challenges, we maintain an end-to-end web application called OptaWeb Employee Rostering. It is a web application that optimizes shift scheduling for ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To help you solve employee shift rostering challenges,
we maintain an end-to-end web application called OptaWeb Employee Rostering.
It is a web application that optimizes shift scheduling for maximum efficiency and fairness for employees.
Scheduling guards is very different from scheduling nurses, therefore you can fork and customize the code to your requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, we rewrote the frontend and backend in modern technologies.
In this post I&amp;#8217;ll give an overview of the new backend and the key features that were added.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start with the problem we&amp;#8217;re trying to solve.
Here is a visual overview of the &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/employeeRostering.html&quot;&gt;Employee Rostering problem&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/employeeRosteringValueProposition.png&quot; alt=&quot;employeeRosteringValueProposition&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many company workplaces need solutions to this problem, from hospitals to call centers.
There are many factors to consider when assigning shifts to employees, such as required skills, employee availabilities, and employee fairness.
So how do we find the best solution?
With &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;, of course!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_domain_model&quot;&gt;Domain Model&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we dive into the code, we first need a domain model.
A domain model represents the entities (Java objects) and how they relate with other entities in the application.
It tells us the behaviour of the objects and how they change during solving.
Here&amp;#8217;s a class diagram of the Employee Rostering model, where employees are nurses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/optaWebEmployeeRosteringClassDiagram.png&quot; alt=&quot;optaWebEmployeeRosteringClassDiagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of the blocks above represents a Java entity object in our application, which are saved in a database for solving.
We use JPA (Hibernate) as our persistence layer.
The arrows show how certain entities map to others, so changing one during the solving process may affect another.
The &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; symbols on the arrows represent a many-to-one mapping of the entities in the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a simple example of the &lt;code&gt;Skill&lt;/code&gt; entity:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Entity
@Table(uniqueConstraints = @UniqueConstraint(columnNames = {&quot;tenantId&quot;, &quot;name&quot;}))
public class Skill {

    @NotNull
    @Size(min = 1, max = 120)
    @Pattern(regexp = &quot;^(?!\\s).*(?&amp;lt;!\\s)$&quot;, message = &quot;Name should not contain any leading or trailing whitespaces&quot;)
    private String name;

    @SuppressWarnings(&quot;unused&quot;)
    public Skill() {

    }

    public Skill(Integer tenantId, String name) {
        super(tenantId);
        this.name = name;
    }

    // Getters and setters
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Java object stores the name of the skill and the id of the Tenant (the user, such as a hospital or a call center) it belongs to.
The &lt;code&gt;@Entity&lt;/code&gt; annotation represents a table in the JPA database, where each instance of the &lt;code&gt;Skill&lt;/code&gt; entity has its own row.
The &lt;code&gt;@Table&lt;/code&gt; annotation specifies the columns of the table (we&amp;#8217;ll see this in the next section).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_h2_database&quot;&gt;H2 Database&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To test the database, we use the H2 Database Console to run SQL statements and view the saved entities on a user interface.
Here&amp;#8217;s an example of executing a SQL statement that selects every &lt;code&gt;Skill&lt;/code&gt; entity:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/skillsConsole.png&quot; alt=&quot;skillsConsole&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the autogenerated demo data is saved in the H2 database when the application starts up.
This console makes it convenient to test and modify the in-memory database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, so having data generated on startup is nice for demoing the application.
But what if we wanted to use the application in production and start with no demo data?
To solve this, we added a feature that gives the user the option to start the application with no persisted data.
This was implemented by adding an additional system property called &lt;code&gt;InitialData&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public static final String INITIAL_DATA_PROPERTY = &quot;optaweb.generator.initial.data&quot;;

public enum InitialData {
    EMPTY,
    DEMO_DATA // default
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;code&gt;RosterGenerator.java&lt;/code&gt;, we use the system property to determine whether to generate data or not.
Notice that if &lt;code&gt;initialData = EMPTY&lt;/code&gt;, the method returns without generating any data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;SystemPropertiesRetriever.InitialData initialData = SystemPropertiesRetriever.determineInitialData();

switch (initialData) {
    case EMPTY:
        return;
    case DEMO_DATA:
        // Generate demo data
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To configure the system properties and start with an empty database, add this to the &lt;code&gt;applications.properties&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-properties hljs&quot; data-lang=&quot;properties&quot;&gt;optaweb.generator.initial.data=EMPTY&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This sets the &lt;code&gt;optaweb.generator.initial.data&lt;/code&gt; system property for the application when it starts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_rest_api&quot;&gt;REST API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s actually interact with the backend application.
An easy way to test the REST API is to use the Swagger framework, which OptaWeb Employee Rostering supports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example, here are the &lt;code&gt;Tenant&lt;/code&gt; REST methods shown in the Swagger user interface:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/tenantMethods.png&quot; alt=&quot;tenantMethods&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we can see, each method has documentation, the relative path URL, and its corresponding HTTP request.
The Swagger UI makes it very easy to test any method in the backend.
Let&amp;#8217;s say we wanted a list of all the Tenants in the application.
We start by selecting the corresponding method to display the method details:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/getTenantsMethod.png&quot; alt=&quot;getTenantsMethod&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the &lt;code&gt;Example Value&lt;/code&gt; field shows a sample value of a Tenant list, serialized to JSON format.
We see that each Tenant contains the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;version&lt;/code&gt; fields, which are saved in the database whenever a Tenant is added.
Also note the &lt;code&gt;Try it out&lt;/code&gt; button in the top right corner.
We can use it to send HTTP requests with ease for testing purposes.
Let&amp;#8217;s try it out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/executeGetTenants.png&quot; alt=&quot;executeGetTenants&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sending the GET request returns all the saved Tenants.
We can see them in JSON format above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nice, we just sent our first HTTP request!
But the Employee Rostering application does much more than just getting entities.
There are methods for creating, deleting, and updating various entities (remember the Domain Model above), which the application uses to modify the database, as well as methods that interact with the OptaPlanner API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s try a more interesting method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/solveMethod.png&quot; alt=&quot;solveMethod&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This method is the core of the OptaWeb Employee Rostering application.
It starts the OptaPlanner solver that assigns work shifts to employees for a specific Tenant.
The solver uses heuristics and algorithms to find the most optimal solution under time and resource constraints.
To learn more about how OptaPlanner finds better solutions, read about &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#localSearch&quot;&gt;Local Search&lt;/a&gt; in the OptaPlanner docs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s try out the solver for the Tenant with &lt;code&gt;id = 1&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/executeSolverMethod.png&quot; alt=&quot;executeSolverMethod&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After clicking &lt;code&gt;Execute&lt;/code&gt;, the solver starts evaluating possible solutions for arranging shifts, and finds the shift roster with the best score.
The score is calculated using the Drools business constraint rules that we configured in the application.
As the algorithm finds new solutions, the engine evaluates the score of each solution and compares it with the score of the current best solution.
If the score is higher, the new solution becomes the new best solution.
Notice the log messages in the console during solving:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/10/22/solverLog.png&quot; alt=&quot;solverLog&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice the medium score when solving starts versus when solving ends.
In our application, each unassigned shift has a score of &lt;code&gt;-1medium&lt;/code&gt;, which means for every unassigned shift a particular solution has, the medium score of that solution would decrease by 1.
In this case, the starting shift arrangement had a medium score of -660, so there were 660 shifts that were not assigned to any employee.
After solving, the shift arrangement had a medium score of 0, which means every shift was assigned to an employee.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congratulations!
You&amp;#8217;ve just found an optimal employee shift arrangement given the time and business constraints for this Tenant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the process of migrating the OptaWeb Employee Rostering backend application to another Java framework,
we added and used various tools for better user and developer experience.
The most notable tools included the H2 Database Console for JPA persistence testing,
adding the &lt;code&gt;InitialData&lt;/code&gt; system property to configure the startup demo data, and Swagger for REST API testing and documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, we don&amp;#8217;t expect users to interact with the application through H2 and Swagger, that&amp;#8217;s what a user interface is for!
The UI for this application was implemented in the Employee Rostering Frontend Application, written in React.js.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;To build and run the application for yourself, check out the &lt;a href=&quot;https://github.com/kiegroup/optaweb-employee-rostering&quot;&gt;source code&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part3.html</id>
            <title type="html">Mechanic scheduling (part 3) - Simulation and load testing</title>
            <updated>2019-05-09T00:00:00+00:00</updated>
            <published>2019-05-09T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2019/05/09/RHSummit2019Part3.html" rel="alternate" type="text/html" />
            <author>
                <name>rsynek</name>
            </author>
                    <category term="production"></category>
                    <category term="benchmark"></category>
                    <category term="algorithm"></category>
            <summary type="html">
                 The goals of the RH Summit 2019 Keynote Demo was showing multiple Red Hat products working together on OpenShift, demonstrating how OptaPlanner can schedule mechanics repair machines in an ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goals of the RH Summit 2019 Keynote Demo was showing multiple Red Hat products working together on OpenShift,
demonstrating how OptaPlanner can schedule mechanics repair machines in an assembly line, with the audience sensing
machine damage by shaking their smartphones.
And of course, not to fail in front of several thousands of people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To learn more about the Summit Keynote Demo, &lt;a href=&quot;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part1.html&quot;&gt;read Geoffrey&amp;#8217;s article&lt;/a&gt;.
Also, to find out more about the architecture and the integration with other technologies,
&lt;a href=&quot;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part2.html&quot;&gt;read Musa&amp;#8217;s article&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application is running and working. But how are players going to enjoy it? Is the game going to be boring,
as no machine will ever get close to being broken? Or is it going to be the opposite - will players break all
the machines in just a few seconds?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Actually, if too many players connect, will the entire platform fall apart?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The answer to all these questions is: &lt;em&gt;measure, don&amp;#8217;t guess!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_simulations&quot;&gt;Simulations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How much damage can a single mechanic handle? And how much can two mechanics handle? In this section, we are going
to run simulations to find that out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/assemblyLine.png&quot; alt=&quot;assemblyLine&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each machine has its location and there are different distances between individual machines, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;A-&amp;gt;B is 665.08 px

B-&amp;gt;C is 235.82 px

C-&amp;gt;J is 2486.04 px&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fixing all the machines takes 62 seconds (10 * 2 seconds for fixing each machine plus a travelling time between
them using the shortest path).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_uniform_distribution&quot;&gt;Uniform distribution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uniform distribution means hitting every machine with the same amount of damage, which is proportional to the total
damage and number of machines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;damagePerSecond = totalDamagePerSecond / numberOfMachines;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See how a single mechanic behaves under the uniform damage distribution:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/shortestPath.png&quot; alt=&quot;shortestPath&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mechanic starts running in a loop over time.
With two mechanics this happens too and they start dancing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019OptaPlanner2MechanicsDance.gif&quot; alt=&quot;RHSummit2019OptaPlanner2MechanicsDance&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_life_does_not_know_such_a_thing_as_a_uniform_distribution&quot;&gt;Life does not know such a thing as a uniform distribution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A pessimist is just a realist provided with more accurate information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start with the worst-case scenario. Distance between machines C-J is the longest one, so we&amp;#8217;re going to assume
that these two machines are hit double the damage than any other machines. Mechanics are going to have quite a busy day,
running from one side of the factory to the other one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For any machine other than C or J:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;damagePerSecond = totalDamagePerSecond / (numberOfMachines + 2);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For machines C and J:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;damagePerSecond = 2 * totalDamagePerSecond / (numberOfMachines + 2);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: as the goal is to deal double damage to machines C and J, these machines have to be counted into number of machines
twice. As a result, the total damage per second is split into 12 equal parts, from which C and J receive 4 parts
and remaining 8 machines get one part each.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/uniform_2_mech_16_damage.png&quot; alt=&quot;uniform 2 mech 16 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/cj_2_mech_16_damage.png&quot; alt=&quot;cj 2 mech 16 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s a difference!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, there is no need to be pessimistic every day. Normal (Gaussian) distribution represents “reality” better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;damagePerSecondBase = totalDamagePerSecond / numberOfMachines;
deviation = random.nextGaussian() * damagePerSecondBase / 2;
damagePerSecond = damagePerSecondBase + deviation;

if (damagePerSecond &amp;lt; 0) {
   damagePerSecond = 0;
} else if (damagePerSecond &amp;gt; damagePerSecondBase * 2) {
   damagePerSecond = damagePerSecondBase * 2;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/uniform_2_mech_16_damage.png&quot; alt=&quot;uniform 2 mech 16 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/gauss_2_mech_16_damage.png&quot; alt=&quot;gauss 2 mech 16 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, machines can get easily broken with normal (Gaussian) distribution, although 16% damage per second under uniform
distribution was perfectly possible to fix by just two mechanics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s now find where the limits are with the normal (Gaussian) distribution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/gauss_1_mech_8_damage.png&quot; alt=&quot;gauss 1 mech 8 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/gauss_1_mech_10_damage.png&quot; alt=&quot;gauss 1 mech 10 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;8% damage per second didn&amp;#8217;t lead to any single machine being broken. With 10% damage per second, after 100 seconds,
there is the first broken machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a look what amount of damage two mechanics can handle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/gauss_2_mech_12_damage.png&quot; alt=&quot;gauss 2 mech 12 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/gauss_2_mech_16_damage.png&quot; alt=&quot;gauss 2 mech 16 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;16% damage per second seems not be manageable, even that the first failure occurred just after 3 minutes of simulation.
Let&amp;#8217;s add one more mechanic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/gauss_3_mech_24_damage.png&quot; alt=&quot;gauss 3 mech 24 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/gauss_3_mech_32_damage.png&quot; alt=&quot;gauss 3 mech 32 damage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;8% damage per second seems to be manageable by a single mechanic. Does it mean that 2 mechanics can handle 16% of damage?
The simulation figures above show they could not. On the other hand, 3 mechanics were able to fix machines receiving
24% damage per second. In contrast to the uniform damage distribution, with the normal distribution, we cannot just
blindly hope that the amount of damage mechanics can handle is proportional to their count.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_lessons_learned_from_load_testing&quot;&gt;Lessons learned from load testing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The purpose of load testing is to tell if the system under test is able to handle certain load. If there are
requirements regarding expected throughput, these can be verified based on the results. With no such requirements,
load testing can help to find limits of the system in terms of load.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me share in the lines below what we learned from load testing and what issues we had to fix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Load testing of this application was realized by sending simulated motion data to Node.js component from multiple pods
in the cluster. During several sessions, with people responsible for individual components and technologies of the demo
attending, we tested from 100 to 3000 simulated players being connected and sending motion data to the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the very first load tests, we noticed that mechanics take way too long fixing broken machines. Something went wrong,
as the period of time to fix a machine had been set to 2 seconds. Apparently, OptaPlanner was not able to dispatch
mechanics on time. Looking at the Grafana dashboard, that shows resource utilisation in the OpenShift cluster, revealed
that OptaPlanner pod had only 0.6 CPU, which means it got only 60% of a single CPU core&amp;#8217;s execution time.
Taking into account that the OptaPlanner itself usually kept entire CPU core busy and there was another thread
in the pod - a keeper of time, responsible for timely sending events to other components, 0.6 CPU was definitely not enough.
It turned out that our OpenShift template didn&amp;#8217;t declare any resource requests, so OptaPlanner pod got just
breadcrumbs - after Tensor Flow and other components took most of the cluster&amp;#8217;s resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Lesson one: always declare your required resources and limits.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, template fixed and ready for another load test! Which only revealed that mechanics were again not being
dispatched on time. What did go wrong this time, we asked ourselves? We had enough CPU and memory resources, but still
we saw the same issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The devil was hidden in Infinispan and also in the way we contacted Infinispan for machines&amp;#8217; health every 40 milliseconds.
Having only 4 infinispan nodes trying to handle all the requests from multiple components didn&amp;#8217;t scale
because of the network traffic. Involving more Infinispan notes did help for the network part of the issue,
as the traffic was balanced between more nodes. Using a separate thread to query for each machine&amp;#8217;s health did
help on OptaPlanner part of the issue, as the timekeeper thread was not blocked anymore, waiting for the information
about machines&amp;#8217; health to be retrieved from Infinispan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Lesson two: despite you&amp;#8217;ve read one hundred times that you should do I/O in separate threads, make sure you do I/O in separate threads.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we are supposed to present such a complex platform in front of several thousands of people, we need to avoid
being surprised. To minimize the risk, we gather as much data as possible to confirm our expectation, our hypothesis.
Both the simulations and load testing proved an invaluable source of information.
They helped us understand what we could expect and built a good level of confidence about what we wanted to show.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me thank the entire team for their great work
and specifically in this part, a big thanks to
Guilherme Baufaker Rego and Ben Browning
for load testing the platform.
And of course, a big thanks to our one and only captain, Burr Sutter,
who can set up a show like no other!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;View the recording of our show:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/FUu4kMc0PL8?rel=0&amp;amp;start=5785&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part2.html</id>
            <title type="html">Mechanic scheduling (part 2) - Architecture and integration</title>
            <updated>2019-05-09T00:00:00+00:00</updated>
            <published>2019-05-09T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2019/05/09/RHSummit2019Part2.html" rel="alternate" type="text/html" />
            <author>
                <name>MusaTalluzi</name>
            </author>
                    <category term="integration"></category>
                    <category term="production"></category>
                    <category term="coding"></category>
            <summary type="html">
                 The more smart devices are connected to the internet, the more in need of smarter systems we are. These systems should monitor, automate and maintain these devices in a robust and efficient way. ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The more smart devices are connected to the internet, the more in need of smarter systems we are.
These systems should monitor, automate and maintain these devices in a robust and efficient way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo, we simulate a factory plant containing multiple pieces of machinery. The system we built monitors these machines
and automatically dispatches mechanics to fix them in a smart way. To learn more about the use case and challenges,
read &lt;a href=&quot;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part1.html&quot;&gt;Part 1 by Geoffrey&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_overall_system_architecture&quot;&gt;Overall system architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;rhdemo2019SystemDiagram.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/rhdemo2019SystemDiagram.png&quot; alt=&quot;rhdemo2019SystemDiagram&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simulate damage source, we created a mobile app whose users signalize damage to machines by shaking their phones.
The shaking data is sent to a web server that filters the bad data using TensorFlow service, then exports resulting
predictions to AMQ streams. These predictions are consumed by Red Hat Integration, which processes the data and puts the result
in Infinispan. Machine healths and mechanics&amp;#8217; states are also stored in Infinispan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, given the data in Infinispan, we need to decide how to schedule repairs optimally to reduce travel time and failure costs.
We used OptaPlanner to do that. OptaPlanner reads machines health from Infinispan, updates the planning problem and sends
new dispatch events back to Infinispan, then the web server gets notified and sends the dispatches to be shown on the dashboard UI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mechanic_scheduling_service_architecture&quot;&gt;Mechanic Scheduling service architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;mechanicSchedulingServiceDiagram.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/mechanicSchedulingServiceDiagram.png&quot; alt=&quot;mechanicSchedulingServiceDiagram&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner&amp;#8217;s goal is to schedule repairs in an optimal way. To accomplish this, it needs to keep track of current machines&amp;#8217; health,
dispatch mechanics and update healths once mechanics are done fixing the machines. There are two pitfalls here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Machines health can be updated thousands of times per second.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The solver can also update its solution thousands of times per second, and it needs some time to produce an optimal solution
so it shouldn&amp;#8217;t be interrupted thousands of times per second to update healths.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, a separate keeper of time thread was used. It submits the planning problem to the solver thread, updates the solution,
submits machines health changes as problemFactChanges to Solver thread, sends mechanic dispatches,
and updates mechanics future visits in Infinispan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;keeperOfTimeVsSolver.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/keeperOfTimeVsSolver.png&quot; alt=&quot;keeperOfTimeVsSolver&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the diagram above, you see the &lt;code&gt;tick&lt;/code&gt; every 40ms. This value was chosen to address the two pitfalls mentioned above.
Let&amp;#8217;s unravel how the Keeper of Time accomplishes scheduling mechanics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the beginning, it creates a new planning problem and submits it to the solver thread to start solving.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every tick (40ms):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update machine healths from Infinispan.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every k ticks it updates machine healths in solver thread.
K is chosen so the interval in which the solver thread updates the health is less than the time it takes a mechanic to fix a machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update current solution (mainly mechanics future visits) so we can have an idea what OptaPlanner is thinking and changing its mind.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a mechanic finishes fixing the machine on hand, update this machine health in infinispan,
dispatch him/her to the next machine and update solver thread with this dispatch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solver thread receives the planning problem, solves it and can be queried for best solution. To learn more about it,
check &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#useTheSolver&quot;&gt;OptaPlanner documentation&lt;/a&gt;.
Below is a class diagram showing how we modelled the mechanic scheduling problem to be solved by OptaPlanner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;mechanicSchedulingClassDiagram.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/mechanicSchedulingClassDiagram.png&quot; alt=&quot;mechanicSchedulingClassDiagram&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_integration_with_infinispan_and_the_dashboard_ui&quot;&gt;Integration with Infinispan and the Dashboard UI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last piece in the puzzle is to ensure that both the UI and OptaPlanner&amp;#8217;s states are consistent.
As mentioned earlier, OptaPlanner sends dispatch events (containing mechanic, machine to be fixed, travel time duration and fix time duration).
Once the keeper of time ticks at a time after a mechanic has finished fixing a machine, it resets the machine health
and dispatches that mechanic to next machine, both updates are sent to Infinispan, where the UI listens to dispatch events
and polls machines health at fixed intervals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might have already guessed what can go wrong here, if the UI gets notified with the dispatch event before it polls
for the full health, the mechanic will start moving away from the machine while its health is still not reset,
this doesn&amp;#8217;t look good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, we introduced “thumbs up” duration, an interval longer than the rate at which both OptaPlanner ticks
and the UI polls Infinispan, as illustrated in the figure below. This ensures that the following sequence of events occurs in order:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;OptaPlanner resets machine health&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI polls the full health and displays it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OptaPlanner sends dispatch event&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI gets notified and mechanic starts moving to next machine&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;mechanicsOverTime.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/mechanicsOverTime.png&quot; alt=&quot;mechanicsOverTime&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In conclusion, the two main challenges in designing this microservices architecture were
adapting the inner workings to accommodate other services&amp;#8217; behaviour and maintaining consistency with other services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To learn more about scaling challenges and the benchmarks as well as the load tests we ran,
read &lt;a href=&quot;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part3.html&quot;&gt;Part 3 by Radovan&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me thank the entire team for their great work
and specifically in this part, a big thanks to
Ryan Emerson, Galder Zamarreno and Christopher Chase
for their help on the Infinispan integration.
And of course, a big thanks to our one and only captain, Burr Sutter,
who can set up a show like no other!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;View the recording of our show:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/FUu4kMc0PL8?rel=0&amp;amp;start=5785&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part1.html</id>
            <title type="html">Mechanic scheduling (part 1) - Can OptaPlanner keep up with a keynote audience of thousands?</title>
            <updated>2019-05-09T00:00:00+00:00</updated>
            <published>2019-05-09T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2019/05/09/RHSummit2019Part1.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="use case"></category>
                    <category term="vehicle routing"></category>
                    <category term="maintenance scheduling"></category>
                    <category term="insight"></category>
            <summary type="html">
                 This year, my team and I participated in the Red Hat Summit keynote. In front of 7000 people, we demonstrated real-time scheduling, reacting on input coming from the audience&amp;#8217;s smartphones. ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year, my team and I participated in the Red Hat Summit keynote.
In front of 7000 people, we demonstrated real-time scheduling,
reacting on input coming from the audience&amp;#8217;s smartphones.
In the past 2 months, we created this application together with the other middleware teams
and under the excellent guidance of Burr Sutter.
It integrates various technologies
such as Android/iPhone accelerometers, OpenShift/Kubernetes, Quarkus,
KNative, TensorFlow, Kafka/Strimzi, Camel, Node.js, Godot, Infinispan, Drools and of course OptaPlanner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We wrote a simulation of a typical manufacturing floor, involving machines at assembly lines.
This led to an interesting conversation when I first showed it to my wife:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8220;Look, darling. This is the keynote demo we&amp;#8217;ve been working on the past few weeks.&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8220;That looks like a video-game&amp;#8230;&amp;#8203; Is that Mario and Luigi running around?&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8220;Well, notice how OptaPlanner optimizes their traveling time so they can spend more time fixing machines.&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8220;Are you really going to show this to 7000 business people?&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8220;Yes, of course. It&amp;#8217;s going to be beautiful.&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is how it turned out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019OptaPlanner2MechanicsDance.gif&quot; alt=&quot;RHSummit2019OptaPlanner2MechanicsDance&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The machines (A-J) suffer attrition, which is detected by movements sensors.
With the help of the audience, we simulate those sensors, by capturing accelerometer data from their phones.
&lt;em&gt;When things go shaky, things go breaky.&lt;/em&gt;
So as the audience shake their phone - or do more complex gestures - their machines receive damage.
Each part of the audience is damaging one machine,
and if the health of their machine drops to zero, it falls apart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, those machines require maintenance before they break, which is where OptaPlanner comes in.
There are only 2 or 3 mechanics to fix them.
And while mechanics are traveling to a machine or fixing it, all machines continue to lose health.
Deciding the order in which to fix them, as damage comes in concurrently, is difficult.
Luckily, OptaPlanner schedules those mechanics for us.
It reacts to health changes in real-time, as shown in this video:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/Y4wyPU_B2gU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_planning_challenge&quot;&gt;The planning challenge&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is only one goal: &lt;em&gt;don&amp;#8217;t let any machine reach 0%&lt;/em&gt;.
This might seem like one simple constraint,
but it&amp;#8217;s actually two adversarial constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fix the most damaged machine first&lt;/strong&gt;,
because that has the highest risk of dying.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To fix machines as quickly as possible, &lt;strong&gt;take the shortest path&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The mechanics are either fixing machines or walking around,
so by reducing their travel time, we increase their productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If this was the only constraint, this would be a Traveling Salesman Problem (TSP).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These 2 constraints are in competition with each other. They lead to different solutions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/mechanicsFixTheWorstMachineFirst.png&quot; alt=&quot;mechanicsFixTheWorstMachineFirst&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s less obvious is how this impacts the &lt;em&gt;makespan&lt;/em&gt;,
which is the amount of time the mechanics need to fix all the machines one time.
A longer makespan reduces productivity:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/mechanicsFixTheWorstMachineFirstMakespan.png&quot; alt=&quot;mechanicsFixTheWorstMachineFirstMakespan&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we ended up having to weigh these two constraints against each other.
We implemented that by penalizing, per machine,
the amount of attrition multiplied by the duration until the machine is fixed.
So the more damage, or the longer it takes to fix a machine,
the less likely that OptaPlanner&amp;#8217;s solution will schedule that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_its_just_a_vehicle_routing_problem&quot;&gt;It&amp;#8217;s just a Vehicle Routing Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the academic Operations Research world, this problem is known as the Vehicle Routing Problem (VRP),
in which we need to send a number of vehicles (such as trucks) to a number of locations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/05/09/mechanicSchedulingIsAVehicleRoutingProblem.png&quot; alt=&quot;mechanicSchedulingIsAVehicleRoutingProblem&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s the same problem, with a few variations on the constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, OptaPlanner is really good at optimizing vehicle routing problems at scale:
&lt;strong&gt;it saves some of our customers hundreds of millions of dollars per year&lt;/strong&gt;
by reducing their overall travel time by 15% or more.
This also heavily reduces their fuel consumption,
decreases their carbon footprint, which is great for the environment too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/vehicleRoutingProblem.html&quot;&gt;Learn more about optimizing VRPs with OptaPlanner&lt;/a&gt;
or take a look at Jiri&amp;#8217;s latest demo of the &lt;a href=&quot;https://github.com/kiegroup/optaweb-vehicle-routing&quot;&gt;optaweb-vehicle-routing&lt;/a&gt; reference architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/ylPEIf7Mc2M?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_real_challenges&quot;&gt;The real challenges&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing this variation of vehicle routing was pretty straightforward at first,
but we faced bigger challenges to get this interactive demonstration running well enough.
After all, we couldn&amp;#8217;t risk that it crashes during the keynote, in front of the audience
(including all our bosses, all the way up to our CEO, Jim Whitehurst).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To learn more about &lt;strong&gt;our architecture and the integration with all those other technologies&lt;/strong&gt;,
&lt;a href=&quot;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part2.html&quot;&gt;read Musa&amp;#8217;s article (part 2)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To learn more about the scaling challenges and &lt;strong&gt;the benchmarks on simulations and load tests we ran&lt;/strong&gt;,
&lt;a href=&quot;https://www.optaplanner.org/blog/2019/05/09/RHSummit2019Part3.html&quot;&gt;read Radovan&amp;#8217;s article (part 3)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run it yourself, download &lt;a href=&quot;https://github.com/rhdemo/2019-demo4-optaplanner&quot;&gt;the source code&lt;/a&gt;
and follow the readme instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me thank the entire team for their great work
and specifically in this part, a big thanks to
Luke Dary, Matthew Carleton, Evan Shortiss and Christopher Chase
for building a beautiful dashboard UI and a great mobile application.
And of course, a big thanks to our one and only captain, Burr Sutter,
who can set up a show like no other!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;View the recording of our show:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/FUu4kMc0PL8?rel=0&amp;amp;start=5785&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2019/03/13/KIEServerOptaPlannerTaskAssignment.html</id>
            <title type="html">KIE Server OptaPlanner Task Assignment</title>
            <updated>2019-03-13T00:00:00+00:00</updated>
            <published>2019-03-13T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2019/03/13/KIEServerOptaPlannerTaskAssignment.html" rel="alternate" type="text/html" />
            <author>
                <name>MusaTalluzi</name>
            </author>
                    <category term="use case"></category>
                    <category term="task assignment"></category>
                    <category term="execution server"></category>
            <summary type="html">
                 KIE Server is a standalone server component that can be used to instantiate and execute rules and processes. In this blog, you will learn how to build an OptaPlanner service that implements ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-wb-es-docs/html_single/#_ch.kie.server&quot;&gt;KIE Server&lt;/a&gt;
is a standalone server component that can be used to instantiate and execute rules and processes.
In this blog, you will learn how to build an OptaPlanner service that implements continuous and real-time planning to solve the
Task Assignment problem and deploy it to the KIE Server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_task_assignment_kjar&quot;&gt;&lt;a href=&quot;https://github.com/kiegroup/kie-server-optaplanner-task-assignment&quot;&gt;Task Assignment KJAR&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.redhat.com/blog/2018/03/14/what-is-a-kjar/&quot;&gt;KJAR&lt;/a&gt; or &amp;#8220;Knowledge JAR&amp;#8221; is a standard JAR file that has
some extra files included (at least a &lt;code&gt;META-INF/kmodule.xml&lt;/code&gt; file). You will build Task Assignment Service as a KJAR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In order to build the KJAR, the project&amp;#8217;s pom.xml needs to have a &lt;code&gt;&amp;lt;packaging&amp;gt;kjar&amp;lt;/packaging&amp;gt;&lt;/code&gt; entry and contains
&lt;code&gt;kie-maven-plugin&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_problem_description&quot;&gt;Problem Description&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assign each task to a spot in an employee’s queue. Each task has a duration which is affected by the employee’s affinity
level with the task’s customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Hard] Skill: Each task requires one or more skill. The employee must possess all these skills.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Soft 0] Critical tasks: Complete critical tasks first, sooner than major and minor tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Soft 1] Minimize makespan: Reduce the time to complete all tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Soft 2] Major tasks: Complete major tasks as soon as possible, sooner than minor tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Soft 3] Minor tasks: Complete minor tasks as soon as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_domain_model&quot;&gt;Domain Model&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;taskAssigningClassDiagram.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2019/03/13/taskAssigningClassDiagram.png&quot; alt=&quot;taskAssigningClassDiagram&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read more on how to
&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#modelAPlanningProblem&quot;&gt;model a planning problem&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_real_time_planning&quot;&gt;&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#realTimePlanning&quot;&gt;Real-time Planning&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As new tasks come in and others start being implemented, the optimal solution might change. OptaPlanner handles such scenarios using
&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#problemFactChange&quot;&gt;ProblemFactChange&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if an employee starts working on a task, tell OptaPlanner to &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/#pinDownPlanningEntities&quot;&gt;pin&lt;/a&gt; this task by sending a &lt;code&gt;PinTaskProblemFactChange&lt;/code&gt;.
Each &lt;code&gt;ProblemFactChange&lt;/code&gt; type is implemented as a class that implements the interface &lt;code&gt;ProblemFactChange&amp;lt;Solution_&amp;gt;&lt;/code&gt;.
In the Task Assignment example, this class can be something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class PinTaskProblemFactChange implements ProblemFactChange&amp;lt;TaskAssigningSolution&amp;gt; {
    ...

    @Override
    public void doChange(ScoreDirector&amp;lt;TaskAssigningSolution&amp;gt; scoreDirector) {
        ...
        scoreDirector.beforeProblemPropertyChanged(toBePinnedTask);
        toBePinnedTask.setPinned(true);
        scoreDirector.afterProblemPropertyChanged(toBePinnedTask);
        ...

        scoreDirector.triggerVariableListeners();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full class can be found &lt;a href=&quot;https://github.com/kiegroup/kie-server-optaplanner-task-assignment/blob/main/task-assignment-kjar/src/main/java/org/kie/server/examples/optaplanner/taskassignment/kjar/domain/realtime/PinTaskProblemFactChange.java&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_solver_configuration&quot;&gt;&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#solverConfiguration&quot;&gt;Solver Configuration&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solver configuration file determines how the solving process works. For a KJAR deployed to a KIE Server and since we are using
Drools for score calculation, use a &lt;code&gt;ksessionName&lt;/code&gt;. This tells the KieContainer where to find the DRL file.
Add an optataskKsession to &lt;code&gt;META-INF/kmodule.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;kbase name=&quot;optataskKBase&quot; packages=&quot;PATH_TO_SOLVER_RESOURCES&quot;&amp;gt;
    &amp;lt;ksession name=&quot;optataskKsession&quot;/&amp;gt;
&amp;lt;/kbase&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And to solver config file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;scoreDirectorFactory&amp;gt;
    &amp;lt;ksessionName&amp;gt;optataskKsession&amp;lt;/ksessionName&amp;gt;
&amp;lt;/scoreDirectorFactory&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that both solver configuration and DRL files need to be in the &lt;code&gt;resources&lt;/code&gt; folder under the path
&lt;code&gt;PATH_TO_SOLVER_RESOURCES&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For real-time planning, set the solver in
&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#daemon&quot;&gt;daemon mode&lt;/a&gt; in order to resume
solving once a problem fact change is added. This is accomplished by adding the following to the solver config file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;daemon&amp;gt;true&amp;lt;/daemon&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_persistence&quot;&gt;Persistence&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since you will be sending and receiving data to/from KIE Server through REST API, you need to tell it how to marshall/unmarshall
this data. Read how OptaPlanner
&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#integrationWithXStream&quot;&gt;marshals a score&lt;/a&gt; using Xstream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner stores all planning entities as objects and references to these objects, which might result in a lot of redundant data
received from the server. In our example, we are using
&lt;a href=&quot;https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations#object-references-identity&quot;&gt;@JsonIdentityInfo&lt;/a&gt;
to avoid such redundancies.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_dependencies&quot;&gt;Dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The minimum required dependencies to build the OptaPlanner service are: optaplanner-core, optaplanner-persistence-xstream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Because you will be using several OptaPlanner modules, it’s recommended to import the optaplanner-bom
in Maven’s &lt;code&gt;dependencyManagement&lt;/code&gt; so that OptaPlanner version is specified only once.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_build_and_deployment&quot;&gt;Build and Deployment&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that you have the KJAR ready, you can deploy it to the KIE Server and perform all planning operations.
You can send HTTP requests to the server using REST API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deployment&quot;&gt;Deployment&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;POST /config&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Through the above endpoint, you can execute various commands on the KIE Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, to create a container running your OptaPlanner service, the request&amp;#8217;s body should be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  commands: [
    {
      &apos;create-container&apos;: {
        &apos;container&apos;: {
          &apos;container-id&apos;: CONTAINER_ID,
          &apos;release-id&apos;: {
            &apos;group-id&apos;: GROUP_ID,
            &apos;artifact-id&apos;: ARTIFACT_ID,
            &apos;version&apos;: VERSION,
          },
        },
      },
    },
  ],
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the GAV in the &lt;code&gt;release-id&lt;/code&gt; object are your KJAR&amp;#8217;s GAV.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_solver_registration&quot;&gt;Solver registration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;PUT /containers/{CONTAINER_ID}/solvers/{SOLVER_ID}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With body:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;{
  &apos;solver-config-file&apos;: &apos;PATH_TO_SOLVER_CONFIG_FILE.xml&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will build a new solver from the xml resource included in the KJAR.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_submit_a_problem&quot;&gt;Submit a problem&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;POST /containers/{CONTAINER_ID}/solvers/{SOLVER_ID}/state/solving&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once a solver is built it will be waiting for a problem to start solving. The body of this request contains the object
annotated as &lt;code&gt;@PlanningSolution&lt;/code&gt;, in the Task Assignment example it will be &lt;code&gt;TaskAssigningSolution&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_query_bestsolution&quot;&gt;Query bestSolution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;GET /containers/{CONTAINER_ID}/solvers/{SOLVER_ID}/bestsolution&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This response body will contain &lt;code&gt;best-solution&lt;/code&gt; object in addition to extra information about the solver status and score.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_submit_a_problemfactchange&quot;&gt;Submit a ProblemFactChange&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;POST /containers/{CONTAINER_ID}/solvers/{SOLVER_ID}/problemfactchanges&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Submits a ProblemFactChange to update the problem the solver is solving. For example if you want to delete
a task the body should be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;problem-fact-change class=&quot;TaDeleteTaskProblemFactChange&quot;&amp;gt;
    &amp;lt;taskId&amp;gt;TO_BE_DELETED_TASK_ID&amp;lt;/taskId&amp;gt;
&amp;lt;/problem-fact-change&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice the use of &lt;code&gt;class&lt;/code&gt; attribute, this is how you tell OptaPlanner service what type of ProblemFactChange you are submitting.
Here &lt;code&gt;TaDeleteTaskProblemFactChange&lt;/code&gt; is an &lt;code&gt;@XStreamAlias&lt;/code&gt; for the &lt;code&gt;DeleteTaskProblemFactChange&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
All the requests above have a base URL &lt;code&gt;&lt;a href=&quot;http://SERVER:PORT/CONTEXT/services/rest/server&quot; class=&quot;bare&quot;&gt;http://SERVER:PORT/CONTEXT/services/rest/server&lt;/a&gt;&lt;/code&gt; and require basic HTTP
Authentication for the role kie-server.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check all the available endpoints &lt;a href=&quot;https://docs.optaplanner.org/7.14.0.Final/optaplanner-wb-es-docs/html_single/#_optaplanner_rest_api&quot;&gt;in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To integrate an OptaPlanner service with your application on KIE Server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Build the service as a KJAR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send an HTTP request to the KIE Server to start a container that runs this service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communicate with the service through the REST API the KIE Server exposes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_related_material&quot;&gt;Related material&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kiegroup/kie-server-optaplanner-task-assignment&quot;&gt;KIE Server OptaPlanner Task Assignment demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-wb-es-docs/html_single/#kie-server-commands-con_kie-apis&quot;&gt;KIE Server and KIE container commands in OptaPlanner&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.optaplanner.org/7.14.0.Final/optaplanner-wb-es-docs/html_single/#_optaplanner_rest_api&quot;&gt;OptaPlanner REST API&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2019/01/17/HowMuchFasterIsJava11.html</id>
            <title type="html">How much faster is Java 11?</title>
            <updated>2019-01-17T00:00:00+00:00</updated>
            <published>2019-01-17T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2019/01/17/HowMuchFasterIsJava11.html" rel="alternate" type="text/html" />
            <author>
                <name>rsynek</name>
            </author>
                    <category term="production"></category>
                    <category term="benchmark"></category>
            <summary type="html">
                 Java 11 was released some time ago, although the majority of developers stay on Java 8. Let&amp;#8217;s see which one of them is faster for OptaPlanner. The best way to find out is of course running ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 11 was released some time ago, although the &lt;a href=&quot;https://www.baeldung.com/java-in-2018&quot;&gt;majority of developers stay on Java 8&lt;/a&gt;.
Let&amp;#8217;s see which one of them is faster for &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;. The best way to find out is
of course running OptaPlanner benchmarks.
This article is a follow-up on &lt;a href=&quot;https://www.optaplanner.org/blog/2014/03/20/HowMuchFasterIsJava8.html&quot;&gt;our similar article for Java 8&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_methodology&quot;&gt;Benchmark methodology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run the benchmark we used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A stable machine without any other computational demanding processes running and with
&lt;code&gt;2 x Intel® Xeon® CPU E5-2609 0 @ 2.4 GHz (8 cores total)&lt;/code&gt; and &lt;code&gt;31.3 GiB&lt;/code&gt; RAM memory, running RHEL 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both G1 and Parallel GC for both Java versions to compare the impact of garbage collection.
Java executed with the parameters &lt;code&gt;-Xmx1536M -server -XX:+UseG1GC&lt;/code&gt; and &lt;code&gt;-Xmx1536M -server -XX:+UseParallelGC&lt;/code&gt; respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both Oracle Java 8:&lt;/p&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;java version &quot;1.8.0_191&quot;
Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and OpenJDK 11:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;openjdk version &quot;11.0.1&quot; 2018-10-16
OpenJDK Runtime Environment 18.9 (build 11.0.1+13)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OptaPlanner &lt;code&gt;7.14.0.Final&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solving a planning problem involves &lt;strong&gt;no IO&lt;/strong&gt; (except a few milliseconds during startup to load the input). &lt;strong&gt;A single
CPU is completely saturated.&lt;/strong&gt; It constantly creates many short-lived objects, and the GC collects them afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each run solves 11 planning problems with OptaPlanner. Each planning problem runs for 5 minutes and starts with a
30 second JVM warm up which is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmarks measure the number of scores calculated per millisecond. Higher is better. Calculating
a score for a proposed planning solution is non-trivial: it involves many calculations, including checking for
conflicts between every entity and every other entity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_executive_summary&quot;&gt;Executive summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Java 11, the average improvement is &lt;strong&gt;16.1%&lt;/strong&gt; for G1 and &lt;strong&gt;4.5%&lt;/strong&gt; for Parallel GC. Although Parallel GC is oriented towards
throughput, whereas G1 focuses rather on low-latency garbage collection, the significant improvement of G1 in
Java 11 leads to a direct &lt;a href=&quot;#table3&quot;&gt;comparison of these two garbage collection algorithms&lt;/a&gt;.
For more information about difference between various GC algorithms, please see
&lt;a href=&quot;https://dzone.com/articles/choosing-the-right-gc&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shows that Parallel GC is still the preferred GC for OptaPlanner, as throughput is much more important
for solving optimization problems with OptaPlanner than the latencies introduced by the GC.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_results&quot;&gt;Results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_java_8_vs_java_11&quot;&gt;Java 8 vs. Java 11&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/01/17/Java8VsJava11usingG1GC.svg&quot; alt=&quot;Java8VsJava11usingG1GC&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table id=&quot;table1&quot; class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Score calculation count per second with G1 GC&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;sup&gt;.&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java 8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;38,074&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;34,870&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;113,490&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20,398&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,296&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,840&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7,003&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,437&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,385&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,021&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;812&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OpenJDK 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;41,753&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;41,282&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;166,676&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20,363&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,473&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,466&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,157&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,927&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,772&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,536&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;957&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Difference&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.7%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18.4%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;46.9%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.2%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.1%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.9%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16.5%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.0%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16.2%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25.5%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17.9%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;11&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;16.1%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Almost every data set improves on Java 11 over Java 8 using the G1 garbage collector. On average, there&amp;#8217;s a
16% improvement just by switching to Java 11. A possible explanation for this improvement could be the
&lt;a href=&quot;http://openjdk.java.net/jeps/307&quot;&gt;JEP 307: Parallel Full GC for G1&lt;/a&gt;, introduced in Java 10.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2019/01/17/Java8VsJava11usingParallelGC.svg&quot; alt=&quot;Java8VsJava11usingParallelGC&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Score calculation count per second with Parallel GC&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;sup&gt;.&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JDK&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java 8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;54,990&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;52,514&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;122,611&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13,382&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,821&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,880&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,775&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,170&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,234&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,682&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;880&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OpenJDK 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;54,316&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;50,120&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;140,816&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11,129&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,927&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,071&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,996&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,383&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,336&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,087&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1,125&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Difference&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.2%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.6%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14.8%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-16.8%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.2%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.2%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.5%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.5%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.2%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15.1%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;27.8%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;11&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4.5%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Parallel Garbage Collector, the results are less definite than G1. There is an improvement for some data sets,
while others remain intact or show even a performance drop. However, on average, the Java 11 performs over 4% better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_parallel_gc_vs_g1_gc_on_java_11&quot;&gt;Parallel GC vs. G1 GC on Java 11&lt;/h3&gt;
&lt;table id=&quot;table3&quot; class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. Comparison of score calculation count per second on Java 11 with Parallel GC and G1 GC being used&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Course scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Nurse rostering&lt;sup&gt;.&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java 11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;200c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;800c&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;B10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;c8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;s3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;m1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mh1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nl14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OpenJDK 11 Parallel GC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;54,316&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;50,120&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;140,816&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11,129&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,927&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,071&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,996&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6,383&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,336&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3,087&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1,125&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OpenJDK 11 G1 GC&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;41,753&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;41,282&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;166,676&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20,363&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4,473&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,466&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8,157&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5,927&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,772&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2,536&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;957&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Difference&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-23.1%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-17.6%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18.4%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;83.0%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-9.2%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-10.0%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-9.3%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-7.1%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-16.9%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-17.8%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-14.9%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;11&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;-2.3%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although G1 GC shows a clear improvement from Java 8, compared to Parallel GC it&amp;#8217;s less beneficial GC strategy
for OptaPlanner on the majority of the data sets. The only exception is Machine Reassignment, which shows that
the G1 OptaPlanner is able to compute score calculation 83% faster.
This applies to Java 8 too, as shown in &lt;a href=&quot;#table1&quot;&gt;Score calculation count per second with G1 GC&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 11 brings additional improvements, which vary across different &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; examples and data sets.
On average, it is 4.5% faster when using Parallel GC and 16.1% faster with G1 GC.
Despite the significant improvement for G1 GC, Parallel GC is still faster for most data sets in this benchmark.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2018/11/19/TruckDodgesStormsWhileKeepingSalesHappy.html</id>
            <title type="html">Red Hat Mobile Portfolio Truck dodges storms while keeping Sales happy with OptaPlanner</title>
            <updated>2018-11-19T00:00:00+00:00</updated>
            <published>2018-11-19T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2018/11/19/TruckDodgesStormsWhileKeepingSalesHappy.html" rel="alternate" type="text/html" />
            <author>
                <name>sudheerchekka</name>
            </author>
                    <category term="use case"></category>
                    <category term="vehicle routing"></category>
            <summary type="html">
                 The Mobile Portfolio Truck is Red Hat’s 18-wheel semi truck bringing enterprise IT solutions to customers which includes demo kiosks and hands-on experience with Red Hat&amp;#8217;s portfolio. Our ...
            </summary>
            <content type="html">
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Mobile Portfolio Truck is Red Hat’s 18-wheel semi truck bringing enterprise IT solutions to customers
which includes demo kiosks and hands-on experience with Red Hat&amp;#8217;s portfolio.
Our goal is to optimize the route of this truck to reach most customers
to maximize revenue opportunity and reduce fuel consumption.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/11/19/mpcTruckRedHat.jpg&quot; alt=&quot;mpcTruckRedHat&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Red Hat sales team work out the logistics with their customers
such as availability dates and location to host the truck at the customer&amp;#8217;s premises to showcase Red Hat’s portfolio.
It is a daunting task to find an optimal schedule for MPC to visit all the customers across North America
based on the customer&amp;#8217;s availability dates, location and revenue opportunity size.
Adding to this already complex problem, is the need to accommodate for last minute customer schedule changes
and any unforeseen weather conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s explore how OptaPlanner, Red Hat&amp;#8217;s Business Optimizer platform, can help solve these planning problems.
Here is a scenario where the MPC is stationed in St. Louis and scheduled
to visit few customers in Florida and North Carolina for the next 2 weeks.
Due to unforeseen weather conditions in the Caribbean region,
MPC cannot make that trip and need to quickly come up with a new schedule
to maximize the revenue opportunities in other regions
with limited resources such as labor, fuel and other constraints
such as customer&amp;#8217;s availability dates, opportunity size and location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We built a mobile application (deployed on &lt;a href=&quot;https://www.openshift.com/&quot;&gt;OpenShift Container Platform&lt;/a&gt;) for account sales reps
to request MPC for their customers.
The prototype of this mobile application has a pre-configured list of accounts with its locations
and availability date to host MPC.
All the submitted requests are processed and stored in the underlying in-memory datastore (Red Hat Data Grid).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/11/19/mpcRequestForm.png&quot; alt=&quot;mpcRequestForm&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The backend application consists of multiple services also deployed on OpenShift.
One of the services receive the MPC requests from the mobile application,
process the data and stores in Red Hat Data Grid.
Another service is the OptaPlanner service which is configured with various hard and soft constraints
using Red Hat Decision Manager based business rules.
These constraints include MPC need to take break during night and weekends,
drive only certain number of hours in a day, maximize revenue opportunity, visit all accounts.
Here is the screenshot of the dashboard application displaying the MPC requests from the mobile application
and the starting location of MPC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/11/19/mpcTruckSchedule1.png&quot; alt=&quot;mpcTruckSchedule1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On clicking the &lt;em&gt;Find Optimal Route&lt;/em&gt; button, the underlying OptaPlanner service pulls the truck request data
from Data Grid and computes an optimal route based on the configured constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/11/19/mpcTruckSchedule2.png&quot; alt=&quot;mpcTruckSchedule2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The pins in the map are numbered indicating the truck stops based on the computed optimal route.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;, we were able to solve a planning problem of truck&amp;#8217;s schedule
by maximizing sales revenue opportunity, reducing fuel and labor costs under constraints such as dates, location and driving times.&lt;/p&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2018/08/21/UnitTestingConstraintsWithBusinessInputFromExcelOrLibreOffice.html</id>
            <title type="html">Unit testing constraints with business input from Excel or LibreOffice</title>
            <updated>2018-08-21T00:00:00+00:00</updated>
            <published>2018-08-21T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2018/08/21/UnitTestingConstraintsWithBusinessInputFromExcelOrLibreOffice.html" rel="alternate" type="text/html" />
            <author>
                <name>MusaTalluzi</name>
            </author>
                    <category term="use case"></category>
                    <category term="conference scheduling"></category>
            <summary type="html">
                 The business experts explain the business constraints to us, the developers. But how can we be sure that we understood them correctly? Or worse, how can we test that they agree among themselves ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The business experts explain the business constraints to us, the developers. But how can we be sure that we understood
them correctly? Or worse, how can we test that they agree among themselves once the constraints are formalized?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, there&amp;#8217;s one great way to do that: JUnit tests populated by &lt;code&gt;*.xlsx&lt;/code&gt; data. We allow them to recreate a small subset of
the solution in Excel/LibreOffice and let them decide how many constraints match.
Then our JUnit tests check if our constraint implementations adhere to those requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_traditional_unit_tests&quot;&gt;Traditional unit tests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/conferenceScheduling.html&quot;&gt;Conference Scheduling example&lt;/a&gt;,
to test room conflict constraint (hard penalty per pair of talks in the same room in overlapping timeslots) write:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Test
public void roomConflict() {
    TalkType talkType = new TalkType(0L, &quot;type1&quot;);
    Talk talk1 = new Talk(1L)
            .withTalkType(talkType)
            .withSpeakerList(Collections.emptyList())
            .withRequiredRoomTagSet(Collections.emptySet())
            ...
    Talk talk2 = new Talk(2L)
            ...
    LocalDateTime start1 = LocalDateTime.of(2018, 1, 1, 9, 0);
    LocalDateTime end1 = LocalDateTime.of(2018, 1, 1, 10, 0);
    LocalDateTime start2 = LocalDateTime.of(2018, 1, 1, 9, 30);
    LocalDateTime end2 = LocalDateTime.of(2018, 1, 1, 10, 30);
    LocalDateTime start3 = LocalDateTime.of(2018, 1, 1, 10, 0);
    LocalDateTime end3 = LocalDateTime.of(2018, 1, 1, 11, 0);
    Timeslot slot1 = new Timeslot(1L)
            .withTalkTypeSet(Collections.singleton(talkType))
            .withStartDateTime(start1)
            .withEndDateTime(end1);
    Timeslot slot2 = new Timeslot(2L)
            ...
    Timeslot slot3 = new Timeslot(3L)
            ...
    Room room1 = new Room(1L)
            .withTalkTypeSet(Collections.singleton(talkType))
            .withUnavailableTimeslotSet(Collections.emptySet());
    ConferenceSolution solution = new ConferenceSolution(1L)
            .withTalkTypeList(Collections.singletonList(talkType))
            ...
    scoreVerifier.assertHardWeight(ROOM_CONFLICT, 0, solution);
    // Talks in same room without overlapping time slots
    talk1.withRoom(room1).withTimeslot(slot1);
    talk2.withRoom(room1).withTimeslot(slot3);
    scoreVerifier.assertHardWeight(ROOM_CONFLICT, 0, solution);
    // Talks in same room with overlapping time slots
    talk2.withTimeslot(slot2);
    scoreVerifier.assertHardWeight(ROOM_CONFLICT, -10, solution);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to test room conflict, you need to initialize two talks, three timeslots and one room.
However, the previous snippet of code is too long for such a simple unit test, most of the boilerplate code is for
initializing required fields for the conference solution that you do not need for the unit test, and you must do that for every single unit test.
For more complex constraints, it gets too cumbersome to write traditional unit tests and reason about them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_unit_tests_in_xlsx_files&quot;&gt;Unit tests in &lt;code&gt;xlsx&lt;/code&gt; files&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to avoid initializing unwanted fields, you can take advantage of &lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/main/optaplanner-examples/src/main/java/org/optaplanner/examples/conferencescheduling/persistence/ConferenceSchedulingXlsxFileIO.java&quot;&gt;ConferenceSchedulingXlsxFileIO&lt;/a&gt;
to initialize them for you, and only write what you use in that test or in other tests in the same spreadsheet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To test room conflict using an &lt;code&gt;xlsx&lt;/code&gt; file, create three timeslots, two talks and one room:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;xlsxUnitTestingTimeslots.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/08/21/xlsxUnitTestingTimeslots.png&quot; alt=&quot;xlsxUnitTestingTimeslots&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;xlsxUnitTestingTalks.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/08/21/xlsxUnitTestingTalks.png&quot; alt=&quot;xlsxUnitTestingTalks&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;xlsxUnitTestingRooms.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/08/21/xlsxUnitTestingRooms.png&quot; alt=&quot;xlsxUnitTestingRooms&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you initialize the required fields, create a separate sheet for every score verification of each constraint.
For example, these 2 sheets check the room conflict constraint:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;xlsxUnitTestingRoomConflict1.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/08/21/xlsxUnitTestingRoomConflict1.png&quot; alt=&quot;xlsxUnitTestingRoomConflict1&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;xlsxUnitTestingRoomConflict2.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/08/21/xlsxUnitTestingRoomConflict2.png&quot; alt=&quot;xlsxUnitTestingRoomConflict2&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In every test sheet (blue color), specify the constraint package, constraint name, description of current test scenario
and expected score. Then assign the talks to rooms and timeslots to visualize them easily.
Note that you do not need to list all the timeslots and rooms declared in Timeslots and Rooms sheets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of writing unit tests in code, business experts can specify how they want the constraints to be matched in
an Excel/LibreOffice file. Developers then implement the constraints to pass these tests. This provides a more efficient way of
communication between developers and domain experts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To test score rules in an &lt;code&gt;xlsx&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;List all the required fields for your tests in the setup sheets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For every score verification, create a separate blue test sheet with the constraint package, constraint name and expected score.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List only the fields that you want to use for the corresponding rule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;em&gt;testFileName&lt;/em&gt; in &lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/main/optaplanner-examples/src/test/java/org/optaplanner/examples/conferencescheduling/optional/score/ConferenceSchedulingConstraintsXlsxTest.java&quot;&gt;ConferenceSchedulingConstraintsXlsxTest&lt;/a&gt; and run the test file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_related_material&quot;&gt;Related material&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org/blog/2018/02/19/SchedulingVoxxedDaysZurich2018.html&quot;&gt;Scheduling Voxxed Days Zurich 2018 with OptaPlanner&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/R0JizNdxEjU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2018/07/25/HowToDefeatGerrymanderingAndCreateFairElections.html</id>
            <title type="html">How to defeat gerrymandering and create fair elections</title>
            <updated>2018-07-25T00:00:00+00:00</updated>
            <published>2018-07-25T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2018/07/25/HowToDefeatGerrymanderingAndCreateFairElections.html" rel="alternate" type="text/html" />
            <author>
                <name>jgoldsmith613</name>
            </author>
                    <category term="use case"></category>
            <summary type="html">
                 Over the years, politicians have redrawn electoral voting lines to gain an unfair advantage. This has led to district boundaries with shapes that have no obvious pattern or reason other than ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the years, politicians have redrawn electoral voting lines to gain an unfair advantage.
This has led to district boundaries with shapes that have no obvious pattern or reason other than political gain.
When districts are redrawn you can sway an election&amp;#8217;s results without changing a single voter’s mind.
Can OptaPlanner draw fair electoral boundaries and save democracy?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gerrymandering hits the headlines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;How gerrymandering has skewed Virginia&amp;#8217;s congressional delegation&lt;/em&gt; - Roanoke Times&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What Extreme Partisan Gerrymandering Could Mean For 2018 Midterms&lt;/em&gt; - NPR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Don&amp;#8217;t let politicians choose their voters&lt;/em&gt; - USA Today&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is easy to criticize boundary lines and claim gerrymandering, but it is a difficult topic to solve,
especially when humans with their own motives pick the boundaries of the legislative borders.
Should a &amp;#8220;fair&amp;#8221; district include an equal mix of underrepresented racial groups?
Do you define borders based on competitiveness of party lines? Should geography constrain borders?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using OptaPlanner we can treat drawing congressional districts as an optimization problem.
Obviously our constraints could also be a point of political tension,
but at least with software our constraints can be public and not hidden behind politicians private motives.
For the sake of this experiment with OptaPlanner, I am only taking into account two constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Equalize the population count across districts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make the districts as compact as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_north_carolina_example&quot;&gt;North Carolina Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;North Carolina has been one of the states with recent court cases around this topic.
Here is the district map both before and after they redrew the districts to try to make it seem fair
(&lt;a href=&quot;https://en.wikipedia.org/wiki/North_Carolina%27s_congressional_districts&quot;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/25/NorthCarolinaDistricts2013-2016.png&quot; alt=&quot;NorthCarolinaDistricts2013 2016&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/25/NorthCarolinaDistricts2017-2018.png&quot; alt=&quot;NorthCarolinaDistricts2017 2018&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While it does seem like it did get better, there are still seemingly random shapes in the 2018 map, that do not seem fair.
For example &lt;strong&gt;look at the pink district 4 in the middle of the map&lt;/strong&gt;.
It almost seems like two separate areas snaking between other districts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is OptaPlanner&amp;#8217;s result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/25/NorthCarolinaDistrictsOptaPlanner.png&quot; alt=&quot;NorthCarolinaDistrictsOptaPlanner&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The shapes in this image are much more regular.
The small blocks you see are based of the US 2010 decennial census.
There are about 8000 of them in North Carolina and they are the Planning Entity in this example, with the Planning Variable being just an integer 1-13 representing the districts.
The average population in each district is about 714,000 people.
Each district in this example is about plus or minus 2,000 from each other.
Depending on how we want to weight the constraints, we can make the population in each district closer to the average.
To get this good of an answer, the problem was run for about 6 minutes.
&lt;a href=&quot;https://github.com/jgoldsmith613/NC_Gerrymandering/&quot;&gt;Take a look at the source code.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are definitely still a lot of improvements to be made to this solution,
but all of this was done in a few days work as a side project.
With some more time, maybe one day &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; can solve this contentious political issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2018/07/03/AGiantLeapForwardWithMultithreadedIncrementalSolving.html</id>
            <title type="html">A giant leap forward with multithreaded incremental solving</title>
            <updated>2018-07-03T00:00:00+00:00</updated>
            <published>2018-07-03T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2018/07/03/AGiantLeapForwardWithMultithreadedIncrementalSolving.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="algorithm"></category>
                    <category term="benchmark"></category>
            <summary type="html">
                 OptaPlanner finally supports multithreaded incremental solving. The speedup is spectacular. Even with just a few CPU cores, it triples the score calculation speed. See the results below. To ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner finally supports &lt;em&gt;multithreaded incremental solving&lt;/em&gt;.
&lt;strong&gt;The speedup is spectacular. Even with just a few CPU cores, it triples the score calculation speed.&lt;/strong&gt;
See the results below. To activate it, a single extra line in the configuration suffices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.redhat.com/browse/PLANNER-76&quot;&gt;The original feature request&lt;/a&gt; stems from 2007.
Throughout the years, step by step, we diligently prepared the internal architecture for it.
So now, after 10 years, we fully support it from &lt;code&gt;7.9.0.Final&lt;/code&gt; onwards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But why did it take so long to implement?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a look at the requirements for multithreaded incremental solving:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Horizontally scale an algorithm across CPUs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;#8217;t ruin the speedup of incremental score calculation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runs must be reproducible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_horizontally_scale_an_algorithm_across_cpus&quot;&gt;Horizontally scale an algorithm across CPUs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several ways to use multiple threads without doing real multithreaded solving:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multitenancy&lt;/strong&gt;: Solve multiple datasets, one per thread.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Works since the first OptaPlanner version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Doesn&amp;#8217;t do horizontal scaling on 1 dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi bet solving&lt;/strong&gt;: Solve one dataset in multiple ways, completely independent of each other. Take the best result.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Works since the first OptaPlanner version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s usually a waste of resources: use the Benchmarker during development instead to find the best algorithm in advance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Doesn&amp;#8217;t scale horizontally: the best result is marginally better than a single-threaded result and takes equally long.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Partitioned Search&lt;/strong&gt;: Split up one dataset and solve each one separately.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fully supported since OptaPlanner 7.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scales horizontally at an expensive trade-off of solution quality,
because &lt;a href=&quot;https://www.optaplanner.org/blog/2014/03/03/CanMapReduceSolvePlanningProblems.html&quot;&gt;partitioning excludes optimal solutions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But none of these are real parallel heuristics, as shown in the bottom right corner below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/03/multiThreadingStrategies.png&quot; alt=&quot;multiThreadingStrategies&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In real multithreaded solving, we solve 1 dataset, without partitioning,
by offloading heavy calculations of 1 algorithm (which could be a composition of multiple algorithms)
to multiple threads on separate CPU cores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In OptaPlanner&amp;#8217;s Construction Heuristics and Local Search,
the most CPU-expensive work is calculating the score of a move.
For example in Tabu Search, each step (the outer iteration) evaluates around a 1000 moves.
That&amp;#8217;s measured as the &lt;em&gt;score calculation speed&lt;/em&gt;.
It usually varies between 1k evaluated moves per second and 500k evaluated moves per second.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Multithreaded solving is just a matter of distributing the move evaluations of a step across multiple threads.&lt;/em&gt;
That&amp;#8217;s straightforward. There are even a few users that did this (most notably a space agency supplier), by hacking our code.
But they didn&amp;#8217;t see a performance gain. Quite the opposite actually (except with an easy score calculator).
Those changes broke incremental score calculation.
&lt;strong&gt;Multithreaded solving is easy. But multithreaded &lt;em&gt;incremental&lt;/em&gt; solving is hard.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_dont_ruin_the_speedup_of_incremental_score_calculation&quot;&gt;Don&amp;#8217;t ruin the speedup of incremental score calculation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ah, this brings us to incremental score calculation. The key to performance.
It is the rocket science at the heart of OptaPlanner that brings massive scalability.
And&amp;#8201;&amp;#8212;&amp;#8201;for the few that have seen them&amp;#8201;&amp;#8212;&amp;#8201;the cause of the notorious score corruption exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is incremental score calculation?
For each move, we calculate the score of the solution state after applying that move.
With non-incremental score calculation, the entire score is calculated from scratch.
But with incremental score calculation, we only calculate the delta, as shown below.
That&amp;#8217;s far more efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/03/incrementalScoreCalculationEmployeeRostering.png&quot; alt=&quot;incrementalScoreCalculationEmployeeRostering&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To put this in perspective: an incremental score calculator on a vehicle routing problem with 1000 locations,
is theoretically around 500 times faster than a non-incremental score calculator.
&lt;strong&gt;To offset the loss of an incremental solver on a dataset of a 1000 planning entities,
a multithreaded non-incremental solver would need around 500 CPU cores (in theory).&lt;/strong&gt;
In practice, the numbers vary, but the gain of incremental solving always outweighs the gain of multithreaded solving.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, now, we can have our cake and eat it too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each incremental score calculator is inherently single threaded,
so each move thread has its own score calculator and its own solution state.
Cloning either is too expensive.
To evaluate a move on a move thread, with incremental score calculation,
we must reuse the score calculator of the previous evaluation.
This implies that the working solution must be in the exact same state to begin with.
But because the outer step iterations change the solution state constantly,
the move threads must sync up with the main solver thread after every step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s similar to any real-time multiplayer game (such as StarCraft),
in which multiple hosts need to sync up to show the same game state,
but can&amp;#8217;t afford to transmit the entire game state for every change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As soon as one thread goes out of sync, all calculations of that thread are corrupted,
and the entire system is affected.
But through a well-designed orchestration of concurrent components
(and multi-day test runs), we prevent race conditions. And it works. Like a charm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, the threads must be able to send moves to each other,
even if it&amp;#8217;s only to share the winning move.
This too, posed a challenge. &lt;em&gt;OptaPlanner is an object-oriented constraint solver&lt;/em&gt;,
so its decision variables can be any valid Java type (not just booleans, numbers and floats), such as &lt;code&gt;Employee&lt;/code&gt; or &lt;code&gt;Foo&lt;/code&gt;.
Those variables can sit in any domain class (called planning entities), such as &lt;code&gt;Shift&lt;/code&gt; or &lt;code&gt;Bar&lt;/code&gt;.
The move instances reference those class instances. When a solution gets cloned to initiate a move thread,
those planning entities, such as &lt;code&gt;Shift&lt;/code&gt; get cloned too.
So when a move from thread A gets sent to thread B, OptaPlanner rebases the move on the solution state of thread B.
This replaces the references from the move instance to thread A&amp;#8217;s solution state
with the equivalent references of thread B&amp;#8217;s solution state. Pretty nifty.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_runs_must_be_reproducible&quot;&gt;Runs must be reproducible&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reproducibility is king. The ability to run the same dataset through OptaPlanner twice
and get the exact same result after the same number of steps (and at every step), is worth its weight in gold.
To lose that, would make debugging, issue tracking and production audits extremely difficult.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The inherent unpredictable nature of thread execution order on multi-core machines, makes reproducibility an interesting requirement.
Combine that with the reliance of many optimization algorithms on a seeded random number generator (which is not thread-safe),
for a real challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But we did it. We have 100% reproducibility. This involves several ingenious mechanisms, such as
using a main seeded random to generate a seeded random per thread,
generating a predictable number of selected, buffered moves (because move generation often relies on the random generator too)
and reordering evaluated moves in their originally selected order when they come back from the move threads.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_configuration&quot;&gt;The configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multithreaded incremental solving is easy to activate.
Just add a &lt;code&gt;&amp;lt;moveThreadCount&amp;gt;&lt;/code&gt; line in your solver config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;solver&amp;gt;
  &amp;lt;moveThreadCount&amp;gt;4&amp;lt;/moveThreadCount&amp;gt;
  ...
&amp;lt;/solver&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This basically donates 4 extra CPU cores to the solver.
Use &lt;code&gt;AUTO&lt;/code&gt; to have OptaPlanner deduce it automatically.
Optionally, specify a &lt;code&gt;&amp;lt;threadFactoryClass&amp;gt;&lt;/code&gt; for environments that don&amp;#8217;t like arbitrary thread creation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It combines with every other feature, including other multithreading strategies (such as multitenancy, Partitioned Search, &amp;#8230;&amp;#8203;),
if you have enough CPU cores to pull it off.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_benchmarks&quot;&gt;The benchmarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_methodology&quot;&gt;Methodology&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using optaplanner-benchmark, I ran a set of macro benchmarks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On a 64-bit &lt;strong&gt;8-core&lt;/strong&gt; Intel i7-4790 desktop with 32GB physical RAM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using OpenJDK 1.8.0_171 on Linux.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With the JVM max heap (&lt;code&gt;-Xmx&lt;/code&gt;) set to 4GB.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I also tried 2GB and those results were worse, especially for a higher number of move threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So when increasing the number of move threads, it&amp;#8217;s important to increase the max memory too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With logging set to &lt;code&gt;info&lt;/code&gt; logging.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I also tried &lt;code&gt;debug&lt;/code&gt; logging and those results were clearly worse (because the faster it runs, the more debug logging it does).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s recommended to &lt;a href=&quot;https://www.optaplanner.org/blog/2015/02/23/HowFastIsLogging.html&quot;&gt;avoid debug logging in production&lt;/a&gt; anyway.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With score DRL.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I also tried with the incremental Java calculator and those results had more moves per second,
but a lower relative gain per move thread (due to higher congestion).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 minutes per dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_results_on_the_vehicle_routing_problem_vrp&quot;&gt;Results on the vehicle routing problem (VRP)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are the results on different VRP datasets for a First Fit Decreasing (the Construction Heuristic)
followed by Tabu Search (the Local Search). Higher is better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/03/multithreadedSolvingVrpTabuSearch.png&quot; alt=&quot;multithreadedSolvingVrpTabuSearch&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The blue bar is the traditional, single-threaded OptaPlanner.
It has an average score calculation speed of &lt;code&gt;26,947&lt;/code&gt; moves per second.
That goes up to &lt;code&gt;45,565&lt;/code&gt; with 2 move threads, to &lt;code&gt;80,757&lt;/code&gt; with 4 move threads and to &lt;code&gt;88,410&lt;/code&gt; with 6 move threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;So by donating more CPU cores to OptaPlanner, it uses a fraction of the time to reach the same result.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On other Local Search algorithms, such as Late Acceptance, we see similar results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/03/multithreadedSolvingVrpLateAcceptance.png&quot; alt=&quot;multithreadedSolvingVrpLateAcceptance&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Late Acceptance is a fast stepping algorithm (especially in the beginning), which implies that it has fewer moves per step.
Yet, it has a similar relative speed gain for the Vehicle Routing Problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also see a slight reduction of the relative speed gain on the biggest dataset with 2750 VRP locations,
but I suspect this might be because the 4GB max heap memory is too low for it to function at full efficiency.
I&amp;#8217;ll investigate this further.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_results_on_nurse_rostering&quot;&gt;Results on nurse rostering&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also ran benchmarks on the nurse rostering use case, but with a JVM max heap (&lt;code&gt;-Xmx&lt;/code&gt;) set to 2GB.
Here I tried Tabu Search, Simulated Annealing and Late Acceptance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/03/multithreadedSolvingNurseRosteringTabuSearch.png&quot; alt=&quot;multithreadedSolvingNurseRosteringTabuSearch&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/03/multithreadedSolvingNurseRosteringSimulatedAnnealing.png&quot; alt=&quot;multithreadedSolvingNurseRosteringSimulatedAnnealing&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/07/03/multithreadedSolvingNurseRosteringLateAcceptance.png&quot; alt=&quot;multithreadedSolvingNurseRosteringLateAcceptance&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In all 3 case, we see a welcome speed gain, but Tabu Search (a slow stepping algorithms) has a bigger relative gain
than the others (which are fast stepping algorithms).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In any case, it&amp;#8217;s clear that &lt;em&gt;your mileage may vary&lt;/em&gt;, depending on the use case and other factors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_future_improvements&quot;&gt;Future improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we increase the number of move threads or decrease the time to evaluate a single move on one thread,
we see a higher congestion on the inter-thread communication queues, leading to a lower relative scalability gain.
There are several ways to deal with that and we&amp;#8217;ll be investigating such internal improvements in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;All your CPU are belong to OptaPlanner.&lt;/em&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/All_your_base_are_belong_to_us&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With a single extra configuration line, &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; can reach the same high-quality solution in a fraction of the time.
If you have CPU cores to spare, of course.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2018/05/23/BehindTheScenesOfRedHatSummitScheduling.html</id>
            <title type="html">Behind the scenes of Red Hat Summit 2018 scheduling</title>
            <updated>2018-05-23T00:00:00+00:00</updated>
            <published>2018-05-23T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2018/05/23/BehindTheScenesOfRedHatSummitScheduling.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="use case"></category>
                    <category term="conference scheduling"></category>
            <summary type="html">
                 Earlier this month, Red Hat organized its annual Summit conference in San Francisco for more than 7000 attendees. As Jim Whitehurst explained in his opening keynote, OptaPlanner optimized ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Earlier this month, Red Hat organized its annual Summit conference in San Francisco for more than 7000 attendees.
As &lt;a href=&quot;https://youtu.be/r8e4bT0-zhU?t=1m47s&quot;&gt;Jim Whitehurst explained in his opening keynote&lt;/a&gt;,
OptaPlanner optimized attendee experience by scheduling all of the 325 non-keynote sessions.
Let&amp;#8217;s take a look behind the scenes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_challenge_in_theory&quot;&gt;The challenge (in theory)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few weeks after the CFP closed and the program group decided which talks to accepts,
Arrie Brown (main coordinator of Summit, the business expert) and me (the technical expert) started the automatic scheduling.
So for everyone wondering why your brilliant talk wasn&amp;#8217;t accepted: &lt;em&gt;it&amp;#8217;s not OptaPlanner&amp;#8217;s fault!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, it had to assign a timeslot and room to each talk.
So for everyone wondering why your brilliant talk didn&amp;#8217;t get a better time: &lt;em&gt;it is OptaPlanner&amp;#8217;s fault!&lt;/em&gt;
My own talk was on the last timeslot of the first day, from 16:30 until 17:15.
Traitor. 12 years of dedication to its code and this how it repays me?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyway, given this kind of input:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/05/23/summitConferenceScheduling_0.png&quot; alt=&quot;summitConferenceScheduling 0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We generated this kind of output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/05/23/summitConferenceScheduling_1.png&quot; alt=&quot;summitConferenceScheduling 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Seems easy, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, there&amp;#8217;s a long list of constraints.
For starters, there are 5 different talk types (Breakout, Panel, Birds of a Feather, Lab, Workshops, Mini Session)
with different durations and different room requirements.
A 2 hour Lab doesn&amp;#8217;t fit in a 20 minute timeslot. But a Mini Session does.
And that&amp;#8217;s just the tip of the constraints iceberg:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/05/23/summitConferenceScheduling_2.png&quot; alt=&quot;summitConferenceScheduling 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Arrie created a Google Docs spreadsheet, uploaded the data from the CFP application
and ran it through the &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/conferenceScheduling.html&quot;&gt;OptaPlanner Conference Scheduling example&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_challenge_in_practice&quot;&gt;The challenge (in practice)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_pigeonhole_principle&quot;&gt;The pigeonhole principle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first road bump we encountered was that OptaPlanner couldn&amp;#8217;t find a feasible schedule.
It scheduled dozens of talks in the same room at the same time. That&amp;#8217;s a problem.
&lt;a href=&quot;https://www.optaplanner.org/blog/2018/02/19/SchedulingVoxxedDaysZurich2018.html&quot;&gt;Voxxed Zurich 2018&lt;/a&gt;,
didn&amp;#8217;t run into this problem, but it only had 1 talk type.
It took us a while to figure out the cause, due to talk type complexity, the sheer size of the conference and especially the poor visualization at the time.
I even got side-tracked on trying to fix the feasibility, instead of prioritizing the visualization first, for more insight into the result quality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once I improved the visualization in the output spreadsheet, the real problem surfaced immediately:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pigeonhole_principle&quot;&gt;not enough pigeonholes&lt;/a&gt;.
There were 325 talks and only 300 slots to put them in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We added the 2 missing rooms in the input data and got our first feasible solution.
But we didn&amp;#8217;t just want a workable schedule: we wanted a great schedule.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_garbage_in_garbage_out&quot;&gt;Garbage in, garbage out&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CFP application is pretty lenient.
During the first import of that data into the OptaPlanner example,
Arrie already fixed a bunch of data issues (such as duplicate speaker rows), to get the spreadsheet to import successfully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But not all data issues can be detected automatically.
For example, it doesn&amp;#8217;t automatically know which talks are popular and need a bigger room.
Two rooms were already tagged as &lt;code&gt;Large&lt;/code&gt;.
Based on experience of previous editions, she identified 7 talks that required such a &lt;code&gt;Large&lt;/code&gt; room.
She configured their &lt;code&gt;Required room tags&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This kind of experienced, human input is vital to get a good schedule.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_tweaking_the_constraint_weights&quot;&gt;Tweaking the constraint weights&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attendees should be able to see all talks that they want to see.
Ideally, we&amp;#8217;d use the mobile app data to know which talks each attendee bookmarked,
but that data is only available shortly before the conference, long after the schedule is published.
That&amp;#8217;s a catch 22.
Instead, we avoid scheduling talks at the same time if they cover the same theme track, sector or content,
so every attendee can attend all talks on a particular topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These 3 tag types (theme track, sector, content) are not equally important.
Some conflicts (2 talks at the same time) are worse than others.
There are only a few theme tracks and each talk has multiple of those, so theme track conflicts are common.
Therefore, a conflict of 2 talks with the &lt;em&gt;Containers&lt;/em&gt; theme track is less important
than a conflict of 2 talks with the &lt;em&gt;Kubernetes&lt;/em&gt; content tag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The spreadsheet defines the weight of each constraint,
allowing to simulate the impact of different weights on the generated schedule.
After some tweaking, avoiding content tag conflicts ended up 50 times as important as avoiding theme track conflicts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some content tags were very common. For example, 46 talks included the content tag &lt;code&gt;OpenShift&lt;/code&gt;.
Others only appeared 2 or 3 times.
I&amp;#8217;d now argue that a conflict with 2 (out of 46) &lt;code&gt;OpenShift&lt;/code&gt; talks is less important
than a conflict with the &lt;em&gt;only&lt;/em&gt; 2 talks of another content tag.
So for next year, we might want to normalize the impact of every content tag, based on the number of talks with that tag.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pinning_as_a_workaround&quot;&gt;Pinning as a workaround&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was one talk that gave us grief, at least for a moment: 2 breakout sessions that were part 1 and part 2 of the same talk.
Part 2 needed to start when part 1 ended, in the same room.
To proceed quickly, we just &lt;em&gt;pinned&lt;/em&gt; those 2 session manually to a room and timeslots, before solving it. It worked.
OptaPlanner scheduled all other talks while respecting those 2 pre-set assignments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, if we do see more of these 2-part session cases, I&amp;#8217;ll add a new constraint to deal with it properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We generated a good, fair schedule with the &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/conferenceScheduling.html&quot;&gt;OptaPlanner Conference Scheduling example&lt;/a&gt;.
Similar to Google Search, we only had to define what we want, not how to look for it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we got the input data in a good state, we just had to press the &lt;em&gt;Solve&lt;/em&gt; button and give it some time.
Next year, we&amp;#8217;ll be able to reuse this code.
If you&amp;#8217;re organizing a conference, take a look at the video below to try it out yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_related_video&quot;&gt;Related video&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/R0JizNdxEjU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2018/02/19/SchedulingVoxxedDaysZurich2018.html</id>
            <title type="html">Scheduling Voxxed Days Zurich 2018 with OptaPlanner</title>
            <updated>2018-02-19T00:00:00+00:00</updated>
            <published>2018-02-19T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2018/02/19/SchedulingVoxxedDaysZurich2018.html" rel="alternate" type="text/html" />
            <author>
                <name>mariofusco</name>
            </author>
                    <category term="use case"></category>
                    <category term="conference scheduling"></category>
            <summary type="html">
                 My name is Mario Fusco and I’m honored to be the Program Committee Lead of Voxxed Days Zurich for the third year in a row. Reading, evaluating, discussing, and selecting from the 200+ proposals ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My name is Mario Fusco and I’m honored to be the Program Committee Lead of &lt;a href=&quot;https://voxxeddays.com/zurich/&quot;&gt;Voxxed Days Zurich&lt;/a&gt;
for the third year in a row.
Reading, evaluating, discussing, and selecting from the 200+ proposals that arrive every year
is a long and challenging process. I must admit, I largely underestimated the task the first year I started doing it.
It’s necessary to evaluate not only the quality of every submission, but also how they fit together.
In the end, the worst part is having to reject so many incredible proposals because there are a limited number of slots.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, once all the talks have been selected and all the approval and rejection emails have been sent,
the process is still not complete. Now it is time to take all the accepted talks and schedule the actual program.
Even for a moderate sized event like &lt;a href=&quot;https://voxxeddays.com/zurich/&quot;&gt;Voxxed Days Zurich&lt;/a&gt;
(the conference lasts only one day and we have four parallel tracks), this is not a trivial task.
There are many constraints and nice-to-haves that you may need to consider.
For example, some speakers will arrive late in the morning or will have to leave early in the afternoon.
Some talks require different room capacities.
Two talks belonging to the same track must not be scheduled at the same time.
There are many more variables to this process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The past two years I spent an entire Sunday afternoon having one or two whiskeys
(it’s really important to hit the &lt;a href=&quot;https://xkcd.com/323/&quot;&gt;Ballmer peak&lt;/a&gt; during the process),
and moving the talks on an Excel spreadsheet until I reach a situation that is sufficiently satisfying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year I decided to take a different approach.
My colleague, Geoffrey De Smet, is the Project Lead of &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;.
I found out that he was developing, among the many examples already available in his project,
an application to optimize conference scheduling.
Geoffrey recommended that I give it a try and provide him feedback based on my prior experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_setting_up_the_conference_data&quot;&gt;Setting Up the Conference Data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I accepted the challenge and added the talks which were approved by the program committee to a spreadsheet
using the format expected by the conference scheduling application, thus obtaining the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;voxxedZurichExcelOverview.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/02/19/voxxedZurichExcelOverview.png&quot; alt=&quot;voxxedZurichExcelOverview&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, together with the track which each talk belongs to, you can also specify additional tags:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Difficulty of the talk – you may want to assure that less technical attendees will always have at least one interesting talk for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topic – in this case there were a few talks on functional programming belonging to different tracks which shouldn’t be scheduled at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Language of the talk –  in Zurich, all talks are in English, so I don’t have any problems with language.
However, I organize another Voxxed Days event in Ticino, located in the Italian-speaking area of Switzerland.
For this event I want to make sure that both English and Italian-speaking guests will always have a talk that they can attend.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a few other tabs in the spreadsheet that allow you to configure the different rooms for the conference and tag them,
to list all the speakers together with their timing constraints,
and to specify that a talk should be scheduled in a room with a specific tag.
An example of this would be the largest room capacity or the room where talks are being recorded.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_running_optaplanner&quot;&gt;Running OptaPlanner&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have everything configured in the spreadsheet, you’re ready to launch the conference scheduling application
and feed it into the spreadsheet.
Then wait a few seconds, until OptaPlanner has calculated the perfect schedule for your conference.
Note: the time may vary significantly, depending on the dimension of your problem and the number of hard and soft constraints that you set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;voxxedZurichConferenceSchedulingApp.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/02/19/voxxedZurichConferenceSchedulingApp.png&quot; alt=&quot;voxxedZurichConferenceSchedulingApp&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I took the former screenshot while OptaPlanner was still calculating the optimal solution.
Note that the current score displays: -2hard/-50soft.
After a few more seconds, OptaPlanner found the optimal solution reaching a score of 0hard/0soft.
It is possible to export this solution as a second spreadsheet showing the resulting optimal schedule.
In this case the rooms view looks like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;voxxedZurichExcelZoom1.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/02/19/voxxedZurichExcelZoom1.png&quot; alt=&quot;voxxedZurichExcelZoom1&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While in the speakers view, you can figure out with a single glance when and where each speaker will have his/her session:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;voxxedZurichExcelZoom2.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/02/19/voxxedZurichExcelZoom2.png&quot; alt=&quot;voxxedZurichExcelZoom2&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In conclusion, I ended up with a very satisfying schedule which was published to the conference website.
Overall, it’s been a great experience being able to abandon the old completely manual process and give OptaPlanner a try.
It not only allowed me to schedule the entire conference in only a few minutes with minimal effort
(which previously took a half day of headaches), but also enabled me to perform many simulations with different sets of constraints.
Questions like: &amp;#8220;what happens if I want this speaker in a larger room?&amp;#8221;,
or &amp;#8220;could I avoid having these two talks at the same time even if they belong to different tracks?&amp;#8221;,
would have been very difficult with the traditional approach I had been using.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the &lt;a href=&quot;https://cfp-vdz.exteso.com/2018/byday/thursday&quot;&gt;definitive conference schedule&lt;/a&gt; is in place
and all my work as Program Committee Lead is complete.
I’ll be able to enjoy the event and learn as much as possible from the amazing speakers we selected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href=&quot;https://developers.redhat.com/blog/2018/02/19/voxxed-days-zurich-2018/&quot;&gt;developers.redhat.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_related_video&quot;&gt;Related video&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/R0JizNdxEjU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2018/01/09/JavaReflectionButMuchFaster.html</id>
            <title type="html">Java Reflection, but much faster</title>
            <updated>2018-01-09T00:00:00+00:00</updated>
            <published>2018-01-09T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2018/01/09/JavaReflectionButMuchFaster.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="coding"></category>
                    <category term="benchmark"></category>
            <summary type="html">
                 What is the fastest way to read a getter from a Java class without knowing the class at compilation time? Java frameworks often do this. A lot. And it can directly influence their performance. So ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is the fastest way to read a getter from a Java class without knowing the class at compilation time?
Java frameworks often do this. A lot. And it can directly influence their performance.
So let&amp;#8217;s benchmark different approaches, such as reflection, method handles and code generation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_use_case&quot;&gt;The use case&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Presume we have a simple &lt;code&gt;Person&lt;/code&gt; class with a name and an address:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class Person {
   ...

   public String getName() {...}
   public Address getAddress() {...}

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and we want to use frameworks such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://x-stream.github.io/&quot;&gt;XStream&lt;/a&gt;, JAXB or &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt; to serialize instances to XML or JSON.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://hibernate.org/&quot;&gt;JPA/Hibernate&lt;/a&gt; to store persons in a database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; to assign addresses (in case they&amp;#8217;re tourists or homeless).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/01/09/reflectionButFasterUseCase.png&quot; alt=&quot;reflectionButFasterUseCase&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;None of these frameworks know the &lt;code&gt;Person&lt;/code&gt; class.&lt;/em&gt; So they can&amp;#8217;t simply call &lt;code&gt;person.getName()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;   // Framework code
   public Object executeGetter(Object object) {
      // Compilation error: class Person is unknown to the framework
      return ((Person) object).getName();
   }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, the code uses reflection, method handles or code generation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But &lt;em&gt;such code is called an awful lot&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you insert 1000 different persons in a database, JPA/Hibernate probably calls such code 2000 times:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1000 calls to &lt;code&gt;Person.getName()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;another 1000 calls to &lt;code&gt;Person.getAddress()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly, if you write 1000 different persons to XML or JSON, there are likely 2000 calls by XStream, JAXB or Jackson.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, when such code is called x times per second, &lt;strong&gt;its performance matters&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_benchmarks&quot;&gt;The benchmarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using JMH, I ran a set of micro benchmarks using OpenJDK 1.8.0_111 on Linux
on a 64-bit 8-core Intel i7-4790 desktop with 32GB RAM.
The JMH benchmark ran with 3 forks, 5 warmup iterations of 1 second and 20 measurement iterations of 1 second.
All warmup costs are gone: increasing the length of an iteration to 5 seconds has little or no impact on the numbers reported here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source code of &lt;a href=&quot;https://github.com/ge0ffrey/ge0ffrey-presentations/blob/master/code/fasterreflection/fasterreflection-client/src/main/java/be/ge0ffrey/presentations/fasterreflection/client/FasterReflectionClientBenchmark.java&quot;&gt;that benchmark&lt;/a&gt;
is in &lt;a href=&quot;https://github.com/ge0ffrey/ge0ffrey-presentations/tree/master/code/fasterreflection&quot;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_tldr_results&quot;&gt;The TL;DR results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Java Reflection is slow.&lt;/strong&gt; (*)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Java MethodHandles are slow too.&lt;/strong&gt; (*)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generated code with &lt;code&gt;javax.tools.JavaCompiler&lt;/code&gt; is fast.&lt;/strong&gt; (*)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LambdaMetafactory is pretty fast.&lt;/strong&gt; (*)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(*) On the use cases I benchmarked with the workload I used. Your mileage may vary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the devil is in the details.
Let&amp;#8217;s go through the implementations,
to confirm I applied typical magical tricks (such as &lt;code&gt;setAccessible(true)&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_implementations&quot;&gt;Implementations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_direct_access_baseline&quot;&gt;Direct access (baseline)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve used a normal &lt;code&gt;person.getName()&lt;/code&gt; call as the baseline:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public final class MyAccessor {

    public Object executeGetter(Object object) {
        return ((Person) object).getName();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This takes about 2.6 nanoseconds per operation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;Benchmark           Mode  Cnt  Score   Error  Units
===================================================
DirectAccess        avgt   60  2.590 ± 0.014  ns/op&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Direct access is naturally the fastest approach at runtime, with no bootstrap cost.
But it imports &lt;code&gt;Person&lt;/code&gt; at compilation time, so it&amp;#8217;s unusable by every framework.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_reflection&quot;&gt;Reflection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The obvious way for a framework read that getter at runtime, without knowing it in advance,
is through Java Reflection:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public final class MyAccessor {

    private final Method getterMethod;

    public MyAccessor() {
        getterMethod = Person.class.getMethod(&quot;getName&quot;);
        // Skip Java language access checking during executeGetter()
        getterMethod.setAccessible(true);
    }

    public Object executeGetter(Object bean) {
        return getterMethod.invoke(bean);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding &lt;code&gt;setAccessible(true)&lt;/code&gt; call makes these reflection calls faster,
but even then it takes 5.5 nanoseconds per call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;Benchmark           Mode  Cnt  Score   Error  Units
===================================================
DirectAccess        avgt   60  2.590 ± 0.014  ns/op
Reflection          avgt   60  5.275 ± 0.053  ns/op&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Reflection is 104% slower than direct access (so about twice as slow).&lt;/strong&gt;
It also takes longer to warm up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This wasn&amp;#8217;t a big surprise to me,
because when I profile (using sampling) an artificially simple
&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/vehicleRoutingProblem.html&quot;&gt;Traveling Salesman Problem&lt;/a&gt;
with 980 cities in &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;,
the reflection cost sticks out like a sore thumb:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;reflectionTspIncrementalCalculationSamplingProfiler.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/01/09/reflectionTspIncrementalCalculationSamplingProfiler.png&quot; alt=&quot;reflectionTspIncrementalCalculationSamplingProfiler&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_methodhandles&quot;&gt;MethodHandles&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MethodHandle was introduced in Java 7 to support &lt;em&gt;invokedynamic&lt;/em&gt; instructions.
According to the Javadoc, it&amp;#8217;s &lt;em&gt;a typed, directly executable reference to an underlying method.&lt;/em&gt;
Sounds fast, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public final class MyAccessor {

    private final MethodHandle getterMethodHandle;

    public MyAccessor() {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        // findVirtual() matches signature of Person.getName()
        getterMethodHandle = lookup.findVirtual(Person.class, &quot;getName&quot;, MethodType.methodType(String.class))
            // asType() matches signature of MyAccessor.executeGetter()
            .asType(MethodType.methodType(Object.class, Object.class));
    }

    public Object executeGetter(Object bean) {
        return getterMethodHandle.invokeExact(bean);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well unfortunately, &lt;strong&gt;MethodHandle is even slower than reflection&lt;/strong&gt; in OpenJDK 8.
It takes 6.1 nanoseconds per operation, so 136% slower than direct access.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;Benchmark           Mode  Cnt  Score   Error  Units
===================================================
DirectAccess        avgt   60  2.590 ± 0.014  ns/op
Reflection          avgt   60  5.275 ± 0.053  ns/op
MethodHandle        avgt   60  6.100 ± 0.079  ns/op&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;code&gt;lookup.unreflectGetter(Field)&lt;/code&gt; instead of &lt;code&gt;lookup.findVirtual(&amp;#8230;&amp;#8203;)&lt;/code&gt; has no notable difference.
I do hope that MethodHandle will become as fast as direct access in future Java versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_static_methodhandles_update_on_2018_01_11&quot;&gt;Static MethodHandles (update on 2018-01-11)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also ran a benchmark with MethodHandle in a static field.
The JVM can do more magic with static fields, &lt;a href=&quot;https://shipilev.net/jvm-anatomy-park/17-trust-nonstatic-final-fields/&quot;&gt;as explained by Aleksey Shipilёv&lt;/a&gt;.
Aleksey and John O&amp;#8217;Hara correctly pointed out that the original benchmark didn&amp;#8217;t use static fields correctly,
so I fixed that. Here are the amended results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;Benchmark           Mode  Cnt  Score   Error  Units
===================================================
DirectAccess        avgt   60  2.590 ± 0.014  ns/op
MethodHandle        avgt   60  6.100 ± 0.079  ns/op
StaticMethodHandle  avgt   60  2.635 ± 0.027  ns/op&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, &lt;strong&gt;a static MethodHandle is as fast as direct access, but it&amp;#8217;s still useless&lt;/strong&gt;, unless we want to write code like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public final class MyAccessors {

    private static final MethodHandle handle1; // Person.getName()
    private static final MethodHandle handle2; // Person.getAge()
    private static final MethodHandle handle3; // Company.getName()
    private static final MethodHandle handle4; // Company.getAddress()
    private static final MethodHandle handle5; // ...
    private static final MethodHandle handle6;
    private static final MethodHandle handle7;
    private static final MethodHandle handle8;
    private static final MethodHandle handle9;
    ...
    private static final MethodHandle handle1000;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If our framework deals with a domain class hierarchy with 4 getters, it would fill up the first 4 fields.
However, if it deals with 100 domain classes with 20 getters each, totaling 2000 getters,
it will crash due to a lack of static fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Besides, if I wrote code like this, even first year students would come tell me that &lt;em&gt;I am doing it wrong&lt;/em&gt;.
Static fields shouldn&amp;#8217;t be used for instance variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_generated_code_with_javax_tools_javacompiler&quot;&gt;Generated code with javax.tools.JavaCompiler&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Java, it&amp;#8217;s possible to compile and run generated Java code at runtime.
So with the &lt;code&gt;javax.tools.JavaCompiler&lt;/code&gt; API, we can generate the direct access code at runtime:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public abstract class MyAccessor {

    // Just a gist of the code, the full source code is linked in a previous section
    public static MyAccessor generate() {
        final String String fullClassName = &quot;x.y.generated.MyAccessorPerson$getName&quot;;
        final String source = &quot;package x.y.generated;\n&quot;
                + &quot;public final class MyAccessorPerson$getName extends MyAccessor {\n&quot;
                + &quot;    public Object executeGetter(Object bean) {\n&quot;
                + &quot;        return ((Person) object).getName();\n&quot;
                + &quot;    }\n&quot;
                + &quot;}&quot;;
        JavaFileObject fileObject = new ...(fullClassName, source);

        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        ClassLoader classLoader = ...;
        JavaFileManager javaFileManager = new ...(..., classLoader)
        CompilationTask task = compiler.getTask(..., javaFileManager, ..., singletonList(fileObject));
        boolean success = task.call();
        ...
        Class compiledClass = classLoader.loadClass(fullClassName);
        return compiledClass.newInstance();
    }

    // Implemented by the generated subclass
    public abstract Object executeGetter(Object object);

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full source code is much longer and available in &lt;a href=&quot;https://github.com/ge0ffrey/ge0ffrey-presentations/tree/master/code/fasterreflection&quot;&gt;this GitHub repository&lt;/a&gt;.
For more information on how to use &lt;code&gt;javax.tools.JavaCompiler&lt;/code&gt;,
take a look at &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=2027052&amp;amp;seqNum=2&quot;&gt;page 2 of this article&lt;/a&gt;
or &lt;a href=&quot;https://www.ibm.com/developerworks/library/j-jcomp/index.html&quot;&gt;this article&lt;/a&gt;.
In Java 8, it requires the &lt;code&gt;tools.jar&lt;/code&gt; on the classpath, which is there automatically in a JDK installation.
In Java 9, it requires the module &lt;code&gt;java.compiler&lt;/code&gt; in the modulepath.
Also, proper care needs to be taken that it doesn&amp;#8217;t generate a &lt;code&gt;classlist.mf&lt;/code&gt; file in the working directory
and that it uses the correct &lt;code&gt;ClassLoader&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Besides &lt;code&gt;javax.tools.JavaCompiler&lt;/code&gt;, similar approaches can use ASM or CGLIB,
but those infer maven dependencies and might have different performance results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In any case, &lt;strong&gt;the generated code is as fast as direct access&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;Benchmark           Mode  Cnt  Score   Error  Units
===================================================
DirectAccess        avgt   60  2.590 ± 0.014  ns/op
JavaCompiler        avgt   60  2.726 ± 0.026  ns/op&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So when I ran that
&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/vehicleRoutingProblem.html&quot;&gt;Traveling Salesman Problem&lt;/a&gt;
again in &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;,
this time using code generation to access planning variables, &lt;em&gt;the score calculation speed was 18% faster overall&lt;/em&gt;.
And the profiling (using sampling) looks much better too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;codeGenerationTspIncrementalCalculationSamplingProfiler.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2018/01/09/codeGenerationTspIncrementalCalculationSamplingProfiler.png&quot; alt=&quot;codeGenerationTspIncrementalCalculationSamplingProfiler&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that in normal use cases, that performance gain will hardly be detectable,
due to massive CPU needs of a realistically complex score calculation&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One downside of code generation at runtime is that it infers a noticeable bootstrap cost (as discussed later),
especially if the generated code isn&amp;#8217;t compiled in bulk.
So I am still hoping that some day MethodHandles will get as fast as direct access,
just to avoid that bootstrap cost and the dependency pain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_lambdametafactory_update_on_2018_01_11&quot;&gt;LambdaMetafactory (update on 2018-01-11)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Reddit, I received an eloquent suggestion to use &lt;code&gt;LambdaMetafactory&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2018/01/09/lambdaMetafactoryRedditResponse.png&quot; alt=&quot;lambdaMetafactoryRedditResponse&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Getting &lt;code&gt;LambdaMetafactory&lt;/code&gt; to work on a non-static method turned out to be challenging
(due to lack of documentation and StackOverflow questions), but it does work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public final class MyAccessor {

    private final Function getterFunction;

    public MyAccessor() {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        CallSite site = LambdaMetafactory.metafactory(lookup,
                &quot;apply&quot;,
                MethodType.methodType(Function.class),
                MethodType.methodType(Object.class, Object.class),
                lookup.findVirtual(Person.class, &quot;getName&quot;, MethodType.methodType(String.class)),
                MethodType.methodType(String.class, Person.class));
        getterFunction = (Function) site.getTarget().invokeExact();
    }

    public Object executeGetter(Object bean) {
        return getterFunction.apply(bean);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And it looks good: &lt;strong&gt;LambdaMetafactory is almost as fast as direct access.&lt;/strong&gt;
It&amp;#8217;s only 33% slower than direct access, so much better than reflection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;Benchmark           Mode  Cnt  Score   Error  Units
===================================================
DirectAccess        avgt   60  2.590 ± 0.014  ns/op
Reflection          avgt   60  5.275 ± 0.053  ns/op
LambdaMetafactory   avgt   60  3.453 ± 0.034  ns/op&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I ran that
&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/vehicleRoutingProblem.html&quot;&gt;Traveling Salesman Problem&lt;/a&gt;
again in &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;,
this time using LambdaMetafactory to access planning variables, &lt;em&gt;the score calculation speed was 9% faster overall&lt;/em&gt;.
However, the profiling (using sampling) still shows a lot of &lt;code&gt;executeGetter()&lt;/code&gt; time, but less than with reflection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The metaspace cost seems to be about 2kb per lambda in a non-scientific measurement
and it gets garbage collected normally.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bootstrap_cost_update_on_2018_01_25&quot;&gt;Bootstrap cost (update on 2018-01-25)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The runtime cost matters most, as it&amp;#8217;s not uncommon to retrieve a getter on thousands of instances per second.
However, the bootstrap cost matters too,
because we need to create a &lt;code&gt;MyAccessor&lt;/code&gt; for every getter in the domain hierarchy that we want to reflect over,
such as &lt;code&gt;Person.getName()&lt;/code&gt;, &lt;code&gt;Person.getAddress()&lt;/code&gt;, &lt;code&gt;Address.getStreet()&lt;/code&gt;, &lt;code&gt;Address.getCity()&lt;/code&gt;, &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reflection and MethodHandle have a neglectable bootstrap cost.
For LambdaMetafactory it is still acceptable: my machine creates about 25k accessors per second.
But for JavaCompiler it is not: my machine creates only about 200 accessors per second.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;Benchmark                    Mode  Cnt        Score        Error  Units
=======================================================================
Reflection Bootstrap         avgt   60      268.510 ±     25.271  ns/op //    0.3µs/op
MethodHandle Bootstrap       avgt   60     1519.177 ±     46.644  ns/op //    1.5µs/op
JavaCompiler Bootstrap       avgt   60  4814526.314 ± 503770.574  ns/op // 4814.5µs/op
LambdaMetafactory Bootstrap  avgt   60    38904.287 ±   1330.080  ns/op //   39.9µs/op&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This benchmark does not do caching or bulk complication.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this investigation, reflection and (usable) MethodHandles are twice as slow as direct access in OpenJDK 8.
Generated code is as fast as direct access, but it&amp;#8217;s a pain.
LambdaMetafactory is almost as fast as direct access.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;Benchmark           Mode  Cnt  Score   Error  Units
===================================================
DirectAccess        avgt   60  2.590 ± 0.014  ns/op
Reflection          avgt   60  5.275 ± 0.053  ns/op // 104% slower
MethodHandle        avgt   60  6.100 ± 0.079  ns/op // 136% slower
StaticMethodHandle  avgt   60  2.635 ± 0.027  ns/op //   2% slower
JavaCompiler        avgt   60  2.726 ± 0.026  ns/op //   5% slower
LambdaMetafactory   avgt   60  3.453 ± 0.034  ns/op //  33% slower&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your mileage may vary.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2017/09/07/DoesAIIncludeConstraintSolvers.html</id>
            <title type="html">Does A.I. include constraint solvers?</title>
            <updated>2017-09-07T00:00:00+00:00</updated>
            <published>2017-09-07T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2017/09/07/DoesAIIncludeConstraintSolvers.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="community"></category>
                    <category term="insight"></category>
            <summary type="html">
                 The A.I. winter is over. For a few years now, the interest in Artificial Intelligence technologies is growing again. Not just from us, A.I. geeks. Business sees the potential to invest. To ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The A.I. winter is over.
For a few years now, the interest in Artificial Intelligence technologies is growing again.
Not just from us, A.I. geeks. Business sees the potential to invest.
To acquire new funding, many research projects are rebranding themselves as A.I. technology.
Often justified. But not always.
Can Constraint Solvers use the A.I. tag too?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_little_history_the_fifth_generation_project&quot;&gt;A little history: the fifth generation project&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For almost two decades, A.I. was a dirty word.
To understand why, we need to go back to 1982,
when Japan decided to invest massively in &lt;a href=&quot;https://en.wikipedia.org/wiki/Fifth_generation_computer&quot;&gt;the fifth generation computer&lt;/a&gt;,
an Artificial Intelligence platform which would leapfrog the existing computers of the time and break IBM&amp;#8217;s monopoly.
In a reaction, other countries funded similar projects.
Suddenly research money fell out of the sky. The 80&amp;#8217;s summer of A.I.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It failed. Despite decadent funding for almost 10 years,
the fifth generation research had little practical use to show for.
Some of the research was ahead of its time:
lacking big data, smartphones and faster computers, it couldn&amp;#8217;t work yet.
Other research was completely useless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the aftermath of that failure, in the 90&amp;#8217;s and early 2000&amp;#8217;s, the term A.I. was tainted.
&lt;em&gt;A.I. didn&amp;#8217;t work.&lt;/em&gt; Developers quickly stopped branding their technologies as such.
Constraint solvers strengthened their Operations Research affiliation.
Search engines acted as if they&amp;#8217;re a simple dictionary lookup.
Rule engines focused on decision tables.
They all avoided mentioning their A.I. affiliation. Except for neural nets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_neural_nets_one_tech_fits_all&quot;&gt;Neural nets: one tech fits all?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last few years, neural nets made Artificial Intelligence cool again.
A neural net mimics the neurons in our brain (not as much as you&amp;#8217;d think).
It&amp;#8217;s a black box that transforms input data into output data,
by pushing it through a number of neural layers of mostly sum and multiply arithmetic.
For decades, its accuracy was too low,
but that changed dramatically, with the recent rise of big data
and the discovery of better backpropagation methods.
The latter enables more layers. More layers equals &lt;em&gt;deep learning&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nowadays, neural nets can recognize faces and voices.
And in a hybrid combination with other A.I. technologies (such as minimax),
they can even beat the world&amp;#8217;s champion of Go.
Sounds like magic. But &lt;strong&gt;these are all pattern recognition problems.
They can&amp;#8217;t handle other problems.&lt;/strong&gt;
Neural nets can&amp;#8217;t find the fastest route from La Louvre to the Colosseum.
They can&amp;#8217;t build &lt;a href=&quot;https://www.optaplanner.org/blog/2015/03/20/3BugsInTheUltimateAmericanRoadTrip.html&quot;&gt;the ultimate American road trip&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_right_a_i_for_the_job&quot;&gt;The right A.I. for the job&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Neural nets aren&amp;#8217;t an AGI (artificial general intelligence).
Neither are constraint solvers or production rule systems, for that matter.
Each one can only solve one subset of A.I. problems.
That&amp;#8217;s probably a good thing: none can become Skynet and pose a treat to humanity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So to solve business problems with intelligent software,
&lt;strong&gt;use the algorithm that fits the use case&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2017/09/07/theRightAIForTheJob.png&quot; alt=&quot;theRightAIForTheJob&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This hasn&amp;#8217;t stopped academics from trying.
There&amp;#8217;s plenty of research with neural nets to solve &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/vehicleRoutingProblem.html&quot;&gt;vehicle routing&lt;/a&gt;
or &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/employeeRostering.html&quot;&gt;employee rostering&lt;/a&gt;,
it&amp;#8217;s just consistency inferior to constraint solving algorithms such as Tabu Search and Simulated Annealing.
Why settle for a 1% reduction in driving time when you can have 15%?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visa versa, constraints solvers can&amp;#8217;t even solve
&lt;a href=&quot;https://www.youtube.com/watch?v=ACmydtFDTGs&quot;&gt;the infamous image recognition of a hot dog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_do_all_algorithms_produce_intelligence&quot;&gt;Do all algorithms produce intelligence?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multiplying &lt;code&gt;1234&lt;/code&gt; by &lt;code&gt;5678&lt;/code&gt; isn&amp;#8217;t easy, yet we don&amp;#8217;t consider this artificial intelligence.
Similarly, sorting algorithms aren&amp;#8217;t A.I. either. Why is that?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maybe it&amp;#8217;s because those problems don&amp;#8217;t have an error margin.
A.I. problems do:
Given an image of a husky dog, some people recognize a wolf instead.
Given a TSP problem to draw the shortest tour,
people submit &lt;a href=&quot;https://www.optaplanner.org/blog/2015/06/03/HowGoodAreHumanPlanners.html&quot;&gt;unique results of varying quality&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maybe it&amp;#8217;s because the calculation and sorting algorithms are understandable.
There is no black box.
It&amp;#8217;s relatively easy to see how the computer transforms the input, instruction by instruction, into the output.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_about_constraint_solvers&quot;&gt;What about constraint solvers?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Historically, constraint solvers (such as &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;) are definitely part of the field of Operations Research,
but that doesn&amp;#8217;t exclude them from other fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;d argue that constraints solvers also fall into the field of Artificial Intelligence.
Not just because &lt;a href=&quot;http://blog.athico.com/2017/09/is-optimization-ai-or-or.html&quot;&gt;papers and books say so&lt;/a&gt;.
Mainly because &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/index.html&quot;&gt;constraint solving use cases&lt;/a&gt; are &lt;em&gt;inherently complex problems to master&lt;/em&gt;.
There&amp;#8217;s great variation in solution quality, both by human planners and specialized algorithms alike.
Given a sufficiently large dataset, the optimal solution is &lt;a href=&quot;https://www.optaplanner.org/blog/2014/03/27/IsTheSearchSpaceOfAnOptimizationProblemReallyThatBig.html&quot;&gt;impossible to find&lt;/a&gt;.
Furthermore, researchers still discover &lt;a href=&quot;https://en.wikipedia.org/wiki/Late_acceptance_hill_climbing&quot;&gt;new algorithms&lt;/a&gt;,
even though &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulated_annealing&quot;&gt;other algorithms&lt;/a&gt; are almost 40 years old.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What do you think? Are constraint solvers part of the field of Artificial Intelligence?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2017/08/18/OptimizeYourProblemsUsingKieServerPart.html</id>
            <title type="html">Optimize your problems using KIE Execution Server</title>
            <updated>2017-08-18T00:00:00+00:00</updated>
            <published>2017-08-18T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2017/08/18/OptimizeYourProblemsUsingKieServerPart.html" rel="alternate" type="text/html" />
            <author>
                <name>mcimbora</name>
            </author>
                    <category term="feature"></category>
                    <category term="howto"></category>
                    <category term="execution server"></category>
            <summary type="html">
                 KIE Server provides separation of execution environment from your client application, making it easy to use OptaPlanner outside Java ecosystem (e.g. .NET). In the 7 release stream, we worked to ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;KIE Server provides separation of execution environment from your client application,
making it easy to use OptaPlanner outside Java ecosystem (e.g. .NET).
In the 7 release stream, we worked to improve OptaPlanner/KIE Server integration.
The new API is less verbose and more intuitive.
Let&amp;#8217;s take a closer look at its usage in more detail.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_a_typical_workflow_looks_like&quot;&gt;How a typical workflow looks like?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install your optimization app kjar to a maven repository accessible by the KIE Server.
This step assumes the following conditions are met:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;kmodule.xml&lt;/code&gt; file is located in &lt;code&gt;META-INF&lt;/code&gt; folder of your project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project uses packaging type &lt;code&gt;kjar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;kie-maven-plugin&lt;/code&gt; is configured for the project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;  &amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.kie&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;kie-maven-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${version.org.kie}&amp;lt;/version&amp;gt;
        &amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt;
      &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a container (server unit of execution) wrapping the project.
This example uses Java KIE Server client, which performs REST calls in the background.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following dependencies are required in your client application.
Make sure to use version 7.0.0.Final, or later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.kie.server&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;kie-server-api&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.kie.server&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;kie-server-client&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Client and container creation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;  KieServicesConfiguration kieServicesConfiguration = new KieServicesConfigurationImpl(SERVER_URL, USERNAME, PASSWORD, CLIENT_TIMEOUT);
  KieServicesClient kieServicesClient = KieServicesFactory.newKieServicesClient(kieServicesConfiguration)

  // ReleaseId corresponds to groupId:artifactId:version (GAV) of the project installed in the first step
  ReleaseId releaseId = new ReleaseId(&quot;org.optaplanner&quot;, &quot;kie-server-example&quot;, &quot;1.0.0-SNAPSHOT&quot;);
  KieContainerResource containerResource = new KieContainerResource(CONTAINER_ID, releaseId);
  kieServicesClient.createContainer(CONTAINER_ID, containerResource);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a solver within the container.
A single container can hold multiple solvers, each of them having a unique identifier.
This is useful if you want to try out different solver configurations.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;SolverServicesClient solverClient = kieServicesClient.getServicesClient(SolverServicesClient.class);
solverClient.createSolver(CONTAINER_ID, SOLVER_ID, SOLVER_CONFIG_XML_PATH);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Submit your optimization problem&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;CloudBalance cloudBalance = loadPlanningSolution();
solverClient.solvePlanningProblem(CONTAINER_ID, SOLVER_ID, cloudBalance);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the solver state.
At this point of time the best solution notifications are not supported yet on the client side,
you need to periodically check the solver status/best solution.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;  SolverInstance solver = solverClient.getSolver(CONTAINER_ID, SOLVER_ID);
  if (solver.getStatus() == SolverInstance.SolverStatus.SOLVING) {
    // continue
  } else {
    CloudBalance cloudBalance = (CloudBalance) solverClient.getSolverWithBestSolution(CONTAINER_ID, SOLVER_ID).getBestSolution()
    // process the solution
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you are done with the optimization, terminate the solver.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;  solverClient.terminateSolverEarly(CONTAINER_ID, SOLVER_ID);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don&amp;#8217;t plan to reuse the solver anymore, dispose it to free the resources on the server.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;  solverClient.disposeSolver(CONTAINER_ID, SOLVER_ID);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_optaplanner_rest_api_overview&quot;&gt;New OptaPlanner REST API overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following table shows an overview of the new API introduced in version 7.0.0.Final.
All solver action URLs are normally prefixed by container URL, e.g. &lt;code&gt;&lt;a href=&quot;http://${kie-server}/services/rest/server/containers/${container_id}&quot; class=&quot;bare&quot;&gt;http://${kie-server}/services/rest/server/containers/${container_id}&lt;/a&gt;&lt;/code&gt;,
which is not included in the table to keep the output short.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Action&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Method&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;URL suffix&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Payload&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Register solver&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PUT&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;solvers/${solver_id}&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get solver&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GET&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;solvers/${solver_id}&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SolverInstance object&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Submit solution&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;POST&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;solvers/${solver_id}/state/solving&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Solution object&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get best solution&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GET&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;solvers/${solver_id}/bestsolution&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SolverInstance object including the best solution&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Terminate solver&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;POST&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;solvers/${solver_id}/state/terminating-early&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dispose solver&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DELETE&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;solvers/${solver_id}&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_where_do_i_start&quot;&gt;Where do I start?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org/download/download.html&quot;&gt;Download KIE (Execution) Server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check &lt;a href=&quot;https://docs.optaplanner.org/latest/optaplanner-wb-es-docs/html_single/#_kie_server_integration&quot;&gt;KIE Server Integration&lt;/a&gt; chapter
of OptaPlanner Workbench quickstart or &lt;a href=&quot;https://docs.optaplanner.org/7.1.0.Final/optaplanner-wb-es-docs/html_single/#_optaplanner_rest_api&quot;&gt;OptaPlanner REST API&lt;/a&gt;
documentation for more details on the API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Optionally try out KIE Workbench, which integrates with the KIE Server.
The following video demonstrates the process of setting up a Workbench example and optimizing it using the KIE Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/bpBGujiMCAs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;KIE Server provides an alternative way of optimizing your constraint satisfaction problems.
If you want to offload workload to cloud (possibly with a large amount of resources),
or you use non-Java client, KIE Server is the right pick.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2017/03/13/VisualizeTheScoreAndTheConstraints.html</id>
            <title type="html">Visualize the score and the constraints</title>
            <updated>2017-03-13T00:00:00+00:00</updated>
            <published>2017-03-13T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2017/03/13/VisualizeTheScoreAndTheConstraints.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="feature"></category>
                    <category term="howto"></category>
                    <category term="school timetabling"></category>
            <summary type="html">
                 So we solved the planning problem and found a best solution which has a score of 0hard/-123soft. Why -123soft? Where does that penalty come from? Which constraints are broken? Let&amp;#8217;s see how ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we solved the planning problem and found a best solution which has a score of &lt;code&gt;0hard/-123soft&lt;/code&gt;.
Why &lt;code&gt;-123soft&lt;/code&gt;? Where does that penalty come from? Which constraints are broken?
Let&amp;#8217;s see how we can break down the score and visualize the pain points in a UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s approach this problem from two sides on the course scheduling example:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_break_down_score_per_constraint_type&quot;&gt;Break down score per constraint type&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the top-down approach, we split up the score per constraint type (so per score rule):&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Constraint type&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Score impact&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Room capacity&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-100soft&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Room stability&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-40soft&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Curriculum compactness&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-3soft&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-123soft&lt;/code&gt;&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;room capacity&lt;/em&gt; constraint is broken the most: it causes for &lt;code&gt;81%&lt;/code&gt; (&lt;code&gt;100/123&lt;/code&gt;) of the score loss.
Maybe the school should invest in more classrooms?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_heat_map_with_score_impact_per_planning_entity&quot;&gt;Heat map with score impact per planning entity&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the bottom-up approach, we visualize the score impact per lecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Red lectures impact hard constraints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Orange lectures impact only soft constraints. The higher the impact, the heavier the color.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;White lectures don&amp;#8217;t impact the score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Solution&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Normal view&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Indictment heat map&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Initialized&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;courseScheduling0Initialized.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/courseScheduling0Initialized.png&quot; alt=&quot;courseScheduling0Initialized&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;courseScheduling0IndictmentInitialized.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/courseScheduling0IndictmentInitialized.png&quot; alt=&quot;courseScheduling0IndictmentInitialized&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-4hard/-18soft&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Feasible&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;courseScheduling1Feasible.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/courseScheduling1Feasible.png&quot; alt=&quot;courseScheduling1Feasible&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;courseScheduling1IndictmentFeasible.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/courseScheduling1IndictmentFeasible.png&quot; alt=&quot;courseScheduling1IndictmentFeasible&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;0hard/-68soft&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Near optimal&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;courseScheduling2NearOptimal.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/courseScheduling2NearOptimal.png&quot; alt=&quot;courseScheduling2NearOptimal&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;courseScheduling2IndictmentNearOptimal.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/courseScheduling2IndictmentNearOptimal.png&quot; alt=&quot;courseScheduling2IndictmentNearOptimal&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;0hard/-1soft&lt;/code&gt; (*)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Optimal&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;courseScheduling3Optimal.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/courseScheduling3Optimal.png&quot; alt=&quot;courseScheduling3Optimal&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock thumbnail&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;courseScheduling3IndictmentOptimal.png&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/courseScheduling3IndictmentOptimal.png&quot; alt=&quot;courseScheduling3IndictmentOptimal&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;0hard/0soft&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As OptaPlanner finds better and better solutions, there is less and less orange on the heat map.
Looks like the &lt;em&gt;history&lt;/em&gt; courses are particularly hard to schedule.
Maybe the school should look for an additional history teacher?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(*) Notice that &lt;code&gt;-1soft&lt;/code&gt; is shared by multiple lectures:
3 lectures break the &lt;em&gt;room stability&lt;/em&gt; constraint together
because two of them use a different room than the other one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_show_me_the_api&quot;&gt;Show me the API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner 7 provides this information out of the box through the ConstraintMatch API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/scoreVisualization.png&quot; alt=&quot;scoreVisualization&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First build a &lt;code&gt;ScoreDirector&lt;/code&gt; with &lt;code&gt;Solver.getScoreDirectorFactory()&lt;/code&gt; and then:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Break down the score per constraint type with &lt;code&gt;ScoreDirector.getConstraintMatchTotals()&lt;/code&gt;.
Each &lt;code&gt;ConstraintMatchTotal&lt;/code&gt; represents one score rule and has its total score.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determine the score impact per planning entity with &lt;code&gt;ScoreDirector.getIndictmentMap()&lt;/code&gt;.
Each &lt;code&gt;Indictment&lt;/code&gt; holds the total score impact of one planning entity.
Use that score to create the heat map in your UI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_try_it_out&quot;&gt;Try it out&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org/download/download.html&quot;&gt;Download OptaPlanner&lt;/a&gt; &lt;code&gt;7.0.0.CR1&lt;/code&gt; or higher.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run an example and load a dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on the &lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://www.optaplanner.org/blog/2017/03/13/indictmentHeatMapTrueIcon.png&quot; alt=&quot;flame&quot;&gt;&lt;/span&gt; button at the bottom left.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the solve button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Help the user make sense of the resulting score.
Visualize which constraints and planning entities cause most harm.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2017/02/03/FormulaForMeasuringUnfairness.html</id>
            <title type="html">Formula for measuring unfairness</title>
            <updated>2017-02-03T00:00:00+00:00</updated>
            <published>2017-02-03T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2017/02/03/FormulaForMeasuringUnfairness.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="insight"></category>
                    <category term="design"></category>
                    <category term="task assignment"></category>
                    <category term="employee rostering"></category>
                    <category term="constraint"></category>
            <summary type="html">
                 Load balancing is a common constraint for many OptaPlanner use cases. Especially when scheduling employees, the workload needs to be spread out fairly. Easier said than done. Let&amp;#8217;s take a ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Load balancing is a common constraint for many OptaPlanner use cases.
Especially when scheduling employees, the workload needs to be spread out fairly.
Easier said than done. Let&amp;#8217;s take a look at this challenging problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let&amp;#8217;s assign &lt;code&gt;15&lt;/code&gt; undesirable tasks to &lt;code&gt;5&lt;/code&gt; employees.
Each task takes a day, but they have different skill requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_fair&quot;&gt;What is fair?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;In a perfectly fair schedule, each employee will get &lt;code&gt;3&lt;/code&gt; tasks&lt;/strong&gt;,
because the mean (= average) is &lt;code&gt;15 / 5 = 3&lt;/code&gt;.
Or explained more formally, for the math geeks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mean (= average): \(\overline{x} = \frac{\sum_{i=1}^{n} x_i}{n}\)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So this schedule is perfectly fair:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;5&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks per employee&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Quality&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ann&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Beth&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carl&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dan&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ed&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Mean&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Fair&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Problem solved? Unfortunately not, because there are other constraints.
For example, there are 7 tasks that require a skill which only Ann and Beth posses.
One of them will have to do at least 4 tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Our schedule will not be perfectly fair, but how can we make it as fair as possible?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_fairer&quot;&gt;What is fairer?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at two opposing definitions of fairness:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A schedule is fair if most users think it is fair to them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A schedule is fair if the employee with most tasks has as little tasks as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, since we want to treat all employees equally, the second definition is correct.
Besides, if we make almost everyone happy by letting Ann do all the work, she would probably quit on us.
That wouldn&amp;#8217;t help.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2858%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;5&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks per employee&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Quality&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ann&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Beth&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carl&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dan&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ed&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Unfair. Ann quits her job.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sorting_solutions_by_fairness&quot;&gt;Sorting solutions by fairness&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at a few different solutions of the same dataset.
Each one has &lt;code&gt;15&lt;/code&gt; undesirable tasks:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2858%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;5&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks per employee&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Quality&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ann&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Beth&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carl&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dan&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ed&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Fairest&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule B&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule E&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule G&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Unfairest&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are sorted from fair to unfair.
Several of these are probably infeasible, due to hard constraints such as skill requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ann has most tasks each time. How do we compare 2 schedules in which Ann has the same number of tasks?&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2858%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;5&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks per employee&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Quality&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ann&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Beth&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carl&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dan&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ed&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;More fair&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Less fair&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In that case, we look at the second unfairest treated employee: Beth in this case.
And we minimize her tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we&amp;#8217;ve defined fairness, how do we implement it?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_measuring_unfairness&quot;&gt;Measuring unfairness&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ideally, we want to calculate a number for each schedule to measures the fairness of that solution.
The lower, the fairer. How do we calculate that number? Let&amp;#8217;s look at some formula&amp;#8217;s:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deviation_from_the_mean&quot;&gt;Deviation from the mean&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because a perfectly fair schedule has all employees working the average number of tasks,
what if we simply sum the difference with the mean per employee?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Absolute deviation from the mean: \(f(n) = \sum_{i=1}^{n} |x_i - \overline{x}|\)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average deviation from the mean: \(f(n) = \frac{\sum_{i=1}^{n} |x_i - \overline{x}|}{n}\)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;col style=&quot;width: 12.5%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;5&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks per employee&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ann&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Beth&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carl&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dan&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ed&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Absolute deviation&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average deviation&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.00&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule B&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4&lt;/strong&gt; - &lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.80&lt;/strong&gt; - &lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.80&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;8&lt;/strong&gt; - &lt;em&gt;Very bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;1.60&lt;/strong&gt; - &lt;em&gt;Very bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule E&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;1.20&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2.00&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule G&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;16&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;3.20&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These measurements are terrible. Both claim that schedule B and C are equally fair. They aren&amp;#8217;t.
Both claim that schedule D is worse than E. It&amp;#8217;s not: just ask Ann.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_variance_and_standard_deviation&quot;&gt;Variance and standard deviation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In statistics, variance and standard deviation are used to penalize outliers more.
That sounds like exactly what we need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variance: \(f(n) = \frac{\sum_{i=1}^{n} (x_i - \overline{x})^2}{n}\)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Standard deviation: \(f(n) = \sqrt{\frac{\sum_{i=1}^{n} (x_i - \overline{x})^2}{n}}\)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Squared deviation from the mean (= variance * n): \(f(n) = \sum_{i=1}^{n} (x_i - \overline{x})^2\)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Root of squared deviation from the mean: \(f(n) = \sqrt{\sum_{i=1}^{n} (x_i - \overline{x})^2}\)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;5&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks per employee&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;4&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ann&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Beth&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carl&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dan&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ed&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Variance&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Standard deviation&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Squared deviation&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Root squared deviation&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.00&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.00&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.00&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule B&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.80&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;0.89&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2.00&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;1.20&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;1.10&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2.45&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2.80&lt;/strong&gt; - &lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;1.67&lt;/strong&gt; - &lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;14&lt;/strong&gt; - &lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;3.74&lt;/strong&gt; - &lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule E&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2.80&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;1.67&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;14&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;3.74&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4.40&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2.10&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;22&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4.69&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule G&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;16.00&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4.00&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;80&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;8.94&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These measurements are good, but still not ideal. They claim that schedule D and E are equally fair.
They aren&amp;#8217;t.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_maximum&quot;&gt;Maximum&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if we simply take the maximum of each row?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maximum: \(f(n) = \underset{0 &amp;lt; i \leq n}\max x_i\)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2858%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;5&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks per employee&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ann&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Beth&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carl&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dan&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ed&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Maximum&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule B&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt; - &lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule E&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;6&lt;/strong&gt; - &lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule G&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s worse than variance: it only looks at one employee.
Furthermore, it completely discards fairness between the remaining employees.
That might be ok if there&amp;#8217;s one employee, but not if there are thousands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_list_of_maximums&quot;&gt;List of maximums&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if we don&amp;#8217;t use any formula but just store the list of numbers sorted by decreasing size?&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2858%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;5&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks per employee&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ann&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Beth&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Carl&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dan&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ed&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;List of maximums&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;[3,3,3,3,3]&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule B&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;[4,4,3,2,2]&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;[5,3,3,2,2]&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;[5,5,2,2,1]&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule E&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;[6,3,3,2,1]&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;[6,5,2,1,1]&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule G&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;[11,1,1,1,1]&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That will compare perfectly. In OptaPlanner it can be implemented by adding 5 score levels for this dataset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, besides obvious memory consumption issues when scaling to thousands of employees,
this isn&amp;#8217;t compatible with other soft constraints&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_no_constraint_is_an_island&quot;&gt;No constraint is an island&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fairness is typically a soft constraint.
But there are other soft constraints that we&amp;#8217;ll need to optimize for too,
so we&amp;#8217;ll need to weight them against each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_an_example&quot;&gt;An example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, presume there&amp;#8217;s a soft constraint on priority violations,
that&amp;#8217;s 10 times as important as a fairness violation.
Let&amp;#8217;s also add a schedule with 1500 tasks, to see how it scales out:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.667%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Number of tasks&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Priority violations&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Fairness violations&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Soft score&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Quality&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Best&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Worst&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1500&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Different dataset&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To calculate the soft score, we sum the fairness violations with 5 times the priority violations and make that negative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start the process of elimination&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_represented_by_a_single_number&quot;&gt;Represented by a single number&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;List of maximums&lt;/em&gt; isn&amp;#8217;t represented as single number
(because it uses multiple score levels),
so it&amp;#8217;s difficult to mix in priority violations:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Priority violations&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Soft score&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;List of maximums&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[6,5,2,1,1]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ERROR?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[5,3,3,2,2]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ERROR?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[5,5,2,2,1]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ERROR?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1500&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[8,8,7,7,7,7,&amp;#8230;&amp;#8203;]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ERROR?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_grow_with_the_number_of_violations&quot;&gt;Grow with the number of violations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we scale out to 1500 employees,
we notice that &lt;em&gt;maximum&lt;/em&gt; gets dwarfed by the priority violations:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Priority violations&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Soft score&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Maximum&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1500&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1008 - &lt;em&gt;Dwarfed&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, &lt;em&gt;average deviation from the mean&lt;/em&gt;, &lt;em&gt;variance&lt;/em&gt; and &lt;em&gt;standard deviation&lt;/em&gt; get dwarfed
on bigger datasets too:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.667%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Priority violations&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; colspan=&quot;3&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average deviation&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Variance&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Standard deviation&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.10&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.80&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.20&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.10&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.60&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.80&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.67&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1500&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.50 - &lt;em&gt;Dwarfed&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.50 - &lt;em&gt;Dwarfed&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.58 - &lt;em&gt;Dwarfed&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As the number of fairness violations grow, so should the fairness measurement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_do_not_grow_exponentially_with_the_number_of_violations&quot;&gt;Do not grow exponentially with the number of violations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, as the dataset grows, the fairness violations shouldn&amp;#8217;t dwarf the other violations either.
&lt;em&gt;Squared deviation&lt;/em&gt; does that:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Priority violations&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Squared deviation&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;80&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1500&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100 - &lt;em&gt;Dwarfed&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10201&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That just leaves:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;absolute deviation from the mean&lt;/em&gt; which compares terribly for fairness&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;root squared deviation&lt;/em&gt; which isn&amp;#8217;t perfect but works well enough&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;So the recommended approach is:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Root of squared deviation from the mean: \(f(n) = \sqrt{\sum_{i=1}^{n} (x_i - \overline{x})^2}\)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number of tasks&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Priority violations&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Measurement of fairness&lt;/p&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Soft score&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Root squared deviation&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule F&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.69&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14.69&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.45&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;22.45&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.74&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.74&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Schedule X&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1500&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;101.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1101.00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_additional_notes&quot;&gt;Additional notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_part_time_employees&quot;&gt;Part-time employees&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To deal with unequal employees,
for example if some employees work half as many hours as other employees,
multiply their number of tasks by the inverse of their FTE (full time equivalent)
before feeding into this formula.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other reasons to treat employees unequally (such as disabilities or talent retention)
can be handled in a similar fashion or with separate constraints, depending on the requirement.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- Renders Math formula in this page --&gt;
&lt;script type=&quot;text/javascript&quot; async
    src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_update&quot;&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a formula that seems to compare perfectly,
see &lt;a href=&quot;http://math.stackexchange.com/a/2144813/86787&quot;&gt;this mathexchange answer&lt;/a&gt;,
but it might suffer from numerical instability and overflow.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2016/12/06/HowToBecomeUSPresidentWithLessThanAQuarterOfTheVotes.html</id>
            <title type="html">How to become US president with less than a quarter of the votes</title>
            <updated>2016-12-06T00:00:00+00:00</updated>
            <published>2016-12-06T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2016/12/06/HowToBecomeUSPresidentWithLessThanAQuarterOfTheVotes.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="use case"></category>
            <summary type="html">
                 The US presidential election has an interesting voting system. The winner is not the most popular candidate (he or she that has the most votes) but the one that collects the most EC electors. So ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The US presidential election has an interesting voting system.
The winner is not the most popular candidate (he or she that has the most votes)
but the one that collects the most EC electors.
So I wonder, how could I become the least popular US president?
That&amp;#8217;s a constraint satisfaction problem!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It occurred &lt;a href=&quot;https://en.wikipedia.org/wiki/United_States_presidential_elections_in_which_the_winner_lost_the_popular_vote&quot;&gt;a few times already&lt;/a&gt;
that the president-elect didn&amp;#8217;t have the popular vote, most recently last month with Clinton vs. Trump.
But the difference in total votes wasn&amp;#8217;t that big. What would be the biggest possible gap?
If everyone voted against me by default, what&amp;#8217;s the minimum number of people I&amp;#8217;d have to convince to vote for me to become US president?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_is_this_possible&quot;&gt;How is this possible?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is due to the winner-takes-all system per state.
Any candidate that has the majority in one state (so at least 50% of the votes),
gets all Electoral College votes of that state.
So it doesn&amp;#8217;t matter if I get 51% or 99% of the votes in one state: I get the same number of EC votes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, the EC votes for one state do not represent its population accurately.
The EC votes are rounded to an integer and each state gets at least 3 out of 538 votes.
For example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Electoral_College_(United_States)&quot;&gt;an electoral vote represents nearly four
times as many people in California as in Wyoming&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s not elaborate on the fairness or unfairness of this system - I am sure we all have an opinion, but it is what it is.
Instead, let me put on my megalomaniac hat and see how I can &lt;strong&gt;game the system to win the US elections with the least possible votes&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_constraints&quot;&gt;Constraints&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll presume everyone votes, so my victory is assured regardless if they do or not.
If no one voted, I could in theory win the elections with 11 votes: 1 vote per state in each of the 11 most populous states.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll also presume no one votes for 3rd party candidates, so my victory is also assured regardless if anyone does or doesn&amp;#8217;t.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That leaves me with 2 constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Hard constraint: Collect at least 270 EC votes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Soft constraint: Minimize the number of votes for me.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To win a state, I&amp;#8217;ll just convince exactly half of its population plus one to vote for me.
The population data is from 2015 and &lt;a href=&quot;https://github.com/kiegroup/optaplanner-training/blob/master/optaplanner-training-lab901-solution/data/election/import/president2016.txt&quot;&gt;available in this file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s solve this constraint satisfaction problem with &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_guarantee_election_victory_with_a_quarter_of_the_votes&quot;&gt;How to guarantee election victory with a quarter of the votes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;If I win these states with &lt;code&gt;21.73%&lt;/code&gt; of the US population voting for me,
I am the next US president, regardless of how the other &lt;code&gt;78.27%&lt;/code&gt; of the population votes!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/12/06/electionMapMetaheuristics.png&quot; alt=&quot;electionMapMetaheuristics&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s the raw data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Wyoming                3 EC:     293,054 of     586,107 voters (50.00%).
District of Columbia   3 EC:     300,884 of     601,767 voters (50.00%).
Vermont                3 EC:     313,022 of     626,042 voters (50.00%).
Alaska                 3 EC:     369,217 of     738,432 voters (50.00%).
North Dakota           3 EC:     378,464 of     756,927 voters (50.00%).
South Dakota           3 EC:     429,235 of     858,469 voters (50.00%).
Delaware               3 EC:     472,968 of     945,934 voters (50.00%).
Montana                3 EC:     516,475 of   1,032,949 voters (50.00%).
Rhode Island           4 EC:     528,150 of   1,056,298 voters (50.00%).
Maine                  4 EC:     664,665 of   1,329,328 voters (50.00%).
New Hampshire          4 EC:     665,305 of   1,330,608 voters (50.00%).
Hawaii                 4 EC:     715,802 of   1,431,603 voters (50.00%).
Idaho                  4 EC:     827,466 of   1,654,930 voters (50.00%).
West Virginia          5 EC:     922,065 of   1,844,128 voters (50.00%).
Nebraska               5 EC:     948,096 of   1,896,190 voters (50.00%).
New Mexico             5 EC:   1,042,555 of   2,085,109 voters (50.00%).
Nevada                 6 EC:   1,445,423 of   2,890,845 voters (50.00%).
Kansas                 6 EC:   1,455,821 of   2,911,641 voters (50.00%).
Arkansas               6 EC:   1,489,103 of   2,978,204 voters (50.00%).
Mississippi            6 EC:   1,496,167 of   2,992,333 voters (50.00%).
Utah                   6 EC:   1,497,960 of   2,995,919 voters (50.00%).
Iowa                   6 EC:   1,561,950 of   3,123,899 voters (50.00%).
Connecticut            7 EC:   1,795,444 of   3,590,886 voters (50.00%).
Oklahoma               7 EC:   1,955,670 of   3,911,338 voters (50.00%).
Oregon                 7 EC:   2,014,489 of   4,028,977 voters (50.00%).
Kentucky               8 EC:   2,212,547 of   4,425,092 voters (50.00%).
Louisiana              8 EC:   2,335,363 of   4,670,724 voters (50.00%).
Alabama                9 EC:   2,429,490 of   4,858,979 voters (50.00%).
South Carolina         9 EC:   2,448,074 of   4,896,146 voters (50.00%).
Colorado               9 EC:   2,728,288 of   5,456,574 voters (50.00%).
Minnesota             10 EC:   2,744,798 of   5,489,594 voters (50.00%).
Wisconsin             10 EC:   2,885,669 of   5,771,337 voters (50.00%).
Maryland              10 EC:   3,003,201 of   6,006,401 voters (50.00%).
Tennessee             11 EC:   3,300,150 of   6,600,299 voters (50.00%).
Indiana               11 EC:   3,309,841 of   6,619,680 voters (50.00%).
Massachusetts         11 EC:   3,397,212 of   6,794,422 voters (50.00%).
Washington            12 EC:   3,585,176 of   7,170,351 voters (50.00%).
Michigan              16 EC:   4,961,289 of   9,922,576 voters (50.00%).
Pennsylvania          20 EC:   6,401,252 of  12,802,503 voters (50.00%).

TOTAL                270 EC:  69,841,800 of 321,348,359 voters (21.73%).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So even if everyone votes and no one votes for 3rd party candidates,
I am still guaranteed to win the US presidential election with less than a quarter of the total votes to my name.
I just need to win &lt;a href=&quot;http://www.270towin.com/maps/7A3OW&quot;&gt;the correct states&lt;/a&gt; by one vote above half each.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_did_i_find_that_solution&quot;&gt;How did I find that solution?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I created a model in which all of 50 federal states are assigned to 1 out of 2 candidates.
I didn&amp;#8217;t try all &lt;code&gt;2^50&lt;/code&gt; possible combinations, as that would take too long.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple Construction Heuristic that just takes the states with the highest votes to population ratio first,
gives me &lt;a href=&quot;http://www.270towin.com/maps/wJpBe&quot;&gt;this result&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/12/06/electionMapSimpleHeuristic.png&quot; alt=&quot;electionMapSimpleHeuristic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s not optimal: it requires &lt;code&gt;0.02%&lt;/code&gt; of the population too much.
By doing a Local Search algorithm on top of that, I get the better solution as shown earlier.
This algorithm basically swaps Arizona and Missouri for Pennsylvania.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation is part of &lt;a href=&quot;https://www.optaplanner.org/learn/training.html&quot;&gt;the training zip&lt;/a&gt;.
This is really just a variant of &lt;a href=&quot;https://en.wikipedia.org/wiki/Knapsack_problem&quot;&gt;the knapsack problem&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even in political elections, constraint solvers are (ab)useful.
Not just for this use case, but also for &lt;a href=&quot;https://en.wikipedia.org/wiki/Gerrymandering&quot;&gt;gerrymandering&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: The premise of this story is hypothetical: I have no actual ambitions to become US president.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_update&quot;&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s &lt;a href=&quot;https://youtu.be/7wC42HgLA4k?t=4m30s&quot;&gt;a video&lt;/a&gt; that claims that the optimal combination is different:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Wyoming                3 EC:     293,054 of     586,107 voters (50.00%).
District of Columbia   3 EC:     300,884 of     601,767 voters (50.00%).
Vermont                3 EC:     313,022 of     626,042 voters (50.00%).
Alaska                 3 EC:     369,217 of     738,432 voters (50.00%).
North Dakota           3 EC:     378,464 of     756,927 voters (50.00%).
South Dakota           3 EC:     429,235 of     858,469 voters (50.00%).
Delaware               3 EC:     472,968 of     945,934 voters (50.00%).
Montana                3 EC:     516,475 of   1,032,949 voters (50.00%).
Rhode Island           4 EC:     528,150 of   1,056,298 voters (50.00%).
Maine                  4 EC:     664,665 of   1,329,328 voters (50.00%).
New Hampshire          4 EC:     665,305 of   1,330,608 voters (50.00%).
Hawaii                 4 EC:     715,802 of   1,431,603 voters (50.00%).
Idaho                  4 EC:     827,466 of   1,654,930 voters (50.00%).
West Virginia          5 EC:     922,065 of   1,844,128 voters (50.00%).
Nebraska               5 EC:     948,096 of   1,896,190 voters (50.00%).
New Mexico             5 EC:   1,042,555 of   2,085,109 voters (50.00%).
Nevada                 6 EC:   1,445,423 of   2,890,845 voters (50.00%).
Kansas                 6 EC:   1,455,821 of   2,911,641 voters (50.00%).
Arkansas               6 EC:   1,489,103 of   2,978,204 voters (50.00%).
Mississippi            6 EC:   1,496,167 of   2,992,333 voters (50.00%).
Utah                   6 EC:   1,497,960 of   2,995,919 voters (50.00%).
Iowa                   6 EC:   1,561,950 of   3,123,899 voters (50.00%).
Connecticut            7 EC:   1,795,444 of   3,590,886 voters (50.00%).
Oklahoma               7 EC:   1,955,670 of   3,911,338 voters (50.00%).
Oregon                 7 EC:   2,014,489 of   4,028,977 voters (50.00%).
Kentucky               8 EC:   2,212,547 of   4,425,092 voters (50.00%).
Louisiana              8 EC:   2,335,363 of   4,670,724 voters (50.00%).
Alabama                9 EC:   2,429,490 of   4,858,979 voters (50.00%).
South Carolina         9 EC:   2,448,074 of   4,896,146 voters (50.00%).
Colorado               9 EC:   2,728,288 of   5,456,574 voters (50.00%).
Minnesota             10 EC:   2,744,798 of   5,489,594 voters (50.00%).
Wisconsin             10 EC:   2,885,669 of   5,771,337 voters (50.00%).
Maryland              10 EC:   3,003,201 of   6,006,401 voters (50.00%).
Missouri              10 EC:   3,041,837 of   6,083,672 voters (50.00%).
Tennessee             11 EC:   3,300,150 of   6,600,299 voters (50.00%).
Indiana               11 EC:   3,309,841 of   6,619,680 voters (50.00%).
Massachusetts         11 EC:   3,397,212 of   6,794,422 voters (50.00%).
Arizona               11 EC:   3,414,033 of   6,828,065 voters (50.00%).
Virginia              13 EC:   4,191,497 of   8,382,993 voters (50.00%).
New Jersey            14 EC:   4,479,007 of   8,958,013 voters (50.00%).

TOTAL                270 EC:  70,020,457 of 321,348,359 voters (21.79%).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of Pennsylvania, Michigan and Washington, it includes Missouri, Arizona, Virginia and New Jersey.
But as you can easily see, it&amp;#8217;s suboptimal because it needs &lt;code&gt;21.79%&lt;/code&gt; of the votes,
which is higher than my earlier result of &lt;code&gt;21.73%&lt;/code&gt;.
This is an apples to apples comparison on the 2015 population data,
so earlier population data might yield different results (and it might have been optimal at the time).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2016/10/26/DomainModelingGuide.html</id>
            <title type="html">Domain modeling guide</title>
            <updated>2016-10-26T00:00:00+00:00</updated>
            <published>2016-10-26T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2016/10/26/DomainModelingGuide.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="howto"></category>
                    <category term="design"></category>
            <summary type="html">
                 New OptaPlanner users sometimes struggle to create a good domain model, especially if their use case is complex. But a good domain model can go a long way. It can simplify the constraints, ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New OptaPlanner users sometimes struggle to create a good domain model,
especially if their use case is complex.
But a good domain model can go a long way.
It can simplify the constraints, improve performance and increase flexibility for future needs.
So how do we design a good domain model for OptaPlanner cases?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_goal&quot;&gt;The goal&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal is simple: determine which classes are planning entities
and which of their properties are planning variables.
Often, there is only one planning entity class with only one planning variable.
The other classes are problem facts. The other properties are problem properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ideally, we want to impact the existing domain as little as possible, so we can reuse existing code.
So we&amp;#8217;ll mainly only add a few OptaPlanner annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_guide&quot;&gt;The guide&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A more up-to-date version of this guide is part of the documentation (in &lt;code&gt;7.0.0.Beta3&lt;/code&gt; or later),
in the chapter &lt;em&gt;Design Patterns&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Draw a class diagram&lt;/strong&gt; of your domain model. &lt;em&gt;Normalize&lt;/em&gt; it get rid of duplicate data.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write down some sample instances for each class.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example in employee rostering, the samples for the &lt;code&gt;Employee&lt;/code&gt; class are &lt;em&gt;Ann&lt;/em&gt;, &lt;em&gt;Bert&lt;/em&gt; and &lt;em&gt;Carl&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Determine which relationships (or fields) change during planning&lt;/strong&gt;. Color them orange.
Often there is only 1 such relationship (or field).
One side of these relationships will become a planning variable later on.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example in employee rostering, the &lt;code&gt;Shift&lt;/code&gt; to &lt;code&gt;Employee&lt;/code&gt; relationship changes during planning,
so it is orange.
Other relationships, such as from &lt;code&gt;Employee&lt;/code&gt; to &lt;code&gt;Skill&lt;/code&gt;, are immutable during planning
because OptaPlanner can&amp;#8217;t decide to give an employee an extra skill.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there are multiple relationships (or fields): &lt;strong&gt;check for shadow variables&lt;/strong&gt;.
A shadow variable does change during planning,
but its value can be calculated based on one or more genuine planning variables, without dispute.
Color those shadow relationships (or fields) purple.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Only one side of a bi-directional relationship can be a genuine planning variable,
the other side will become an inverse relation shadow variable later on.
Keep those relationships in orange.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Check for chained planning variables&lt;/strong&gt;.
In a chained variable design, the focus lies on deciding the order of a set of planning entity instances,
instead of assigning them to a date/time (although there can be an assigned date/time as a shadow variable).
A typical use case is vehicle routing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is an orange &lt;em&gt;many-to-many&lt;/em&gt; relationship, &lt;strong&gt;replace that &lt;em&gt;many-to-many&lt;/em&gt; relationship&lt;/strong&gt;
with a &lt;em&gt;one-to-many&lt;/em&gt; and a &lt;em&gt;many-to-one&lt;/em&gt; relationship to a new intermediate class.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OptaPlanner currently doesn&amp;#8217;t support a &lt;code&gt;@PlanningVariable&lt;/code&gt; on a collection.
Although a future version will support it for flexibility reasons,
it probably has an inherent performance and complexity cost, so it might be better to avoid it anyway.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example in employee rostering the &lt;code&gt;ShiftAssignment&lt;/code&gt; class is
the &lt;em&gt;many-to-many&lt;/em&gt; relationship between the &lt;code&gt;Shift&lt;/code&gt; and &lt;code&gt;Employee&lt;/code&gt;.
It&amp;#8217;s effectively every spot that needs to be filled with an employee.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/10/26/employeeShiftRosteringModelingGuideA.png&quot; alt=&quot;employeeShiftRosteringModelingGuideA&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;em&gt;many-to-one&lt;/em&gt; relationship, &lt;strong&gt;usually the &lt;em&gt;many&lt;/em&gt; side is the planning entity class&lt;/strong&gt;.
Annotate it with a &lt;code&gt;@PlanningEntity&lt;/code&gt; annotation.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example in employee rostering, the &lt;code&gt;ShiftAssignment&lt;/code&gt; class has a &lt;code&gt;@PlanningEntity&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The planning entity class should have &lt;strong&gt;at least one problem property&lt;/strong&gt;.
So a planning entity class cannot consist of only planning variables
(or even an id and only planning variables).
Remove a surplus &lt;code&gt;@PlanningVariable&lt;/code&gt; so it becomes a problem property.
This heavily decreases the search space size and heavily increases solving efficiency.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example in employee rostering, the &lt;code&gt;ShiftAssignment&lt;/code&gt; class should not annotate
both the shift and employee relationship with &lt;code&gt;@PlanningVariable&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When all planning variables are &lt;code&gt;null&lt;/code&gt; (which occurs when the planning solution is still uninitialized),
a planning entity instance should still be describable to the business people.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;So a surrogate ID does not suffice as the required minimum of one problem property.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This way, there is no need to add a hard constraint to assure that two planning entities are different:
they are already different due to their problem properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In some cases, multiple planning entity instances have the same set of problem properties.
In such cases, it can be useful to create an extra problem property to distinguish them.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example in employee rostering, the &lt;code&gt;ShiftAssignment&lt;/code&gt; class has besides the problem property &lt;code&gt;Shift&lt;/code&gt;
also the problem property &lt;code&gt;indexInShift&lt;/code&gt; (which is an &lt;code&gt;int&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose the model in which &lt;strong&gt;the number of planning entities is fixed during planning&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example in employee rostering, it&amp;#8217;s impossible to know in advance how many shifts each employee will have
before OptaPlanner solves it (and it can even differ per best solution found).
On the other hand, the number of employees per shift is known in advance,
so it&amp;#8217;s better to make the &lt;code&gt;Shift&lt;/code&gt; relationship a problem property
and the &lt;code&gt;Employee&lt;/code&gt; relationship a planning variable.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/10/26/employeeShiftRosteringModelingGuideB.png&quot; alt=&quot;employeeShiftRosteringModelingGuideB&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_going_further&quot;&gt;Going further&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To find more inspiration on modeling your domain, take a look at the examples.
Also check out the details of shadow variables and chained variables in &lt;a href=&quot;https://www.optaplanner.org/learn/documentation.html&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Does this guide help you to create a better model?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2016/08/07/ADecadeOfOptaPlanner.html</id>
            <title type="html">A decade of OptaPlanner</title>
            <updated>2016-08-07T00:00:00+00:00</updated>
            <published>2016-08-07T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2016/08/07/ADecadeOfOptaPlanner.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="community"></category>
            <summary type="html">
                 10 years ago, I started a little project during my vacation. Nothing serious. Just a hobby, it wouldn&amp;#8217;t be big and professional. Another contraption in my long list of side projects in an ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;10 years ago, I started a little project during my vacation.
Nothing serious. &lt;em&gt;Just a hobby, it wouldn&amp;#8217;t be big and professional.&lt;/em&gt;
Another contraption in my long list of side projects in an attempt to build something cool.
Today, that same project is now the leading Open Source constraint satisfaction solver in Java: &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;.
It is used across the world to create better logistic schedules, such as &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/employeeRostering.html&quot;&gt;employee rosters&lt;/a&gt;,
&lt;a href=&quot;https://www.optaplanner.org/learn/useCases/vehicleRoutingProblem.html&quot;&gt;vehicle routes&lt;/a&gt; and &lt;a href=&quot;https://www.optaplanner.org/learn/useCases/cloudOptimization.html&quot;&gt;cloud distributions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How did my project become successful? What did I do right? What did I do wrong?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_proving_a_point&quot;&gt;Proving a point&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After graduating in 2003, I worked 2 years as a Java consultant and then took a job as an academic researcher on multi-agent systems.
Those were going to change the world. They didn&amp;#8217;t.
One of my colleagues was working on optimizing a nurse rostering problem and presented his approach to our research group.
His solution applied &lt;a href=&quot;https://en.wikipedia.org/wiki/Tabu_search&quot;&gt;Tabu Search&lt;/a&gt; (an optimization algorithm invented in the &apos;80s).
It worked well.
However, he had spent a lot of time and energy to manually implement the incremental delta calculation for each constraint in the fitness function.
Writing that code is difficult, time-consuming and error-prone, but absolutely required to get good results when scaling out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The year before, I had seen Mark Proctor&amp;#8217;s presentation at JavaPolis (now called DevoxxBE),
explaining the &lt;a href=&quot;https://www.drools.org/&quot;&gt;Drools&lt;/a&gt; rule engine and the RETE algorithm.
A stateful rule engine tracks changes so it only has to check the rules that might be affected by those changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Light bulb.
&lt;em&gt;What if we use Tabu Search but implement the fitness function in a rule engine?&lt;/em&gt;
I proposed it to the group. They laughed at me.
Of course, at the time I had zero experience with optimization algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Talk is cheap, so I implemented a proof of concept during my 2006 summer holiday
to schedule a simplistic lesson scheduling problem.
I called it Taseree. That&amp;#8217;s an abbreviation for Tabu Search Rule Engine Evaluation.
Later that year, I added 2 more examples (N Queens and TTP) and open sourced it on &lt;a href=&quot;https://sourceforge.net/projects/taseree/&quot;&gt;SourceForge&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nobody ever used Taseree, let alone deployed it in a production environment.
Turns out &lt;strong&gt;if you don&amp;#8217;t release it, nobody uses it.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_research_competitions&quot;&gt;Research competitions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is probably where the story would have ended - just like my dozens of other hobby projects of that period.
But I heard about a few academic research competitions: given an optimization problem, find the best solution for each dataset in 5 minutes.
So I entered the &lt;em&gt;International Timetabling Competition 2007&lt;/em&gt; to solve an exam rostering problem.
I finished &lt;a href=&quot;http://www.cs.qub.ac.uk/itc2007/winner/finalorder.htm&quot;&gt;4th&lt;/a&gt;. Out of maybe two hundred contenders.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I must have been doing something right. But I did a lot of things wrong, too.
The winner had also open sourced his implementation and when we started discussing and comparing our implementation,
we learned a lot from each other.
It turns out there are many ways to skin a cat and there are far more ways to implement Tabu Search.
So I started implementing alternative algorithms. That made me (and later Lukáš) write the &lt;a href=&quot;https://www.youtube.com/watch?v=JpcPEieU3Cg&quot;&gt;benchmarker&lt;/a&gt; toolkit, to compare those algorithms statistically.
All just to rank better in the next competition. It takes an hour to understand these algorithms, but 10 000 hours to master them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Motivation is key.&lt;/strong&gt; Find a way to motivate yourself to build the next feature, especially in the absence of a paycheck.
And avoid creating technical debt: nothing is more demotivating in a hobby project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another advantage was that each competition results in a new example.
So I had to &lt;em&gt;eat my own dog food&lt;/em&gt;.
I ended up doing a lot of framework changes to make it easier for me to implement those use cases.
This is an important, old rule in project management: &lt;em&gt;Those that create the pain, should feel the pain.&lt;/em&gt;
Writing examples against a predefined set of requirements, is a great way to feel the pain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_no_man_is_an_island&quot;&gt;No man is an island&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Around the same time I reached out to the Drools team,
simply by &lt;strong&gt;&lt;a href=&quot;https://www.optaplanner.org/community/getHelp.html&quot;&gt;joining their IRC channel&lt;/a&gt;&lt;/strong&gt;.
I started talking. Networking really. I learned what I needed to learn.
By September 2007, Mark invited me to make Taseree a subproject of Drools and we called it Drools Solver.
So I cleaned up the code, removed the spring-core dependency (which I had dragged in for no good reason except to have an XML configuration)
and wrote the first chapter of the reference manual. It got released as part of Drools 5.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By December 2007, I gave my first presentation about Drools Solver&amp;#8217;s exam rostering example
at a late evening Bird of a Feather session at JavaPolis, for about 20 developers.
I had prepared my text word by word in advance and read it out aloud.
Not my best moment. But they did seem to like my demo though.
I am not a natural-born presenter,
but I soon realized that &lt;a href=&quot;https://www.optaplanner.org/learn/slides.html&quot;&gt;great slides&lt;/a&gt; and &lt;a href=&quot;https://www.optaplanner.org/learn/video.html&quot;&gt;polished demos&lt;/a&gt; can make up for that.
These days I can step into a room - unprepared - and talk for 5 days without showing the same slide or demo twice.
Presenting skills can be &lt;a href=&quot;http://presentationpatterns.com/&quot;&gt;acquired&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2008, I heard about the first production use of Drools Solver.
A consultant had seen my presentation at JavaPolis and he used it for an employee rostering problem.
He liked it. &lt;em&gt;So I expected him to tell the world about it.&lt;/em&gt; He didn&amp;#8217;t. He had already moved on to his next project.
&lt;strong&gt;To get people to use my project, they need to know it first&lt;/strong&gt;.
I needed to toot my own horn.
So I wrote a few articles about Drools Solver, published them to a few Java news sites, recorded a video even and even got a &lt;a href=&quot;https://twitter.com/GeoffreyDeSmet&quot;&gt;Twitter account&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_perseverance&quot;&gt;Perseverance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up to 2008, I had enough spare time in my personal life to dedicate several hours per week on Drools Solver.
But then I bought an old house with my girlfriend (who&amp;#8217;s now my wonderful wife) and I spent most of my free time renovating it.
This naturally stalled development, often for months at a time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meanwhile, I learned more about other, similar projects. And they seemed to have more people working on them.
And they had sales people. It was a race and my project was falling behind.
I needed to find a way to get paid to work on it. A way to &lt;em&gt;make my hobby my job&lt;/em&gt;.
No matter how good the code is technically, &lt;strong&gt;without a proper business model behind it, an Open Source project is unsustainable.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During this tough period, I regularly considered giving up my Open Source project a few times.
Somehow, I couldn&amp;#8217;t. &lt;em&gt;I just soldiered on.&lt;/em&gt; And in the end, it all worked out well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ironically, this was also the period when the project became successful:
downloads took off, the forum became vibrant, I got to talk at more conferences and the first &lt;a href=&quot;https://github.com/kiegroup/optaplanner/pulls?q=is%3Apr+is%3Aclosed&quot;&gt;Pull Request&lt;/a&gt; arrived.
Due to its success, more bugs surfaced - so I heavily invested in unit tests and integration tests.
By the end of 2009 I also renamed the project to Drools Planner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luckily Red Hat - sponsor of the Drools project - had noticed my steady stream of contributions.
They originally hired me to work on Drools itself, but as of January 2013 they assigned me full time on Planner.
Red Hat pays the wage of the core engineers of many Open Source projects
and makes a business from selling support subscriptions and consultancy for those projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_productization_going_enterprise&quot;&gt;Productization: going enterprise&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the end of 2012, my little project had already grown quite big: it had a high test coverage with unit, integration and stress tests,
a complete reference manual, demonstrable examples, Javadocs and a growing community.
But there were also many services missing before a Fortune 500 company would consider using it in mission critical software.
&lt;strong&gt;Technical excellence alone doesn&amp;#8217;t suffice.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Red Hat doesn&amp;#8217;t just employ the core engineers of an open source project, such as Drools or OptaPlanner.
It also builds out a dedicated QA team, support team, consultancy team, security team and productized build/documentation team.
This enables customers to deploy our Open Source software in large scale production cases confidently.
In 2013, we started this process, called productization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was no longer alone on the project. Quality Assurance, Product Management and our productization build/document team got involved to strengthen it.
Our QA engineers double-checked the code, increased test coverage, added performance regression tests,
certified it on a lot of environments (including Windows, IBM JDK, OSGi and other notorious technologies) and guess what - they found bugs (and still do on occasion).
Meanwhile our Product Manager helped organizationally.
We talked to customers and helped complex use cases succeed: all very satisfying.
And I got to travel to interesting places around the globe, such as San Francisco, Boston, Buenos Aires, London, Paris and Tokyo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meanwhile, &lt;em&gt;our&lt;/em&gt; project also graduated from the Drools project to become a top-level project.
So we had to &lt;a href=&quot;https://www.optaplanner.org/community/droolsPlannerRenamed.html&quot;&gt;rename&lt;/a&gt; the project again, one last time (I promise), to OptaPlanner.
Changing a project&amp;#8217;s name is a delicate operation: it always reduces the mind share. Try to avoid it.
We also created the optaplanner.org website as a one-stop location for all information. &lt;strong&gt;Centralization of information is essential to pull the community together.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In March 2014, we released the first version with &lt;em&gt;tech preview&lt;/em&gt; support from Red Hat, as part of &lt;a href=&quot;https://www.optaplanner.org/product/services.html&quot;&gt;the BRMS subscription&lt;/a&gt;.
And by March 2015, we upgraded it to &lt;em&gt;full enterprise support&lt;/em&gt;.
Sales took off. So earlier this year, we could hire &lt;a href=&quot;https://www.optaplanner.org/community/team.html&quot;&gt;a core engineer&lt;/a&gt; to develop OptaPlanner Workbench.
Meanwhile, all our code is still Open Source, under &lt;a href=&quot;https://www.optaplanner.org/code/license.html&quot;&gt;the Apache License&lt;/a&gt;
and thousands of projects use it. A win-win situation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The future is bright.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2016/04/18/7WaysToFailYourOptimizationProject.html</id>
            <title type="html">7 ways to fail your optimization project</title>
            <updated>2016-04-18T00:00:00+00:00</updated>
            <published>2016-04-18T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2016/04/18/7WaysToFailYourOptimizationProject.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="insight"></category>
                    <category term="feature"></category>
                    <category term="howto"></category>
            <summary type="html">
                 When you put your optimization project into production, your enterprise will decrease expenses, increase customer satisfaction, improve employee happiness and/or reduce its ecological footprint. ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you put your optimization project into production,
your enterprise will decrease expenses, increase customer satisfaction,
improve employee happiness and/or reduce its ecological footprint.
But if the end-users reject your implementation, none of that will happen.
Let&amp;#8217;s take a look why they might do that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 7 common ways to fail your optimization project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Ignore the user&amp;#8217;s plan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neglect a hard constraint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decide all score weights up front&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change tentative plans drastically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Presume there is always a feasible plan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average out fairness or load balancing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Focus on only 1 stakeholder&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a look at each one in detail and &lt;strong&gt;the 7 ways to make your project a success&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_1_keep_the_user_in_control&quot;&gt;1. Keep the user in control&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Initially, nobody trusts a new system that takes input (the planning problem) and produces output (the solution)
through a non-obvious transformation.
To build this trust, allow the user to override OptaPlanner&amp;#8217;s choices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example in Cloud Balancing, if the user locks the green process to computer Y,
the planning engine must respect that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/04/18/keepTheUserInControlSubset.png&quot; alt=&quot;keepTheUserInControlSubset&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not an all-or-nothing situation: &lt;strong&gt;the user and OptaPlanner work together&lt;/strong&gt;
(and the user is in charge). For a detailed use case, see &lt;a href=&quot;https://www.optaplanner.org/blog/2013/10/11/WillSkynetControlOurSchedule.html&quot;&gt;this blog with video&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically, this is implemented through &lt;em&gt;immovable planning entities&lt;/em&gt; (as explained in &lt;a href=&quot;https://www.optaplanner.org/learn/documentation.html&quot;&gt;the OptaPlanner reference manual&lt;/a&gt;):
a simple boolean method that checks if the process is pinned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_2_implement_all_hard_constraints&quot;&gt;2. Implement all hard constraints&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;An optimal solution that takes only 99% of the hard constraints into account is 100% useless.&lt;/strong&gt;
So implement all hard constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example in Vehicle Routing, let&amp;#8217;s suppose we need to pickup nuclear cargo too,
but forget to add a hard constraint to pick those up with a special vehicle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/04/18/optimalWithIncompleteConstraintsSubset.png&quot; alt=&quot;optimalWithIncompleteConstraintsSubset&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, taking that extra hard constraint into account can change the optimal solution entirely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically, OptaPlanner supports any type of constraint: unlike other solvers, it doesn&amp;#8217;t care if the constraint is linear, quadratic or worse.
As long as it can compare the score of any 2 solutions, it finds the best one.
That enables you to implement all constraints: none will be out of reach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_3_dont_hard_code_the_score_weights&quot;&gt;3. Don&amp;#8217;t hard-code the score weights&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most business people can&amp;#8217;t tell us the best score weights until they&amp;#8217;ve seen the impact of those weights on their schedule.
So allow the user to change the score weights at runtime and quickly see the effect of his/her changes on the solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example in Cloud Balancing: should we focus on load balancing or on cost reduction?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/04/18/parameterizeTheScoreWeightsSubset.png&quot; alt=&quot;parameterizeTheScoreWeightsSubset&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some constraints work together, others work against each other.
Especially for that last kind (as shown above), &lt;strong&gt;different stakeholders within the same enterprise can disagree on the score weights&lt;/strong&gt;.
Empower the project owner to settle those negotiations by directly changing the weights in the UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically, simply add a singleton with the score weights in the dataset and use those weights in the constraints.
Look for a &lt;code&gt;*ConstraintConfiguration&lt;/code&gt; class in some of the OptaPlanner examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_4_avoid_disruption_when_replanning&quot;&gt;4. Avoid disruption when replanning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At some point, a plan becomes tentative or even final.
Any changes after that point can be very disruptive to anyone involved in that plan.
But ad hoc changes, such as an employee calling in sick or malfunctioning equipment,
will make your plan infeasible and force you to replan it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example in Cloud Balancing, a computer might break down:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/04/18/nonvolatileReplanningSubset.png&quot; alt=&quot;nonvolatileReplanningSubset&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The middle solution is slightly more cost-effective, but the last solution is far less disruptive.
&lt;strong&gt;Especially when scheduling people, who planned their social life based on the tentative schedule,
it&amp;#8217;s important to minimize disruption.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically, we penalize the number of processes that moved,
by keeping track of the old tentative computer assignment for each process too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another way to make this easier is to also do backup planning.
For example in employee rostering, we assign 3 reserve shifts as backups to 3 employees:
if another employee calls in sick, one of the reserve employees takes over automatically,
without replanning. Only when more than 3 employees call in sick, we actually need to do (non disruptive) replanning.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_5_account_for_overconstrained_planning&quot;&gt;5. Account for overconstrained planning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can happen that there aren&amp;#8217;t enough resources to solve a planning problem without breaking a hard constraint.
In that case, &lt;strong&gt;instead of delivering an infeasible plan, it&amp;#8217;s often better to leave some entities unassigned&lt;/strong&gt; (as little as possible of course).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example in employee rostering, when we need to assign 4 late shifts on the same day and we only have 3 employees,
it&amp;#8217;s better to leave 1 shift unassigned than to assign an employee to 2 shifts at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Going one step further, we can add virtual resources to indicate how many extra resources to buy/hire.
For example in the same employee rostering case, we could add 2 virtual employees.
After solving, it will use one of these
which tell us that we can make the schedule feasible again by hiring 1 extra employee.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically, we need to treat unassigned (or virtual assigned) entities differently in the constraints
and add a medium score level (between hard and soft) to penalize the number of unassigned (or virtual assigned) entities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_6_be_fair_load_balancing&quot;&gt;6. Be fair (load balancing)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When distributing work across humans (or machines), don&amp;#8217;t use averages.
Instead, &lt;strong&gt;the worst off human (or machine) counts the most.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example in employee rostering we want to distribute the shifts evenly,
but we can&amp;#8217;t make it perfectly fair due to skill and other hard constraints.
It&amp;#8217;s not about minimizing overtime on average,
but about minimizing overtime of the worst off employee:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/04/18/fairnessScoreConstraintPitfallSubset.png&quot; alt=&quot;fairnessScoreConstraintPitfallSubset&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the last solution, more employees are happy, but the worst employee is worse off, so it&amp;#8217;s less fair than the middle solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically, implement it as explained in &lt;a href=&quot;https://www.optaplanner.org/learn/documentation.html&quot;&gt;the OptaPlanner reference manual&lt;/a&gt;:
penalize the square of the number of shifts per employee.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_7_create_a_win_win_for_all_stakeholders&quot;&gt;7. Create a win-win for all stakeholders&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a big organization, many different groups will want to tune the constraint weights in their favor.
For example: management will often want to maximize cost reduction,
but unions will want to maximize employee happiness and job security.
Whenever possible, &lt;strong&gt;aim for a solution that improves the status quo for all stakeholders&lt;/strong&gt;.
They can always negotiate the tuning of the score weights later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a war story that came to my ear, I&amp;#8217;ve heard about a VRP case for inspectors
that heavily reduced driving time to inspection sites, allowing the same work to be done in less time.
&lt;strong&gt;Because the prototype focused only on using fewer inspectors, the unions shot it down.&lt;/strong&gt;
If instead the prototype had focused on increasing inspection time,
it would have increased inspection quality, reduced worker stress, lowered fuel expenses
and decreased the need for new hires. That&amp;#8217;s far more acceptable to all stakeholders.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Project success doesn&amp;#8217;t depend on solution quality alone. There are a lot of factors that can make or break a project.
In this article I highlighted some of the more social ones.
Luckily, you can handle these additional requirements with &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; too.
Don&amp;#8217;t let them catch you off guard!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2016/02/12/WhatIsTheBottleneckInMySolver.html</id>
            <title type="html">What is the bottleneck in my Solver?</title>
            <updated>2016-02-12T00:00:00+00:00</updated>
            <published>2016-02-12T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2016/02/12/WhatIsTheBottleneckInMySolver.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="insight"></category>
                    <category term="benchmark"></category>
                    <category term="algorithm"></category>
            <summary type="html">
                 Once we have a vanilla setup of an OptaPlanner project, where should we invest our time to improve it? How can I get a better solution faster? What&amp;#8217;s preventing my solver to scale better? ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have a vanilla setup of an OptaPlanner project,
where should we invest our time to improve it?
How can I get a better solution faster?
What&amp;#8217;s preventing my solver to scale better?
How can I track down my bottleneck?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_scapegoat_machine_performance&quot;&gt;The scapegoat: machine performance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt; &amp;#8220;We need faster hardware.&amp;#8221; &lt;/em&gt; It is the typical knee-jerk reaction to any performance problem.
However, for most optimization problems, throwing hardware at the problem doesn&amp;#8217;t help much
(in part because of &lt;a href=&quot;https://www.optaplanner.org/blog/2014/03/27/IsTheSearchSpaceOfAnOptimizationProblemReallyThatBig.html&quot;&gt;the size of the search space&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, presume that the score of the best solution evolves like this over time:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/02/12/bestScoreStatistic.png&quot; alt=&quot;bestScoreStatistic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At any point in time (X axis), it shows the score of the best solution (Y axis) found until then.
Notice that if our hardware is twice as fast (so if we need only half the amount of time),
we&amp;#8217;d get the score we&amp;#8217;re currently getting at 2 mins 30 secs, which is about the same as the score we&amp;#8217;re getting after 5 minutes.
So throwing hardware at the problem would hardly improve the solution.
In this case, performance isn&amp;#8217;t the bottleneck.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_measure_dont_guess&quot;&gt;Measure, don&amp;#8217;t guess&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of wildly guessing at the problem, it&amp;#8217;s better to configure the Solver in
&lt;a href=&quot;https://www.youtube.com/watch?v=JpcPEieU3Cg&quot;&gt;the OptaPlanner Benchmarker&lt;/a&gt;
and let it generate a useful benchmark report.
In that report, look at the &lt;em&gt;best score over time&lt;/em&gt; graph (similar to the one shown above)
and check if you can see any of these 3 patterns on it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2016/02/12/letTheBestScoreStatisticGuideYou.png&quot; alt=&quot;letTheBestScoreStatisticGuideYou&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If performance is the bottleneck (left pattern), check your benchmark report for the &lt;em&gt;average calculation count per second&lt;/em&gt;.
It&amp;#8217;s probably too low, maybe due to a bottleneck in just one of your score constraints.
Using faster hardware well help in this case (although improving score calculation speed is usually better).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If local optima are the problem (middle pattern), try adding coarse-grained moves
(but don&amp;#8217;t remove the fine-grained moves).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the optimization algorithm is the problem (right pattern), try different optimization algorithms in the solver configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A JVM profiler (such as JProfiler or VisualVM) can be very helpful in the first case, but not in the other 2 cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When facing a performance or scalability challenge, don&amp;#8217;t randomly improve parts of your code.
Remember that &lt;em&gt;premature optimization is the root of all evil&lt;/em&gt;.
Instead, let the &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; Benchmarker guide you
and fix the biggest bottlenecks first.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/12/01/TimeSchedulingDesignPatterns.html</id>
            <title type="html">Time scheduling design patterns</title>
            <updated>2015-12-01T00:00:00+00:00</updated>
            <published>2015-12-01T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/12/01/TimeSchedulingDesignPatterns.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="design"></category>
                    <category term="algorithm"></category>
            <summary type="html">
                 Designing an efficient domain model for a scheduling problem that involves time (or dates) can seem difficult. Typical use cases are course timetabling, meeting scheduling, vehicle routing with ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Designing an efficient domain model for a scheduling problem that involves time (or dates) can seem difficult.
Typical use cases are course timetabling, meeting scheduling, vehicle routing with time windows and TV advertisement scheduling.
Let&amp;#8217;s take a look at design patterns to model such problems in OptaPlanner.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_is_starting_time_a_planning_variable&quot;&gt;Is starting time a planning variable?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some cases, the starting time of planning entities doesn&amp;#8217;t change during planning.
For example in the hospital bed planning example, the arrival date of each patient is already fixed in advance
(potentially by another planning stage).
Therefore, none of the design patterns below apply, because the starting time is not a planning variable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, in many cases it does change and we do need to decide the starting time of each planning entity.
In such cases, normally one of these 3 design patterns applies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/12/01/assigningTimeToPlanningEntities.png&quot; alt=&quot;assigningTimeToPlanningEntities&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_timeslot_pattern&quot;&gt;Timeslot pattern&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;em&gt;Timeslot&lt;/em&gt; pattern, all entities have &lt;strong&gt;the same duration&lt;/strong&gt;. For example in course timetabling, all lecture take 1 hour.
Each lecture is assigned to 1 room and 1 timeslot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/4meWIhPRVn8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_timegrain_pattern&quot;&gt;TimeGrain pattern&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;em&gt;TimeGrain&lt;/em&gt; pattern, the entities have different durations, but they start at &lt;strong&gt;a course-grained time unit&lt;/strong&gt;, such as 15 minutes.
For most human activities, scheduling on second or subsecond accuracy is pointless:
for example in meeting scheduling, expecting people to show up at exactly 3 seconds after 9 o&amp;#8217;clock for a meeting is overly optimistic.
Therefore scheduling on such a fine-grained accuracy would actually be counter-productive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/wLK2-4IGtWY?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chained_through_time_pattern&quot;&gt;Chained Through Time pattern&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;em&gt;Chained Through Time&lt;/em&gt; pattern, a person or machine continuously works on 1 planning entity at time in sequence.
For example in vehicle routing with time windows, each vehicle drives from customer to customer, so it handles 1 customer at a time.
The starting time of each planning entity is calculated based on the ending time of the previous planning entity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/BxO3UFmtAPg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This pattern also works well for scheduling TV advertisements, because each advertisement starts when the previous ends.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When facing a time scheduling problem, take a look which of the design patterns best fits your requirements.
It will improve your development speed as well as solver efficiency and scalability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the flexibility, advantages and disadvantages of each design pattern,
read &lt;a href=&quot;https://www.optaplanner.org/learn/documentation.html&quot;&gt;the documentation&lt;/a&gt; (&lt;code&gt;6.4.0.Beta1&lt;/code&gt; or later).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/10/01/SneakPeekAtOptaPlannerWorkbench.html</id>
            <title type="html">Sneak peek at OptaPlanner Workbench</title>
            <updated>2015-10-01T00:00:00+00:00</updated>
            <published>2015-10-01T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/10/01/SneakPeekAtOptaPlannerWorkbench.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="workbench"></category>
            <summary type="html">
                 One critical bit missing for OptaPlanner is a web application to define an optimization problem in a web UI and to deploy it to the cloud. Drools and jBPM both already have such a web ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One critical bit missing for OptaPlanner is a web application to define an optimization problem in a web UI
and to deploy it to the cloud.
Drools and jBPM both already have such a web application: &lt;em&gt;Drools Workbench&lt;/em&gt; and &lt;em&gt;jBPM Workbench&lt;/em&gt;.
So it&amp;#8217;s no big surprise that the OptaPlanner version of this will be called &lt;em&gt;OptaPlanner Workbench&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the side line, we&amp;#8217;ve built &lt;strong&gt;a quick prototype&lt;/strong&gt; to investigate what OptaPlanner Workbench could do (thanks Walter, Toni and Michael).
Let&amp;#8217;s take a sneak peek at that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_video&quot;&gt;Video&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/XB1_juPoWiU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_cloudbalancing_example&quot;&gt;The CloudBalancing example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner&amp;#8217;s Quick Start shows how to implement the Cloud Balancing example with only the OptaPlanner engine.
Let&amp;#8217;s take a look how that example could look like in the OptaPlanner Workbench:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_define_the_data_objects&quot;&gt;Define the data objects&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s how we&amp;#8217;d define the &lt;code&gt;Computer&lt;/code&gt; data object:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/10/01/workbenchDataObjectCBComputer.png&quot; alt=&quot;workbenchDataObjectCBComputer&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Process&lt;/code&gt; data object is special because its &lt;code&gt;computer&lt;/code&gt; field changes during planning,
so we annotate that &lt;code&gt;computer&lt;/code&gt; field as a &lt;em&gt;planning variable&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/10/01/workbenchDataObjectCBProcess.png&quot; alt=&quot;workbenchDataObjectCBProcess&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_define_the_solver_configuration&quot;&gt;Define the Solver configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Solver Configuration Editor we can pick the Score type and define how long to solve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/10/01/workbenchSolverConfigEditorCB.png&quot; alt=&quot;workbenchSolverConfigEditorCB&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the future, we would add support for all termination types, optimization algorithm tweaking and far more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deploy_to_the_execution_server&quot;&gt;Deploy to the Execution Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once all bits are ready, we would deploy it to the OptaPlanner Execution Service,
which opens a REST service in the cloud:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/10/01/optaplannerWorkbenchAndExecutionServer.png&quot; alt=&quot;optaplannerWorkbenchAndExecutionServer&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a client sends a problem to this REST service as XML or JSON,
then the Execution Server solves it on one of its servers and returns the solution to the client.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner Workbench is built on top of the OptaPlanner engine, but it will not replace it, nor curtail it:
You&amp;#8217;ll still be able to embed the OptaPlanner engine as before, without the Workbench, if you so desire.
But the Workbench will offer new opportunities for many use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re still looking into how and when we&amp;#8217;ll fracture the Workbench development into our schedule,
but in time, the OptaPlanner Workbench will offer a business user-friendly web interface to define an optimization problem.
It will be part of the KIE Workbench (also known as Business Central) and seamlessly integrate with Drools and jBPM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/09/30/HowLuckyAreYourRandomSeeds.html</id>
            <title type="html">How lucky are your random seeds?</title>
            <updated>2015-09-30T00:00:00+00:00</updated>
            <published>2015-09-30T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/09/30/HowLuckyAreYourRandomSeeds.html" rel="alternate" type="text/html" />
            <author>
                <name>oskopek</name>
            </author>
                    <category term="production"></category>
            <summary type="html">
                 For a long time, it was uncertain if choosing different random seeds impacted the results of OptaPlanner. Are there random seeds that yield statistically significant improvements to the results ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a long time, it was uncertain if choosing different random seeds impacted the results of OptaPlanner.
Are there random seeds that yield statistically significant improvements to the
results of your solver? A new feature in OptaPlanner&amp;#8217;s Benchmarker will help us figure it out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_statistical_benchmarking&quot;&gt;Statistical benchmarking&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As of version 6.4.0.Beta1, the benchmarker will support &lt;strong&gt;statistical benchmarking&lt;/strong&gt;&amp;#8201;&amp;#8212;&amp;#8201;built-in support for running individual benchmarks repeatedly to eliminate negative influences
of the hardware or operating system on our benchmark results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Benchmarker will visualize the multiple runs in the report:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/09/30/statisticalBenchmarkingDropdown.png&quot; alt=&quot;Statistical Benchmarking Dropdown Image&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner also shows us the distribution of the scores of repeated benchmark runs and compares them with
the other solver configurations for a given problem (dataset):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/09/30/statisticalBenchmarkingBoxPlot.png&quot; alt=&quot;Statistical Benchmarking Box Plot Image&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can enable it by adding just one line into our configuration: &lt;code&gt;&amp;lt;subSingleCount&amp;gt;10&amp;lt;/subSingleCount&amp;gt;&lt;/code&gt;.
For more information, read the section on statistical benchmarking in the documentation for OptaPlanner 6.4.0.Beta1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the help of statistical benchmarking we can be more sure than ever before that our assumptions about solver
configuration reliability in production are correct.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_methodology&quot;&gt;Benchmark methodology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To reproduce, we need OptaPlanner 6.4.0.Beta1 or newer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We run 3 of OptaPlanner&amp;#8217;s use cases with a &lt;code&gt;subSingleCount&lt;/code&gt; greater than 1 in environment mode &lt;code&gt;PRODUCTION&lt;/code&gt; (as of 7.0 renamed to &lt;code&gt;NON_REPRODUCIBLE&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OptaPlanner supports several so-called &lt;strong&gt;environment modes&lt;/strong&gt;.
One of them, &lt;code&gt;PRODUCTION&lt;/code&gt;,
is obviously meant for runs in a production environment.
In this environment mode, OptaPlanner will choose a &lt;strong&gt;random seed&lt;/strong&gt; for its
&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#randomNumberGenerator&quot;&gt;pseudo-random number generator&lt;/a&gt;
(PRNG) at random (JDK default).
Read more about this &lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#environmentModeProduction&quot;&gt;in the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use the basic PRNG implementation in all our benchmarks (&lt;code&gt;java.util.Random&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specific configuration changes:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All of these configuration files are from the OptaPlanner Examples module, version &lt;code&gt;6.4.0.Beta1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In all use-cases: in &lt;code&gt;*BenchmarkConfig.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remove all single/problem statistics (all &lt;code&gt;&amp;lt;singleStatisticType&amp;gt;&lt;/code&gt; and &lt;code&gt;problemStatisticType&lt;/code&gt; elements).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;&amp;lt;environmentMode&amp;gt;PRODUCTION&amp;lt;/environmentMode&amp;gt;&lt;/code&gt;
to the inherited solver configuration (&lt;code&gt;&amp;lt;inheritedSolverBenchmark&amp;gt;&lt;/code&gt; element).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the &lt;code&gt;&amp;lt;parallelBenchmarkCount&amp;gt;&lt;/code&gt; element (defaults to 1&amp;#8201;&amp;#8212;&amp;#8201;single threaded runs).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;General benchmark: in &lt;code&gt;generalOptaPlannerBenchmarkConfig.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;&amp;lt;subSingleCount&amp;gt;10&amp;lt;/subSingleCount&amp;gt;&lt;/code&gt; to the inherited solver benchmark configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Curriculum Course benchmark: in &lt;code&gt;curriculumCourseBenchmarkConfig.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;subSingleCount&amp;gt;6&amp;lt;/subSingleCount&amp;gt;&lt;/code&gt; to the inherited solver benchmark configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove datasets (&lt;code&gt;&amp;lt;inputSolutionFile&amp;gt;&lt;/code&gt; elements) comp08-comp14 (keep only comp01-comp07).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the &lt;code&gt;FIRST_FIT_DECREASING&lt;/code&gt; solver benchmark (&lt;code&gt;&amp;lt;solverBenchmark&amp;gt;&lt;/code&gt; element).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MachineReassignment:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;&amp;lt;subSingleCount&amp;gt;8&amp;lt;/subSingleCount&amp;gt;&lt;/code&gt; to the inherited solver benchmark configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the &lt;code&gt;original&lt;/code&gt; and &lt;code&gt;lateAcceptance1000&lt;/code&gt; solver benchmark (&lt;code&gt;&amp;lt;solverBenchmark&amp;gt;&lt;/code&gt; elements).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each run takes about 10 hours.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every planning problem runs for at least 5 minutes. Every run starts with a 30 second JVM warm up which is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other VM arguments: &lt;code&gt;-Xmx8192m&lt;/code&gt;&lt;br&gt;
Oracle JDK version: &lt;code&gt;1.7.0_79&lt;/code&gt;&lt;br&gt;
Software: &lt;code&gt;Linux version 4.1.6-201.fc22.x86_64&lt;/code&gt;&lt;br&gt;
Hardware: &lt;code&gt;Intel&amp;#174; Core&amp;#8482; i7-4810MQ CPU @ 2.80GHz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To reproduce these benchmarks locally, &lt;a href=&quot;https://www.optaplanner.org/code/sourceCode.html&quot;&gt;build OptaPlanner from source&lt;/a&gt;
and run the classes
&lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/main/optaplanner-examples/src/main/java/org/optaplanner/examples/app/GeneralOptaPlannerBenchmarkApp.java&quot;&gt;GeneralOptaPlannerBenchmarkApp&lt;/a&gt;,
&lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/main/optaplanner-examples/src/main/java/org/optaplanner/examples/curriculumcourse/optional/benchmark/CurriculumCourseBenchmarkApp.java&quot;&gt;CurriculumCourseBenchmarkApp&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/main/optaplanner-examples/src/main/java/org/optaplanner/examples/machinereassignment/optional/benchmark/MachineReassignmentBenchmarkApp.java&quot;&gt;MachineReassignmentBenchmarkApp&lt;/a&gt;
after applying the configuration changes described above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_results&quot;&gt;Benchmark results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can view the individual benchmark reports at the following links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/optaplanner/blog/benchmark/2015-09-30/general&quot;&gt;General benchmark report&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This benchmark solves one or two datasets of different use-cases with only 1 solver configuration per use-case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There were no differences in hard scores between runs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the problem benchmark score distribution charts of runs,
we can see that there are no outliers (they would be drawn as circles in the charts).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The biggest difference between runs was in the CurriculumCourse use-case, dataset &lt;code&gt;comp08&lt;/code&gt;:
the best run was 17% better than the worst one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/optaplanner/blog/benchmark/2015-09-30/curriculumcourse&quot;&gt;Curriculum Course benchmark report&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This benchmark solves 7 datasets of the same use-case with 2 different solver configurations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There were differences in hard score between runs (&lt;code&gt;comp02&lt;/code&gt;, &lt;code&gt;comp05&lt;/code&gt;, &lt;code&gt;comp06&lt;/code&gt;)&amp;#8201;&amp;#8212;&amp;#8201;this use-case is prone to them.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Specifically, Tabu Search on this use-case is prone to finding an infeasible solution - Late Acceptance only had 5
infeasible runs (4 of them on the &lt;code&gt;comp05&lt;/code&gt; dataset and 1 on &lt;code&gt;comp02&lt;/code&gt;) as compared to Tabu Search&amp;#8217;s 13 infeasible runs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There were no outliers on the hard score level.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There were 2 outliers: 1 in a run of the Late Acceptance solver configuration
(in &lt;code&gt;comp07&lt;/code&gt;, where the worst run was 25% worse than the best) and 1 in a run of the Tabu Search solver configuration
(in &lt;code&gt;comp01&lt;/code&gt; where the best run was 91% better than the worst).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The biggest difference between runs (without outliers) in a single dataset was using Tabu Search on &lt;code&gt;comp07&lt;/code&gt;,
where the best run was about 27% better than the worst.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/optaplanner/blog/benchmark/2015-09-30/machinereassignment&quot;&gt;Machine Reassignment benchmark report&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This benchmark solves 10 datasets of the same use-case with 2 different solver configurations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There were no differences in hard scores between runs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The only outlier was in a run of the Late Acceptance solver configuration in &lt;code&gt;model_b_7&lt;/code&gt;,
where the best run was still only ~3% better than the worst.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The biggest difference between runs was about 8% (Tabu Search on &lt;code&gt;model_b_3&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the problem benchmark score distribution charts, the reliability comparison of different solver configurations
is visualized very nicely (see for example &lt;code&gt;model_b_8&lt;/code&gt;&amp;#8201;&amp;#8212;&amp;#8201;Late Acceptance is a lot more reliable in that dataset).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In this use-case, we can see a significant triumph of one solver configuration against the other:
f.e. on the datasets &lt;code&gt;model_b_5&lt;/code&gt; and &lt;code&gt;model_b_9&lt;/code&gt;
(the worst Tabu Search run on these datasets wins over the best Late Acceptance run by a big margin).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_summary&quot;&gt;Summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The difference between the best and worst run can seem large, but this measurement varies wildly per dataset&amp;#8201;&amp;#8212;&amp;#8201;there are datasets, where all solver configuration runs vary greatly
(&lt;code&gt;comp01&lt;/code&gt; of CurriculumCourse) and then there are datasets,
where all solver configuration runs vary only by a tiny bit (&lt;code&gt;model_b_4&lt;/code&gt; of MachineReassignment).
This indicates that the variance is more influenced by the dataset than by the random seed or solver configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The various outliers suggest that there are &amp;#8220;lucky&amp;#8221; and &amp;#8220;unlucky&amp;#8221; random seeds,
but they don&amp;#8217;t seem to influence the results in any significant way &lt;strong&gt;in general&lt;/strong&gt;.
Again, there are specific datasets and use-cases which are more or less prone to changes in random seeds&amp;#8201;&amp;#8212;&amp;#8201;we can make use of statistical benchmarking to confirm if this is or isn&amp;#8217;t our case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_do_we_need_a_lucky_random_seed_to_get_optimal_results&quot;&gt;Do we need a lucky random seed to get optimal results?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need more than just a lucky random seed to get optimal results.
My personal opinion is, that our test results were &lt;strong&gt;inconclusive&lt;/strong&gt;.
There are several indicators:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We can&amp;#8217;t tell which random seed is better, because even a bad performing one in a 5 minute run could generate awesome moves in a 10 minute run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On some datasets, our scores were stable whereas on others, the results varied wildly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In production, definitely use the &lt;code&gt;PRODUCTION&lt;/code&gt; environment mode and let OptaPlanner choose a random seed on random.
A good choice might save you or your business quite a bit of money,
but don&amp;#8217;t expect to always find a random seed that can affect the outcome in any (statistically) significant way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/09/23/IntegratingJpaHibernateWithOptaPlanner.html</id>
            <title type="html">Integrating JPA Hibernate with OptaPlanner</title>
            <updated>2015-09-23T00:00:00+00:00</updated>
            <published>2015-09-23T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/09/23/IntegratingJpaHibernateWithOptaPlanner.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="integration"></category>
            <summary type="html">
                 We&amp;#8217;ve been improving the integration of OptaPlanner with the rest of JEE, so it&amp;#8217;s easier to build end user applications that just work. Let&amp;#8217;s take a look at the improved JPA ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve been improving the integration of OptaPlanner with the rest of JEE,
so it&amp;#8217;s easier to build end user applications that just work.
Let&amp;#8217;s take a look at the improved JPA Hibernate integration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_basics&quot;&gt;The basics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both JPA Hibernate and OptaPlanner work on POJOs (Plain Old Java Objects),
so just add some JPA annotations on your domain objects to persist them with JPA Hibernate
and add some OptaPlanner annotations to solve your optimization problem with OptaPlanner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On each problem fact class, there are usually only JPA annotations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@Entity // JPA annotation
public class Computer {

    private int cpuPower;
    private int memory;
    private int networkBandwidth;
    private int cost;

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On each planning entity class, there are both JPA and OptaPlanner annotations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@PlanningEntity // OptaPlanner annotation
@Entity // JPA annotation
public class Process {

    private int requiredCpuPower;
    private int requiredMemory;
    private int requiredNetworkBandwidth;

    @PlanningVariable(...) // OptaPlanner annotation
    @ManyToOne() // JPA annotation
    private Computer computer;

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don&amp;#8217;t confuse a JPA entity (anything object that gets persisted in the database)
with an OptaPlanner planning entity (an object that gets changed by OptaPlanner during solving).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_persisting_a_score&quot;&gt;Persisting a score&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, JPA Hibernate will put a &lt;code&gt;Score&lt;/code&gt; in a &lt;code&gt;BLOB&lt;/code&gt; column through Java serialization.
This is undesirable because it prevents using the score in a JPA-QL query.
Furthermore, it triggers database issues when upgrading the OptaPlanner version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, OptaPlanner &lt;code&gt;6.4.0.Beta1&lt;/code&gt; has a new jar &lt;code&gt;optaplanner-persistence-jpa&lt;/code&gt; that contains a Hibernate type for each score type.
Use it like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@PlanningSolution // OptaPlanner annotation
@Entity // JPA annotation
@TypeDef(defaultForType = HardSoftScore.class, typeClass = HardSoftScoreHibernateType.class) // Hibernate annotation
public class CloudBalance implements Solution&amp;lt;HardSoftScore&amp;gt; {

    @Columns(columns = {@Column(name = &quot;hardScore&quot;), @Column(name = &quot;softScore&quot;)}) // JPA annotation
    private HardSoftScore score;

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This puts the &lt;code&gt;HardSoftScore&lt;/code&gt; into 2 &lt;code&gt;INTEGER&lt;/code&gt; columns, instead of a &lt;code&gt;BLOB&lt;/code&gt; column.
The OptaPlanner reference manual contain more information on how to deal with &lt;code&gt;BigDecimal&lt;/code&gt; and/or bendable scores properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cloning_pitfall&quot;&gt;Cloning pitfall&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a JPA model it&amp;#8217;s common that the problem facts reference the planning solution,
which can corrupt planning cloning (if the default planning cloner is used).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To overcome this, simply annotate the problem fact classes that reference the planning solution or a planning entity
with a &lt;code&gt;@DeepPlanningClone&lt;/code&gt; annotation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;@DeepPlanningClone // OptaPlanner annotation: Force the default planning cloner to planning clone this class too
@Entity // JPA annotation
public class Computer {

    @ManyToOne
    private CloudBalance cloudBalance;

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This way, the &lt;code&gt;Computer&lt;/code&gt; class is planning cloned too and the clone&amp;#8217;s &lt;code&gt;cloudBalance&lt;/code&gt; field will point to the &lt;code&gt;CloudBalance&lt;/code&gt; clone.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use the same domain classes for JPA Hibernate and OptaPlanner, there is no need duplicate your domain!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/07/31/WhatIsTheFastestGarbageCollectorInJava8.html</id>
            <title type="html">What is the fastest Garbage Collector in Java 8?</title>
            <updated>2015-07-31T00:00:00+00:00</updated>
            <published>2015-07-31T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/07/31/WhatIsTheFastestGarbageCollectorInJava8.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="production"></category>
            <summary type="html">
                 OpenJDK 8 has several Garbage Collector algorithms, such as Parallel GC, CMS and G1. Which one is the fastest? What will happen if the default GC changes from Parallel GC in Java 8 to G1 in Java ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenJDK 8 has several Garbage Collector algorithms, such as &lt;em&gt;Parallel GC&lt;/em&gt;, &lt;em&gt;CMS&lt;/em&gt; and &lt;em&gt;G1&lt;/em&gt;. Which one is the fastest?
What will happen if the default GC changes from Parallel GC in Java 8 to G1 in Java 9 (as currently proposed)?
Let&amp;#8217;s benchmark it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_methodology&quot;&gt;Benchmark methodology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run the same code 6 times with a different VM argument (&lt;code&gt;-XX:+UseSerialGC&lt;/code&gt;, &lt;code&gt;-XX:+UseParallelGC&lt;/code&gt;, &lt;code&gt;-XX:+UseConcMarkSweepGC&lt;/code&gt;, &lt;code&gt;-XX:ParallelCMSThreads=2&lt;/code&gt;, &lt;code&gt;-XX:ParallelCMSThreads=4&lt;/code&gt;, &lt;code&gt;-XX:+UseG1GC&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each run takes about 55 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other VM arguments: &lt;code&gt;-Xmx2048M -server&lt;/code&gt;&lt;br&gt;
OpenJDK version: &lt;code&gt;1.8.0_51&lt;/code&gt; (currently the latest version)&lt;br&gt;
Software: &lt;code&gt;Linux version 4.0.4-301.fc22.x86_64&lt;/code&gt;&lt;br&gt;
Hardware: &lt;code&gt;Intel&amp;#174; Core&amp;#8482; i7-4790 CPU @ 3.60GHz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each run solves 13 planning problems with &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;.
Each planning problem runs for 5 minutes. It starts with a 30 second JVM warm up which is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solving a planning problem involves &lt;strong&gt;no IO&lt;/strong&gt; (except a few milliseconds during startup to load the input).
&lt;strong&gt;A single CPU is completely saturated.&lt;/strong&gt;
It constantly creates many short-lived objects, and the GC collects them afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmarks measure the number of scores that can be calculated per millisecond. Higher is better.
Calculating a score for a proposed planning solution is non-trivial:
it involves many calculations, including checking for conflicts between every entity and every other entity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To reproduce these benchmarks locally, &lt;a href=&quot;https://www.optaplanner.org/code/sourceCode.html&quot;&gt;build optaplanner from source&lt;/a&gt;
and run the main class
&lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/main/optaplanner-examples/src/main/java/org/optaplanner/examples/app/GeneralOptaPlannerBenchmarkApp.java&quot;&gt;GeneralOptaPlannerBenchmarkApp&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_results&quot;&gt;Benchmark results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_executive_summary&quot;&gt;Executive summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For your convenience, I&amp;#8217;ve compared each Garbage Collector type to the default in Java 8 (Parallel GC).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/07/31/garbageCollectorTypesJava8.png&quot; alt=&quot;garbageCollectorTypesJava8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The results are clear: &lt;strong&gt;That default (Parallel GC) is the fastest.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_raw_benchmark_numbers&quot;&gt;Raw benchmark numbers&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Garbage Collector&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 200c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 800c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B10&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c7&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c8&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering m1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering mh1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Sport scheduling nl14&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:+UseSerialGC&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;121211&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;102072&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;239278&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;54637&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10821&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14370&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17095&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10130&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7389&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6667&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2234&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:+UseParallelGC&lt;/code&gt; (default Java 8)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;126248&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;107991&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;282055&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;59944&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10919&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14517&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17843&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10564&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7459&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6676&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2228&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:+UseConcMarkSweepGC&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;123150&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;106889&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;255775&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;59087&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10142&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13180&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16346&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9903&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6738&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6018&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2142&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:ParallelCMSThreads=2&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;128591&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;106992&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;279968&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;59406&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10530&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13621&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16591&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10082&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7148&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6319&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2276&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:ParallelCMSThreads=4&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;124415&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;104328&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;276401&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;58234&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10738&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13918&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16952&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10072&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7180&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6320&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2270&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:+UseG1GC&lt;/code&gt; (default Java 9?)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;97146&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;83952&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;259981&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;39522&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9803&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11965&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15195&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9410&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5961&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4985&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2062&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset scale&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;120k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1920k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;500k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;250000k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;217k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;145k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1705k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1613k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4k&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_relative_benchmark_numbers&quot;&gt;Relative benchmark numbers&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6923%;&quot;&gt;
&lt;col style=&quot;width: 7.6924%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Garbage Collector&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Average&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 200c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 800c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B10&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c7&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c8&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering m1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering mh1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Sport scheduling nl14&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:+UseSerialGC&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.05%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-3.99%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-5.48%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-15.17%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-8.85%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.90%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.01%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.19%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.11%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.94%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.13%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;+0.27%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:+UseParallelGC&lt;/code&gt; (default Java 8)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:+UseConcMarkSweepGC&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.23%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.45%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.02%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-9.32%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.43%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-7.12%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-9.21%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-8.39%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.26%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-9.67%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-9.86%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-3.86%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:ParallelCMSThreads=2&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.67%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;+1.86%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.93%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.74%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.90%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-3.56%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.17%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-7.02%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.56%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.17%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-5.35%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;+2.15%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;-XX:ParallelCMSThreads=4&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.94%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.45%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-3.39%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.00%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.85%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.66%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.13%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.99%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.66%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-3.74%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-5.33%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;+1.89%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;&lt;code&gt;-XX:+UseG1GC&lt;/code&gt; (default Java 9?)&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;-17.60%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-23.05%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-22.26%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-7.83%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-34.07%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-10.22%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-17.58%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-14.84%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-10.92%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-20.08%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-25.33%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-7.45%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset scale&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;120k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1920k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;500k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;250000k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;217k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;145k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1705k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1613k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4k&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_should_java_9_default_to_g1&quot;&gt;Should Java 9 default to G1?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a proposal to &lt;strong&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/248&quot;&gt;make G1 the default Garbage Collector in OpenJDK9 for servers&lt;/a&gt;&lt;/strong&gt;.
My first reaction is to &lt;strong&gt;reject this proposal&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;G1 is &lt;code&gt;17.60%&lt;/code&gt; is slower on average.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G1 is consistently slower on every use case for every dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the biggest dataset (Machine Reassignment B10), which dwarfs any of the other datasets in size,
G1 is &lt;code&gt;34.07%&lt;/code&gt; is slower.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the default GC differs between developer machines and servers, then developer benchmarks become less trustworthy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, there are a few nuances to note:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;G1 focuses on limiting GC pauses, instead of throughput.
For these use cases (with heavy calculations) GC pause length mostly doesn&amp;#8217;t matter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was an (almost) single-threaded benchmark.
Further benchmarking with multiple solvers in parallel or multithreaded solving might influence results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G1 is recommended for a heap size of at least &lt;code&gt;6 GB&lt;/code&gt;.
This benchmark used a heap size of only &lt;code&gt;2 GB&lt;/code&gt; and even that size is only needed for the biggest dataset (Machine Reassignment B10).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Heavy calculations is just one of the many things that OpenJDK is used for: it&amp;#8217;s just 1 stakeholder in this community wide debate.
If other stakeholders (such as web services) prove otherwise, maybe it&amp;#8217;s worth changing the default GC.
But &lt;strong&gt;show me the benchmarks&lt;/strong&gt; on real projects first!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Java 8, the default Garbage Collector (Parallel GC) is generally the best choice for &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt; use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/06/03/HowGoodAreHumanPlanners.html</id>
            <title type="html">How good are human planners?</title>
            <updated>2015-06-03T00:00:00+00:00</updated>
            <published>2015-06-03T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/06/03/HowGoodAreHumanPlanners.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="insight"></category>
                    <category term="tsp"></category>
                    <category term="vehicle routing"></category>
            <summary type="html">
                 Are we smarter than machines when it comes to planning? Or can automated planning beat humans? I did an experiment with a group of innocent software engineers. These are the results. Methodology ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are we smarter than machines when it comes to planning? Or can automated planning beat humans?
I did an experiment with a group of innocent software engineers. These are the results.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_methodology&quot;&gt;Methodology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During my last 2 deep dive trainings, I asked the attendees to manually solve a simple planning problem,
to introduce them to the difficulty of planning optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I gave them a Traveling Salesman Problem (TSP) and asked them to &lt;strong&gt;connect the dots&lt;/strong&gt; to find the shortest tour possible:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/06/03/humanPlannersTspAssignmentBlog.png&quot; alt=&quot;humanPlannersTspAssignmentBlog&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They laughed. &lt;em&gt;Isn&amp;#8217;t this a kids game? Yes, except that the dots are not numbered and you&amp;#8217;re not looking for Mickey Mouse.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Calculating a trip&amp;#8217;s distance on paper is not practical,
so they recreated their trips in the TSP example in OptaPlanner examples (only since &lt;code&gt;6.3.0.Beta1&lt;/code&gt;) to calculate the distance automatically.
You can try this assignment yourself: right-click in the example&amp;#8217;s UI to manually create a trip.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Their first attempt and their best attempt in a time window of almost 30 minutes was recorded.
This is the optimal solution that we hoped to find:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/06/03/humanPlannersTspGoalBlog.png&quot; alt=&quot;humanPlannersTspGoalBlog&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_results&quot;&gt;Results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No one found the optimal solution. Most people didn&amp;#8217;t even find a near optimal solution (including me):&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;First attempt&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Best attempt&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Optimal&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;674&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;674&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average human&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;752&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;732&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average human worse than optimal&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;On average, a human&amp;#8217;s best result was 9% worse than the optimal solution.
That means it roughly takes 9% more time and 9% more fuel to visit those locations. That&amp;#8217;s expensive.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s just on a small problem with only 1 constraint!
In the real world, other constraints need to be taken into account,
such as &lt;a href=&quot;https://www.optaplanner.org/blog/2013/08/06/FalseAssumptionsForVRP.html&quot;&gt;vehicle capacity&lt;/a&gt;,
&lt;a href=&quot;https://www.optaplanner.org/blog/2015/03/20/3BugsInTheUltimateAmericanRoadTrip.html&quot;&gt;real road networks&lt;/a&gt;
and custom business constraints. All of these make it harder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are the individual results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/06/03/humanPlannerTspResults.png&quot; alt=&quot;humanPlannerTspResults&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;First attempt&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Best attempt&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;825&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;825&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;821&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;821&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;813&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;813&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;892&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;807&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;802&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;802&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;792&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;792&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;772&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;772&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;762&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;762&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;798&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;757&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;765&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;743&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;758&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;742&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;727&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;727&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;765&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;714&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;755&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;714&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;712&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;712&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;712&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;712&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;729&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;710&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;759&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;710&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;723&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;706&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;705&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;705&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;796&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;702&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;738&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;702&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;702&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;702&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;720&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;701&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;725&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;700&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;717&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;699&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;699&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;699&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;701&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;693&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;692&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;692&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;735&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;688&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;692&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;676&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best attempt of the best human was only 0.3% worse than optimal. That&amp;#8217;s a very nice result.
If I recall correctly, he did take longer than 30 minutes to find it.
Was this skill or luck (or a combination of both)? The second best human (out of 31 people) was 2% worse than optimal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With automated planning, such as &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;, we can beat the human results, in far less time.
We can also scale to bigger datasets with more constraints. Does this mean we can get rid of the human planner?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_do_we_need_a_human_planner&quot;&gt;Do we need a human planner?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We still need a human planner: not to search for the best plan, but &lt;em&gt;to define what to search for&lt;/em&gt;.
A search engine like Google can search the web, but it needs to be told what to look for.
Similarly, any automated solver (including &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;) can optimize a planning,
but it needs to be told what to optimize for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a non-trivial enterprise, defining what the business wants/needs to optimize, is not a simple task.
It involves talking to the business departments and iteratively tweaking those constraints.
We still need a human to that.
And as the business changes (market changes, labor regulations changes, &amp;#8230;&amp;#8203;) those constraints will change too.
Again, we need a human to watch over the planner.
We also need someone to input the data and validate the results.
Furthermore, &lt;a href=&quot;https://www.optaplanner.org/blog/2013/10/11/WillSkynetControlOurSchedule.html&quot;&gt;the human needs to stay in control&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But ask yourself: Who of these 2 contenders will win a knowledge quiz?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The smartest person on the planet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An average graduate with internet and Wikipedia access&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, who do you want to optimize the planning in your organization? Someone with or without automated planning assistance?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/05/19/OptaPlannerOnAndroid.html</id>
            <title type="html">OptaPlanner on Android</title>
            <updated>2015-05-19T00:00:00+00:00</updated>
            <published>2015-05-19T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/05/19/OptaPlannerOnAndroid.html" rel="alternate" type="text/html" />
            <author>
                <name>tdavid</name>
            </author>
                    <category term="android"></category>
                    <category term="vehicle routing"></category>
            <summary type="html">
                 Developing of mobile applications on Android is currently very popular. One of the reasons for this popularity is Java programming language. Although OptaPlanner is written completely in pure ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developing of mobile applications on Android is currently very popular.
One of the reasons for this popularity is Java programming language.
Although OptaPlanner is written completely in pure Java (Standard Edition),
the current version (6.2.0.Final) requires a workaround to work on Android due to a limitation in the Android platform.
In this article, I will show how to use OptaPlanner on Android and demonstrate a simple Vehicle Routing app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.tomasdavid.vehicleroutingproblem&quot;&gt;Try the app on the Google Play app store.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_use_optaplanner_on_android&quot;&gt;How to use OptaPlanner on Android&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Update: as of OptaPlanner &lt;code&gt;6.3.0.Beta2&lt;/code&gt;, this workaround is no longer needed, because OptaPlanner does not import the &lt;code&gt;java.beans&lt;/code&gt; package anymore.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Android is not a complete JVM. Some JDK libraries of the &lt;code&gt;java.beans&lt;/code&gt; package are missing for OptaPlanner 6.2 to work out of the box.
However, it is possible to use OptaPlanner with Java score calculation by adding those missing libraries to your
Android project. The Drools rule engine does not work on Android yet, so Drools score calculation doesn&amp;#8217;t work on Android.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to use OptaPlanner in your Android project, follow these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href=&quot;https://openbeans.googlecode.com/files/openbeans-1.0.jar&quot;&gt;OpenBeans&lt;/a&gt; redistribution of the &lt;code&gt;java.beans&lt;/code&gt;
package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href=&quot;https://jarjar.googlecode.com/files/jarjar-1.4.jar&quot;&gt;Jar Jar Links&lt;/a&gt; utility for repacking the redistribution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;jarJarRule.txt&lt;/code&gt; text file with a single line:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;rule com.googlecode.openbeans.** java.beans.@1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Place all the files in the same folder and run the command:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;$ java -jar jarjar-1.4.jar process jarJarRule.txt openbeans-1.0.jar javabeans-1.0.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move the created &lt;code&gt;javabeans-1.0.jar&lt;/code&gt; into the &lt;code&gt;libs&lt;/code&gt; folder in your Android project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add these lines to &lt;code&gt;android&lt;/code&gt; area in the &lt;code&gt;build.gradle&lt;/code&gt; file in your Android project to allow classes of the &lt;code&gt;java.*&lt;/code&gt; package
inside the &lt;code&gt;javabeans-1.0.jar&lt;/code&gt; file to be used:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-gradle hljs&quot; data-lang=&quot;gradle&quot;&gt;android {
    ...
    dexOptions {
        preDexLibraries = false
    }
    project.tasks.withType(com.android.build.gradle.tasks.Dex) {
        additionalParameters=[&apos;--core-library&apos;]
    }
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add a dependency to the &lt;code&gt;build.gradle&lt;/code&gt; file in your Android project and exclude &lt;code&gt;org.drools&lt;/code&gt; and &lt;code&gt;xmlpull&lt;/code&gt; dependencies:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-gradle hljs&quot; data-lang=&quot;gradle&quot;&gt;dependencies {
    ...
    compile(&apos;org.optaplanner:optaplanner-core:...&apos;) {
        exclude group: &apos;xmlpull&apos;
        exclude group: &apos;org.drools&apos;
    }
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vehicle_routing_problem_application&quot;&gt;Vehicle Routing Problem application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I created an OptaPlanner Android application named &lt;em&gt;Vehicle Routing Problem&lt;/em&gt;. It is based on Vehicle routing
application from OptaPlanner Examples. See this video for a detailed demonstration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/WpfjS6I5HGg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.tomasdavid.vehicleroutingproblem&quot;&gt;Get this app from the Google Play app store now.&lt;/a&gt;
The source code is &lt;a href=&quot;https://github.com/tomasdavidorg/android-vehicle-routing-problem&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can create your own Android applications which use OptaPlanner. Follow the steps written above or get inspired
by the mentioned example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/03/20/3BugsInTheUltimateAmericanRoadTrip.html</id>
            <title type="html">3 Bugs in The Ultimate American Road Trip of The Washington Post</title>
            <updated>2015-03-20T00:00:00+00:00</updated>
            <published>2015-03-20T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/03/20/3BugsInTheUltimateAmericanRoadTrip.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="tsp"></category>
                    <category term="vehicle routing"></category>
            <summary type="html">
                 Earlier this week, The Washington Post published an article about how a data genius has computed the ultimate American road trip. The only problem&amp;#8230;&amp;#8203; it contains several mistakes! ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Earlier this week, The Washington Post published an article about how
&lt;a href=&quot;http://www.washingtonpost.com/blogs/wonkblog/wp/2015/03/10/a-data-genius-computes-the-ultimate-american-road-trip/&quot;&gt;a data genius has computed the ultimate American road trip&lt;/a&gt;.
The only problem&amp;#8230;&amp;#8203; it contains several mistakes! &lt;strong&gt;It&amp;#8217;s not the optimal route, nor the shortest route, nor the fastest route.&lt;/strong&gt;
Let&amp;#8217;s take a look at the problems and how we can fix each of them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_goal&quot;&gt;The goal&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Ultimate American Road Trip stops at 50 national natural landmarks, national historic sites and national monuments in the US.
The goal is to find the fastest trip to visit all of these locations.
This is known as a Traveling Salesman Problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_original_solution_olsons_algorithm&quot;&gt;The original solution (Olson&amp;#8217;s algorithm)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s the original solution based on &lt;a href=&quot;http://www.randalolson.com/2015/03/08/computing-the-optimal-road-trip-across-the-u-s/&quot;&gt;Randy Olson&amp;#8217;s blog&lt;/a&gt;
shown with Google Maps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/03/20/americanRoadTrip-road-time-asymmetric-olson.png&quot; alt=&quot;americanRoadTrip road time asymmetric olson&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that I had to &lt;a href=&quot;https://github.com/kiegroup/optaplanner/tree/main/optaplanner-examples/data/tsp/import/usa&quot;&gt;recreate the datasets&lt;/a&gt;.
I&amp;#8217;ve used exact latitude longitude coordinates (instead of location names) to avoid ambiguity and get more accurate routes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Washington Post even claims that the trip above is the fastest trip (Olson&amp;#8217;s blog doesn&amp;#8217;t make this claim), but it&amp;#8217;s not:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bug_1_better_optimization_algorithms_give_better_results&quot;&gt;Bug 1: Better optimization algorithms give better results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few days ago, William J. Cook &lt;a href=&quot;http://www.math.uwaterloo.ca/tsp/usa50/index.html&quot;&gt;already proved with Concorde&lt;/a&gt;
that there&amp;#8217;s a shortest and faster path near Iowa. With &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; I come to the same conclusion:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/03/20/americanRoadTrip-iowa-comparison.png&quot; alt=&quot;americanRoadTrip iowa comparison&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This reduces the total time by &lt;code&gt;1h 35m 40s&lt;/code&gt; and the total distance by &lt;code&gt;34km 515m&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bug_2_ghost_driving_driving_on_the_wrong_side_of_the_road_is_illegal&quot;&gt;Bug 2: Ghost driving (driving on the wrong side of the road) is illegal&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Road distances are not symmetric. Driving from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt; is not the same as driving from &lt;code&gt;B&lt;/code&gt; to &lt;code&gt;A&lt;/code&gt;
(if you adhere to traffic rules, of course):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/03/20/roads-are-asymmetric.png&quot; alt=&quot;roads are asymmetric&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we take this into account, the fastest path near Carolina changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/03/20/americanRoadTrip-carolina-comparison.png&quot; alt=&quot;americanRoadTrip carolina comparison&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the left is the path found by both Olson and Cook (and by myself when using Olson&amp;#8217;s symmetrical distances).
On the right is my path, which reduces the total time by another &lt;code&gt;49m 36s&lt;/code&gt; (if both paths are computed using asymmetric distances),
but increases the distance by &lt;code&gt;805m&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bug_3_google_maps_does_not_return_the_shortest_routes&quot;&gt;Bug 3: Google Maps does not return the shortest routes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do we want the shortest or the fastest trip?
We used Google Maps to calculate the fastest route between every pair of locations.
So if we&amp;#8217;re aiming for the fastest trip, that&amp;#8217;s fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we&amp;#8217;re aiming for the shortest trip, then we should be asking Google Maps for the shortest routes,
which can be drastically different:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/03/20/fastest-vs-shortest.png&quot; alt=&quot;fastest vs shortest&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Contrary to popular belief, &lt;strong&gt;the shortest trip on the fastest routes is not the shortest trip.&lt;/strong&gt;
&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/images/Chapter-Use_cases_and_examples/roadDistanceTriangleInequality.png&quot;&gt;Here&amp;#8217;s my elaborate proof of that.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most people tend to prefer highways over dirt roads, so they prefer the fastest trip over the shortest trip.
In more advanced use cases, we would also want to take additional constraints into account:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Not all routes are equally beautiful or equally safe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consider optional places to visit, as long as they don&amp;#8217;t impact the length of our trip too much.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consider time constraints: to see that sunset at the ocean, we&amp;#8217;ll need to arrive there before the evening.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s when a customizable solver such as &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; becomes really useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By using better algorithms and a more accurate model (without ghost driving), &lt;strong&gt;our trip is &lt;code&gt;2h 25m 16s&lt;/code&gt; faster&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Dataset&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Time&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Total time gain&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Distance&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Total distance gain&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Olson (Clockwise)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;232h 43m 10s&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;22&apos;602km 201m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Iowa fix (Clockwise)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;231h 7m 30s&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;1h 35m 40s&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;22&apos;567km 686m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;34km 515m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Iowa and Carolina fix (Clockwise)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;&lt;code&gt;230h 17m 54s&lt;/code&gt; (best)&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;&lt;code&gt;2h 25m 16s&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;22&apos;568km 491m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;33km 710m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interestingly enough, if we&amp;#8217;re looking for the shortest trip (and we ignore bug 3 because we prefer highways),
we notice that the same trip (with both fixes) in the reverse direction is the shortest:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Dataset&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Time&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Total time gain&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Distance&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Total distance gain&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Olson (Counterclockwise)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;232h 46m 58s&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;22&apos;612km 070m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Iowa fix (Counterclockwise)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;231h 16m 52s&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;1h 30m 06s&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;22&apos;562km 668m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;49km 402m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Iowa and Carolina fix (Counterclockwise)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;230h 27m 26s&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;2h 19m 32s&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;&lt;code&gt;22&apos;560km 688m&lt;/code&gt; (best)&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;51km 382m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is my solution to the Ultimate American Road Trip (with those fixes):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/03/20/americanRoadTrip-road-time-asymmetric-optaplanner.png&quot; alt=&quot;americanRoadTrip road time asymmetric optaplanner&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Drive it clockwise to optimize time!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/03/10/VisualizingVehicleRoutingWithLeafletAndGoogleMaps.html</id>
            <title type="html">Visualizing Vehicle Routing with Leaflet and Google Maps</title>
            <updated>2015-03-10T00:00:00+00:00</updated>
            <published>2015-03-10T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/03/10/VisualizingVehicleRoutingWithLeafletAndGoogleMaps.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="vehicle routing"></category>
            <summary type="html">
                 After OptaPlanner finds the best solution for a Vehicle Routing Problem, users usually want to see it on a real map, such as Google Maps or OpenStreetMap. The optaplanner-webexamples.war for ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; finds the best solution for a Vehicle Routing Problem,
users usually want to see it on a real map, such as Google Maps or OpenStreetMap.
The &lt;code&gt;optaplanner-webexamples.war&lt;/code&gt; for OptaPlanner 6.3 now demonstrates that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_visualization&quot;&gt;Visualization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the case below, I&amp;#8217;ve solved a VRP problem with &lt;code&gt;50&lt;/code&gt; locations and &lt;code&gt;8&lt;/code&gt; vehicles
and projected the best solution with Leaflet and Google Maps.
It&amp;#8217;s a case of capacitated vehicle routing: each vehicle can carry &lt;code&gt;100&lt;/code&gt; items
and each location needs a number of items picked up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/03/10/vehicleRoutingLeafletAndGoogleMaps.png&quot; alt=&quot;vehicleRoutingLeafletAndGoogleMaps&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite that the lines are shown as straight between locations,
&lt;a href=&quot;https://www.optaplanner.org/blog/2014/09/02/VehicleRoutingWithRealRoadDistances.html&quot;&gt;actual road distances&lt;/a&gt;
were used in the optimization calculations.
In total, the vehicles drive a little under &lt;code&gt;32&lt;/code&gt; hours, so on average &lt;code&gt;4&lt;/code&gt; hours per vehicle (includes location service time).
This solution doesn&amp;#8217;t take into account rush hour yet, but if such traffic prediction data were available,
we can make OptaPlanner apply that too, which could result in a different best solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the web UI, we can zoom in on a specific location, such as the &lt;code&gt;Landegem&lt;/code&gt; town center,
where we need to pickup 25 items. In this solution, those items are picked up by the yellow vehicle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The visualization was implemented in 2 different ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_leaflet_js&quot;&gt;Leaflet.js&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://leafletjs.com&quot;&gt;Leaflet.js&lt;/a&gt; is an open source JavaScript that uses &lt;a href=&quot;http://www.openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt; data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_google_maps&quot;&gt;Google Maps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/maps/&quot;&gt;Google Maps&lt;/a&gt; is a proprietary JavaScript that uses Google data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_apply_it_now_in_your_case&quot;&gt;Apply it now in your case&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re using the latest OptaPlanner final release (&lt;code&gt;6.2.0.Final&lt;/code&gt; at the time of writing),
you easily do such visualization too: those webexamples don&amp;#8217;t require any APIs new in optaplanner-core 6.3,
so &lt;a href=&quot;https://www.optaplanner.org/download/download.html&quot;&gt;download the nightly snapshot&lt;/a&gt; and look for &lt;code&gt;webexamples/sources&lt;/code&gt;
to see how it&amp;#8217;s done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_update&quot;&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Google Map Directions we can also visualize the actual roads used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/03/10/vehicleRoutingGoogleMapsDirections.png&quot; alt=&quot;vehicleRoutingGoogleMapsDirections&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/02/23/HowFastIsLogging.html</id>
            <title type="html">How fast is logging?</title>
            <updated>2015-02-23T00:00:00+00:00</updated>
            <published>2015-02-23T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/02/23/HowFastIsLogging.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="production"></category>
                    <category term="benchmark"></category>
            <summary type="html">
                 What&amp;#8217;s the cost of trace/debug logging in production? What&amp;#8217;s the performance cost of logging to a file? In these benchmarks, I compare the performance impact of logging levels (error, ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s the cost of trace/debug logging in production? What&amp;#8217;s the performance cost of logging to a file?
In these benchmarks, I compare the performance impact of logging levels (&lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt;)
and logging appenders (console appender, file appender) on several realistic &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;
use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_methodology&quot;&gt;Benchmark methodology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Logging implementation: &lt;a href=&quot;http://www.slf4j.org/&quot;&gt;SFL4J&lt;/a&gt; &lt;code&gt;1.7.2&lt;/code&gt; with &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; &lt;code&gt;1.0.9&lt;/code&gt; (Logback is the spiritual successor of Log4J 1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging configuration (&lt;code&gt;logback.xml&lt;/code&gt;):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;configuration&amp;gt;

  &amp;lt;appender name=&quot;appender&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&amp;gt;
    &amp;lt;encoder&amp;gt;
      &amp;lt;pattern&amp;gt;%d [%t] %-5p %m%n&amp;lt;/pattern&amp;gt;
    &amp;lt;/encoder&amp;gt;
  &amp;lt;/appender&amp;gt;

  &amp;lt;logger name=&quot;org.optaplanner&quot; level=&quot;info&quot;/&amp;gt;

  &amp;lt;root level=&quot;warn&quot;&amp;gt;
    &amp;lt;appender-ref ref=&quot;appender&quot;/&amp;gt;
  &amp;lt;/root&amp;gt;

&amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which results in output like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;2015-02-23 08:07:35,310 [main] INFO  Solving started: time spent (18), best score (uninitialized/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
2015-02-23 08:07:35,363 [main] INFO  Construction Heuristic phase (0) ended: step total (6), time spent (71), best score (0hard/-5460soft).
2015-02-23 08:07:35,641 [main] INFO  Local Search phase (1) ended: step total (1), time spent (349), best score (0hard/-5460soft).
2015-02-23 08:07:35,652 [main] INFO  Solving ended: time spent (360), best score (0hard/-5460soft), average calculate count per second (905), phase total (2), environment mode (REPRODUCIBLE).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VM arguments: &lt;code&gt;-Xmx1536M -server&lt;/code&gt;&lt;br&gt;
Software: &lt;code&gt;Linux 3.2.0-59-generic-pae&lt;/code&gt;&lt;br&gt;
Hardware: &lt;code&gt;Intel® Xeon&amp;#174; CPU W3550 @ 3.07GHz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each run solves 13 planning problems with &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;.
Each planning problem runs for 5 minutes. It starts with a 30 second JVM warm up which is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solving a planning problem involves &lt;strong&gt;no IO&lt;/strong&gt; (except a few milliseconds during startup to load the input).
&lt;strong&gt;A single CPU is completely saturated.&lt;/strong&gt;
It constantly creates many short-lived objects, and the GC collects them afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmarks measure the number of scores that can be calculated per millisecond. Higher is better.
Calculating a score for a proposed planning solution is non-trivial:
it involves many calculations, including checking for conflicts between every entity and every other entity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To reproduce these benchmarks locally, &lt;a href=&quot;https://www.optaplanner.org/code/sourceCode.html&quot;&gt;build optaplanner from source&lt;/a&gt;
and run the main class
&lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/main/optaplanner-examples/src/main/java/org/optaplanner/examples/app/GeneralOptaPlannerBenchmarkApp.java&quot;&gt;GeneralOptaPlannerBenchmarkApp&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_logging_levels_error_warn_info_debug_and_trace&quot;&gt;Logging levels: &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;trace&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I ran the same benchmark set several times with a different &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; logging level:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;  &amp;lt;logger name=&quot;org.optaplanner&quot; level=&quot;error|warn|info|debug|trace&quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All other libraries (including &lt;a href=&quot;https://www.drools.org&quot;&gt;Drools&lt;/a&gt;) were set to &lt;code&gt;warn&lt;/code&gt; logging.
The logging verbosity of OptaPlanner differs greatly per level:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;error&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;warn&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;0 lines&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;info&lt;/code&gt;&lt;/strong&gt;: 4 lines per benchmark, so &lt;strong&gt;less than 1 line per minute&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/strong&gt;: 1 line per step, so &lt;strong&gt;about 1 line per second for Tabu Search and more for Late Acceptance&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/strong&gt;: 1 line per move, so &lt;strong&gt;between 1k and 120k lines per second&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are the raw benchmark numbers, measured in average score calculation count per second (higher is better):&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Logging level&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 200c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 800c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B10&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c7&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c8&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering m1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering mh1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Sport scheduling nl14&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Error&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;66065&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;61866&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;119230&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;32759&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6282&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8370&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10330&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7121&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4001&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3718&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1248&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Warn&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;66943&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;62191&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;122678&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;32688&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6297&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8303&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10517&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7182&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3942&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3660&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1278&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Info&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;67393&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;63192&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;123734&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;32461&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6188&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8299&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10330&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7108&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3944&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3654&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1252&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Debug&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;60254&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;55938&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;118917&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;32735&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6054&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8062&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10310&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7104&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3904&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3586&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1244&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Trace&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25159&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25214&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;40346&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20629&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5585&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7347&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9229&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6642&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3360&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3138&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1156&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset scale&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;120k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1920k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;500k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;250000k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;217k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;145k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1705k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1613k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4k&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Algorithm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Late Acceptance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Late Acceptance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Late Acceptance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Late Acceptance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll ignore the difference between error, warn and info logging: The difference is at most 4%,
the runs are 100% reproducible and I didn&amp;#8217;t otherwise use the computer during the benchmarking,
so I presume the difference can be blamed on the JIT hotspot compiling or CPU luck.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What does turning on Debug or Trace logging cost us in performance (versus Info logging)?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/02/23/loggingLevelSlowerThanInfo.png&quot; alt=&quot;loggingLevelSlowerThanInfo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Logging level&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 200c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 800c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B10&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c7&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c8&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering m1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering mh1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Sport scheduling nl14&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Debug&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-10.59%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-11.48%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-3.89%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.84%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.17%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.86%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.19%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.06%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.01%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.86%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.64%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Trace&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-62.67%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-60.10%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-67.39%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-36.45%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-9.74%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-11.47%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-10.66%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.56%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-14.81%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-14.12%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-7.67%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset scale&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;120k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1920k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;500k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;250000k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;217k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;145k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1705k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1613k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4k&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Algorithm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Late Acceptance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Late Acceptance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Late Acceptance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Late Acceptance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tabu Search&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Trace logging is up to almost 4 times slower!&lt;/strong&gt; The impact of Debug logging is far less, but still clearly noticeable in many cases.
The use cases that use Late Acceptance (Cloud balancing and Course scheduling), which therefore do more debug logging,
seem to have a higher performance loss (although that might be in the eye of the beholder).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But wait a second! Those benchmarks use a console appender. What if they use a file appender, like in production?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_logging_appenders_appending_to_the_console_or_a_file&quot;&gt;Logging appenders: appending to the console or a file&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a production server, appending to the console often means losing the log information as it gets piped into &lt;code&gt;/dev/null&lt;/code&gt;.
Also during development, the IDE&amp;#8217;s console buffer can overflow, causing the loss of log lines.
One way to avoid these issues is to configure a file appender.
To conserve disk space, I used a rolling file appender which compresses old log files in zip files of 5MB:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;  &amp;lt;appender name=&quot;appender&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&amp;gt;
    &amp;lt;file&amp;gt;local/log/optaplanner.log&amp;lt;/file&amp;gt;
    &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&amp;gt;
      &amp;lt;fileNamePattern&amp;gt;local/log/optaplanner.%i.log.zip&amp;lt;/fileNamePattern&amp;gt;
      &amp;lt;minIndex&amp;gt;1&amp;lt;/minIndex&amp;gt;
      &amp;lt;maxIndex&amp;gt;3&amp;lt;/maxIndex&amp;gt;
    &amp;lt;/rollingPolicy&amp;gt;
    &amp;lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&amp;gt;
      &amp;lt;maxFileSize&amp;gt;5MB&amp;lt;/maxFileSize&amp;gt;
    &amp;lt;/triggeringPolicy&amp;gt;
    &amp;lt;encoder&amp;gt;
      &amp;lt;pattern&amp;gt;%d [%t] %-5p %m%n&amp;lt;/pattern&amp;gt;
    &amp;lt;/encoder&amp;gt;
  &amp;lt;/appender&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are the raw benchmark numbers, measured again in average score calculation count per second (higher is better):&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Logging appender and level&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 200c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 800c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B10&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c7&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c8&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering m1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering mh1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Sport scheduling nl14&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Console Info&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;67393&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;63192&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;123734&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;32461&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6188&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8299&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10330&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7108&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3944&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3654&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1252&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;File Info&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;66497&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;63065&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;123758&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;33195&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6302&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8338&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10467&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7238&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4022&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3706&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1256&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Console Debug&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;60254&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;55938&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;118917&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;32735&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6054&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8062&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10310&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7104&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3904&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3586&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1244&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;File Debug&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;55248&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;52261&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;122144&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;31220&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6223&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8241&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10482&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7118&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3945&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3589&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1238&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Console Trace&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25159&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25214&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;40346&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20629&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5585&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7347&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9229&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6642&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3360&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3138&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1156&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;File Trace&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10162&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10708&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12528&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9555&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4416&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5167&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6764&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5532&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2789&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2678&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1101&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What does file appender cost us in performance (versus console appender)?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/02/23/fileAppendingSlowerThanConsoleAppending.png&quot; alt=&quot;fileAppendingSlowerThanConsoleAppending&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Logging level&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 200c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 800c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B10&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c7&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c8&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering m1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering mh1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Sport scheduling nl14&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Info&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.33%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.20%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.02%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.26%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.84%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.47%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.33%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.83%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.98%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.42%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.32%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Debug&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-8.31%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.57%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.71%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.63%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.79%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.22%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.67%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.20%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.05%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.08%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.48%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Trace&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-59.61%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-57.53%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-68.95%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-53.68%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-20.93%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-29.67%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-26.71%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-16.71%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-16.99%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-14.66%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-4.76%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For info logging, it doesn&amp;#8217;t really matter. For debug logging, there&amp;#8217;s a noticeable slowdown for a minority of the cases.
&lt;strong&gt;Trace logging is an extra up to almost 4 times slower!&lt;/strong&gt; And it stacks with our previous observation:
In the worst case (Machine reassignment B1), trace logging to a file is 90% slower than info logging to the console.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like all diagnostic information, logging comes at a performance cost.
Good libraries carefully select the logging level of each statement
to balance out diagnostic needs, verbosity and performance impact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s my recommendation for &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; users:
In development, use &lt;code&gt;debug&lt;/code&gt; (or &lt;code&gt;trace&lt;/code&gt;) logging with a console appender by default, so you can see what&amp;#8217;s going on.
In production, use &lt;code&gt;warn&lt;/code&gt; (or &lt;code&gt;info&lt;/code&gt;) logging with a file appender by default, so you retain important information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2015/01/27/ScalingVehicleRoutingAndTSPWithNearbySelection.html</id>
            <title type="html">Scaling Vehicle Routing with Nearby Selection</title>
            <updated>2015-01-27T00:00:00+00:00</updated>
            <published>2015-01-27T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2015/01/27/ScalingVehicleRoutingAndTSPWithNearbySelection.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="vehicle routing"></category>
                    <category term="algorithm"></category>
                    <category term="feature"></category>
            <summary type="html">
                 OptaPlanner 6.2 has made a big step forward for the Vehicle Routing Problem (VRP), Traveling Salesman Problem (TSP) and similar use cases. The new feature nearby selection enables it to scale to ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; 6.2 has made a big step forward for the Vehicle Routing Problem (VRP),
Traveling Salesman Problem (TSP) and similar use cases.
The new feature &lt;strong&gt;&lt;em&gt;nearby selection&lt;/em&gt; enables it to scale to bigger problems much more efficiently&lt;/strong&gt;
without sacrificing potential optimal solutions (which is common for inferior techniques).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take a closer look at nearby selection with the Vehicle Routing Problem.
In this use case, we have to deliver items to a number of geographic locations with a number of vehicles.
Each vehicle must respect its capacity (hard constraint) and we need to minimize the total travel time (soft constraint).
Of course, there will be additional business specific constraints in practice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_nearby_locations&quot;&gt;Nearby locations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The metaheuristic algorithms try to improve the current solution by changing it (which is called &lt;em&gt;a move&lt;/em&gt;)
to investigate other solutions. For example, here we have a VRP solution and we try 3 different moves on it,
in the hope to find a better solution:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/01/27/nearbySelectionMotivation.png&quot; alt=&quot;nearbySelectionMotivation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With normal move selectors, each of these 3 moves has the same chance of being selected. Some observations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Moving location &lt;code&gt;A&lt;/code&gt; behind the &lt;strong&gt;nearby&lt;/strong&gt; location &lt;code&gt;B&lt;/code&gt; is likely to be an improvement.
Still, we need to consider other moves too, because other constraints (such as time windows)
might make this an infeasible (or a less rewarding) solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Moving location &lt;code&gt;A&lt;/code&gt; behind the &lt;strong&gt;nearby&lt;/strong&gt; location &lt;code&gt;E&lt;/code&gt; is likely to be an improvement over the original solution.
Due to other constraints (such as vehicle capacity), it can even be the best move.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Moving location &lt;code&gt;A&lt;/code&gt; behind the &lt;strong&gt;non-nearby&lt;/strong&gt; location &lt;code&gt;Z&lt;/code&gt; (in the yellow chain) is unlikely to be an improvement.
Although we should note that we can&amp;#8217;t rule it out entirely, because other constraints (such as time windows)
might make it to only move that leads to a feasible solution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, we observe that &lt;strong&gt;moving to nearby locations is usually more profitable&lt;/strong&gt;.
Do notice that the set of nearby locations differ from location to location.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_scaling_problem&quot;&gt;Scaling problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suppose we have &lt;code&gt;2 000&lt;/code&gt; locations in our VRP problem. That results in &lt;code&gt;4 000 000&lt;/code&gt; moves to change a single location.
If we can evaluate &lt;code&gt;100 000&lt;/code&gt; moves per second, we need &lt;code&gt;40&lt;/code&gt; seconds to try all moves of just 1 location.
Our algorithms will need to change each location multiple times: let&amp;#8217;s presume just &lt;code&gt;4&lt;/code&gt; times,
resulting in &lt;code&gt;8 000&lt;/code&gt; steps, which results in &lt;code&gt;320 000&lt;/code&gt; seconds or over &lt;code&gt;3&lt;/code&gt; days.
And it gets worse when the dataset grows:
the number of moves per location grows, evaluation time drops and the number of steps increases too&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In practice, benchmarks show that uniform distribution (which is giving the same selection probability for &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;Z&lt;/code&gt;)
doesn&amp;#8217;t scale well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_partitioning_geo_fencing_mapreduce_etc&quot;&gt;Partitioning, Geo-fencing, MapReduce, etc.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One traditional way to deal with this scaling issue is partitioning (also called geo-fencing):
Before solving, the locations are divided in clusters and the vehicles are distributed across them.
As &lt;a href=&quot;https://www.optaplanner.org/blog/2014/03/03/CanMapReduceSolvePlanningProblems.html&quot;&gt;demonstrated in a previous blog&lt;/a&gt;,
&lt;em&gt;partitioning heavily sacrifices solution quality for speed&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The big problem with this approach is the inherent &lt;em&gt;Catch 22&lt;/em&gt;:
Decide which locations will be visitable by each vehicle before solving it and knowing which locations each vehicle visits&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_nearby_selection&quot;&gt;Nearby selection&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I&amp;#8217;ve implemented a different approach called nearby selection: for each location we favor moving to nearby locations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/01/27/nearbySelectionRandomDistribution.png&quot; alt=&quot;nearbySelectionRandomDistribution&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that unlike in normal selection, the chance to select &lt;code&gt;B&lt;/code&gt; or &lt;code&gt;C&lt;/code&gt; is much higher.
And unlike in partitioning, we can still select &lt;code&gt;C&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner supports different forms of probability distributions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Block distribution: Only the n nearest are selected, with an equal probability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linear distribution: Nearest elements are selected with a higher probability. The probability decreases linearly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parabolic distribution (recommended): Nearest elements are selected with a higher probability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beta distribution: Selection according to a beta distribution. Slows down the solver.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_results&quot;&gt;Benchmark results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are the results in a big VRP dataset with real-world time distances (collected from OpenStreetMap with GraphHopper)
with 2750 locations. In the nearby selection configuration, I&amp;#8217;ve used a parabolic distribution of the 40 nearest locations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2015/01/27/belgium-road-time-n2750-k55_nearbyWithLA.png&quot; alt=&quot;belgium road time n2750 k55 nearbyWithLA&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;The scalability gain by nearby selection is huge.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re working on a VRP use case and it needs to scale better,
upgrade to &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; 6.2 and use nearby selection!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2014/11/17/Prototyping-a-full-webapp-at-Devoxx-hackergarten.html</id>
            <title type="html">Prototyping an enterprise webapp at Devoxx Hackergarten</title>
            <updated>2014-11-17T00:00:00+00:00</updated>
            <published>2014-11-17T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2014/11/17/Prototyping-a-full-webapp-at-Devoxx-hackergarten.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="community"></category>
            <summary type="html">
                 For the 10th year in a row, I attended DevoxxBe. It&amp;#8217;s my favorite Java conference, but the talk schedule isn&amp;#8217;t always optimal: sometimes I want to see 2 great talks at the same time! ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the 10th year in a row, I attended &lt;a href=&quot;http://www.devoxx.com&quot;&gt;DevoxxBe&lt;/a&gt;.
It&amp;#8217;s my favorite Java conference, but the talk schedule isn&amp;#8217;t always optimal: sometimes I want to see 2 great talks at the same time!
So at the Hackergarten at Devoxx, between attending talks, a few of us started building a webapp to improve the schedule.
We&amp;#8217;re calling the prototype &lt;a href=&quot;https://github.com/ge0ffrey/optaconf&quot;&gt;OptaConf&lt;/a&gt; and it&amp;#8217;s under Apache License.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the past 4 years, I&amp;#8217;ve been working in my corner of the world (OptaPlanner, Drools, etc.),
so my experience on other enterprise Java technologies (JavaEE) is getting a bit stale.
Presentations (such as those at Devoxx) keep me in touch with the ever-changing Java enterprise world,
but nothing beats getting some personal hands-on experience by writing a realistic webapp.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote the backend.
The frontend was graciously contributed by other Hackergarten attendees: Ixchel, David, Anne Marije, Celestino and Federico.
Special thanks to the Hackergarten host Andres for bringing us to together
and to other Hackergarten attendees (sometimes the project lead of the specific technology) to help us overcome pitfalls.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_backend&quot;&gt;Backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writing the backend turned out to be a breeze, using JavaEE 7 technologies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Plain Java&lt;/strong&gt; to model the &lt;strong&gt;domain classes&lt;/strong&gt;, such as &lt;code&gt;Speaker&lt;/code&gt;, &lt;code&gt;Room&lt;/code&gt;, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JAXRS&lt;/strong&gt; to expose a &lt;strong&gt;REST service&lt;/strong&gt; to serve data to the webUI.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This was literally as simple as adding a few annotations (&lt;code&gt;@GET&lt;/code&gt;, &lt;code&gt;@Path&lt;/code&gt;, &amp;#8230;&amp;#8203;) and a short entry in the &lt;code&gt;web.xml&lt;/code&gt;. Brilliant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more info, see &lt;a href=&quot;http://resteasy.jboss.org/&quot;&gt;RESTEasy&amp;#8217;s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JsonReader&lt;/strong&gt; to import the talks data from the &lt;a href=&quot;http://cfp.devoxx.be/api&quot;&gt;Devoxx CFP API&lt;/a&gt; which is then transformed to our domain classes.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I didn&amp;#8217;t use JAXRS to read that REST stream, because JsonReader gives me a DOM approach to the data,
which I then directly map to our domain classes, without having to model their domain class too (which have no further use to us).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thanks to Arun and the &lt;a href=&quot;https://github.com/javaee-samples/javaee7-samples&quot;&gt;JavaEE 7 samples&lt;/a&gt; to point me in the direction of the right tech for the job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OptaPlanner&lt;/strong&gt; to optimize the schedule&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This was also very easy to use for me ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more info, see the &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CDI&lt;/strong&gt; to glue it all together&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This was a bit harder: although the initial &lt;code&gt;@Inject&lt;/code&gt; worked nicely,
using a producer to provide dummy test data (before the Devoxx CFP import was written) had me stuck on a few pitfalls:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are 2 annotations named &lt;code&gt;@Produces&lt;/code&gt; and I automatically imported the wrong one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I had an ambiguous dependency between the producer and the original object, so I had to resort to adding &lt;code&gt;@Vetoed&lt;/code&gt; on the original object&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more info, see &lt;a href=&quot;http://weld.cdi-spec.org&quot;&gt;Weld&amp;#8217;s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WildFly 8&lt;/strong&gt; to deploy the webapp.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is so fast, it&amp;#8217;s amazing. Startup and deploying our webapp take about 3 seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The maven-wildfly-plugin to deploy the webapp from command line:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Just make sure a WildFly server is running first: if it&amp;#8217;s not, &lt;a href=&quot;https://issues.redhat.com/browse/WFLY-4080&quot;&gt;the error message isn&amp;#8217;t entirely clear&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IntelliJ to deploy the exploded webapp directly from my IDE&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It uses the JBoss app server plugin, which is only available IntelliJ Enterprise, not in IntelliJ Community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First an annoying pitfall needed to be fixed: &lt;a href=&quot;https://issues.redhat.com/browse/WFLY-4081&quot;&gt;the exploded directory needs to end with &lt;code&gt;.war&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more info, see the &lt;a href=&quot;http://wildfly.org&quot;&gt;WildFly website&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JPA Hibernate&lt;/strong&gt; to persist the data&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This hasn&amp;#8217;t been implemented yet. Once your session expires (after 30 minutes) your data is currently lost.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all, this has come together well. In less than 1 day&amp;#8217;s work, I was able to implement the entire backend:
import the Devoxx, optimize it and expose it as a REST service.
Of course, having the experts around to immediately solve pitfalls, helped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I really liked it the &lt;code&gt;pom.xml&lt;/code&gt; configuration. This is the &lt;em&gt;entire&lt;/em&gt; dependency tree to have &lt;em&gt;all&lt;/em&gt; those techs available:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.optaplanner&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;optaplanner-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;6.2.0.CR1&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;javax&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;javaee-api&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;7.0&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I didn&amp;#8217;t work on the frontend myself, so it&amp;#8217;s hard to comment (but that won&amp;#8217;t stop me). We had 3 incarnations.
All used AngularJS, some with bower and other stuff.
Personally I feel all web ui technologies are clunky: every year there&amp;#8217;s a new one being hyped
and we should all migrate to that one. Some (Flex for example) went from hype to dead in less than a year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyway, ranting aside, the frontend guys did a nice job, especially Celestino&amp;#8217;s contributions very nicely visualized the schedule:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_before_the_original_devoxx_2014_schedule&quot;&gt;Before: the original Devoxx 2014 schedule&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/11/17/optaconfPocDevoxxScheduleBefore.png&quot; alt=&quot;optaconfPocDevoxxScheduleBefore&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Above is the original Devoxx 2014 schedule for Wednesday.
&lt;strong&gt;Each track (which are a set of related talks) has it own background color.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice how in the first timeslot, there are 2 Web &amp;amp; HTML5 talks (purple) at the same time.
And in the second timeslot, there are 2 Cloud &amp;amp; BigData talks (brown) at the same time.
And there are no Methodology talks (green) on Wednesday! That means Methodology talks are almost unavoidable on Thursday&amp;#8230;&amp;#8203; oh, the horror!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_after_the_poc_optimized_devoxx_2014_schedule&quot;&gt;After: the POC optimized Devoxx 2014 schedule&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/11/17/optaconfPocDevoxxScheduleAfter.png&quot; alt=&quot;optaconfPocDevoxxScheduleAfter&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Above is the schedule after it&amp;#8217;s optimized with &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; for Wednesday.
Notice how I can now watch all the talks of an entire track without missing a single one.
This optimization already takes speaker conflicts into account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional constraints should be easy to add, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Popular talks get bigger rooms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Track room stability: to minimize people having to switch rooms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No 2 rock star speakers at the same time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rock stars get prime time timeslots&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Social&lt;/em&gt; speakers don&amp;#8217;t get morning slots&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203; and many more&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just need more input data, such as: which talks are popular, which speakers are rock stars, &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the backend, it has become a lot simpler. JavaEE 7 just works. It&amp;#8217;s much simpler than its predecessors. Most rough edges are gone.
For full disclosure: I work for Red Hat, so I stuck to their implementations whenever there was a choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the frontend however&amp;#8230;&amp;#8203; there&amp;#8217;s just so much choice and so many trade-offs between the technologies,
that I am reluctant to recommend anything really: they all suck, all in their own special way.
Either you&amp;#8217;re writing lots of indirectional JavaScript
or you&amp;#8217;re dealing with a long monolithic compilation or you&amp;#8217;re stuck with an over-engineered, chatty lifecycle.
And those are just the top 3 web UI frameworks!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2014/11/07/OpenBenchmarksForTheWin.html</id>
            <title type="html">Open benchmarks for the win</title>
            <updated>2014-11-07T00:00:00+00:00</updated>
            <published>2014-11-07T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2014/11/07/OpenBenchmarksForTheWin.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="community"></category>
            <summary type="html">
                 Recently, there was some commotion on Twitter because a competitor heavily restricts publicizing benchmarks of their Solver as part of their license. That might seem harsh, but I can understand ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, there was some commotion on &lt;a href=&quot;https://twitter.com/fbahr/status/529976664022081536&quot;&gt;Twitter&lt;/a&gt;
because &lt;strong&gt;a competitor heavily restricts publicizing benchmarks of their Solver&lt;/strong&gt; as part of their license.
That might seem harsh, but I can understand the sentiment:
when a competitor publicizes a benchmark report comparing our product against their own, I know we&amp;#8217;re gonna get screwed.
Unlike single product benchmarking, competitive benchmarking is inherently dishonest&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_competitive_benchmarking_for_dummies&quot;&gt;Competitive benchmarking for dummies&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As as competitor, you can utilize several (obvious and not so obvious) means to prove your superiority over another Solver:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Publication bias&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pick a use case which is known to work well in your Solver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use datasets with a scale and granularity which are known to work well in your Solver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you&amp;#8217;re really evil, benchmark multiple use cases and datasets in both Solvers and only retain those for which your Solver wins.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expertise imbalance&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Let one of your experts develop an implementations for both Solvers.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Motivation: like any other company, your company only employs experts in your own technology.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If he has years of recent experience in your technology, it&amp;#8217;s unlikely he&amp;#8217;ll had time for any recent experience in the competitive technology.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;So you&amp;#8217;re effectively using your jockey on someone else&amp;#8217;s horse.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tweaking imbalance&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spend an equal amount of time on both implementations.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The use case is probably already implemented in your Solver (or straightforward to implement), so you can spend most of the time budget to tweak it better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You&amp;#8217;ll need to learn the competitor&amp;#8217;s Solver first, so you&amp;#8217;ll spend most of the time budget in that implementation to learn the technology, which leaves no room for tweaking.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Funding&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There&amp;#8217;s no need to explicitly set a desired outcome: your developer will know better than to bite the hand that feeds him.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice how these approaches don&amp;#8217;t require any malice (except for the evil one): it&amp;#8217;s normal to conduct a competitive benchmark like this&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, you can make the competitive benchmark comparison look more objective,
by sponsoring an academic research group to do the benchmark for you.
Just make sure that&amp;#8217;s a research group which has been happily using your technology for years
and has little or no experience with the competition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_marketing_value&quot;&gt;Marketing value&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The marketing value of such a benchmark report should not be underestimated.
These numbers, written in black and white, which clearly show the superiority of your Solver against another Solver,
make a strong argument:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To close sales deals, when in direct competition with the other Solver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To convince developers, researchers and students to learn and use your technology.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To build a strong, long-term reputation.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Benchmarks from the 90&amp;#8217;s can still affect the Google search results today, for example for &amp;#8220;performance of Java vs C++&amp;#8221;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Such information spreads virally, and counter claims might not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_empirical_evidence&quot;&gt;Empirical evidence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Are all competitive benchmark reports lying?&lt;/em&gt; &lt;strong&gt;Yes&lt;/strong&gt;, they are probably misrepresenting the truth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Should we therefore restrict users from publicizing benchmarks on our Solver?&lt;/em&gt; &lt;strong&gt;No&lt;/strong&gt;, of course not (even if our &lt;a href=&quot;https://www.optaplanner.org/code/license.html&quot;&gt;open source licence&lt;/a&gt; would allow such conditions, which it does not).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Computer science - like any other science - is build on empirical evidence:
&lt;strong&gt;the promise that any experiment I publish can be repeated by others independently&lt;/strong&gt;.
If we prevent people from publishing such repeated experiments, we undermine our science.
In fact, the more people which report their benchmarks, the clearer our strengths and weaknesses show.
Historically, this approach has already enabled us to diagnose and fix weaknesses,
regardless whether those were caused by our Solver or the user&amp;#8217;s domain specific implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; welcomes external benchmark reports.
I believe in Open Science, as strongly as I believe in Open Source.
I do ask the courtesy of allowing public comments/feedback on a public report website,
as well as to publicize the details (such as the Solver configuration).
If you use the OptaPlanner Benchmarker toolkit (which you will find convenient), simply share the benchmarker HTML report.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run any of the benchmarks of the OptaPlanner Examples locally,
simply run a &lt;code&gt;*BenchmarkApp&lt;/code&gt; executable class, for example &lt;code&gt;CloudBalancingBenchmarkApp&lt;/code&gt;.
Notice how a small change in the &lt;code&gt;*BenchmarkConfig.xml&lt;/code&gt;, such as switching score calculation
from Easy Java to Drools or from Drools to Incremental Java, can have a serious effect in the results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In short: I like external benchmarks, but dislike competitive benchmarks, except for &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_independent_research_challenges&quot;&gt;Independent research challenges&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Can we compare fairly with our competition?&lt;/em&gt; Yes, through an independent research challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regularly, the academic community launches such &lt;em&gt;challenges&lt;/em&gt;. Each challenge:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;defines a real-world use case with real-world constraints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provides multiple, real-world datasets (half of which they keep hidden)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expects reproducible results within a specific time limit on specific hardware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gets worldwide participation from the academic and/or enterprise Operations Research community&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;benchmarks each contestant&amp;#8217;s implementation on the same hardware in the same time limit to determine a winner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;benchmarks those hidden datasets to counter overfitting and dataset recognition&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s fair: each jockey rides his own horse. Most of the arguments against competitive benchmarking do not apply.
And as an added bonus, we get to learn from and compare with the academic research community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the past, OptaPlanner has done well on these challenges, despite the limited weekend time we have to spend on them.
In the last challenge, &lt;a href=&quot;http://iconchallenge.insight-centre.org/challenge-energy&quot;&gt;the ICON power scheduling challenge&lt;/a&gt;, we (Lukas, Matej and me) finished in 2nd place.
A minority of the researchers still beat us (with their innovative algorithms in their experimental contraptions and massive time to tweak/build those),
but it&amp;#8217;s been years since a competitive Solver has beaten us.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_long_term_vision&quot;&gt;Long term vision&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sharing our benchmarks and enabling others to easily reproduce them, is part of a bigger vision:
Too many research papers (on metaheuristics and other optimization algorithms) are hard to reproduce.
That&amp;#8217;s the paradox in computer science research: to reproduce the findings of a research paper, all we really need
is a computer and the code. We don&amp;#8217;t need an expensive laboratory.
Yet, in practice, the code is usually closed and the raw benchmark data is not accessible.
It&amp;#8217;s like everyone is scared of sharing the dirty secrets of their code and their benchmarks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I believe that we - the worldwide optimization research community - need to create a &lt;strong&gt;benchmark repository&lt;/strong&gt;:
a centralized repository of benchmarks for every use case, for every dataset, for every algorithm, for every implementation version, for any amount of running time.
That, together with a good statistical interface, will give us some &lt;em&gt;real insight as to which optimization algorithms are good under which circumstances&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We - in OptaPlanner - are well on our way to build exactly that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OptaPlanner Examples already implements 14 distinct use cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each use case, we&amp;#8217;re already benchmarking on many different optimization algorithms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our benchmarker HTML report already includes many useful statistics to analyse the raw benchmark data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org/code/sourceCode.html&quot;&gt;Join us&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2014/09/02/VehicleRoutingWithRealRoadDistances.html</id>
            <title type="html">Vehicle routing with real road distances</title>
            <updated>2014-09-02T00:00:00+00:00</updated>
            <published>2014-09-02T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2014/09/02/VehicleRoutingWithRealRoadDistances.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="vehicle routing"></category>
                    <category term="insight"></category>
            <summary type="html">
                 In the real world, vehicles in a Vehicle Routing Problem (VRP) have to follow the roads: they can&amp;#8217;t travel in a straight line from customer to customer. Most VRP research papers and demos ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the real world, vehicles in a Vehicle Routing Problem (VRP) have to follow the roads:
they can&amp;#8217;t travel in a straight line from customer to customer.
Most VRP research papers and demos happily ignore this implementation detail. As did I, in the past.
Although using road distances (instead of air distances) doesn&amp;#8217;t impact the NP-hard nature of a VRP much,
it does result in a few extra challenges. Let&amp;#8217;s take a look at those challenges.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_datasets_with_road_distances&quot;&gt;Datasets with road distances&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First off, we need realistic datasets.
Unfortunately, public VRP datasets with road distances are scarce in the VRP research community.
The &lt;a href=&quot;http://neo.lcc.uma.es/vrp/&quot;&gt;VRP Web&lt;/a&gt; has few small ones, such as a dataset of Bavaria with 29 locations,
but nothing serious. So I had to generate some realistic datasets myself with the following requirements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;em&gt;Google Maps like&lt;/em&gt; roads with real distances in &lt;code&gt;km&lt;/code&gt; between every pair of locations in the dataset.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example, use highways when reasonable over small roads.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For every dataset, generate an air distance variant and a road distance variant, to compare results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate a similar dataset in multiple orders of magnitude, to compare scalability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add reasonable vehicle capacities and customer demands, for the vehicle capacity constraint in VRP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I ended up generating datasets of Belgium with a location for cities, towns and subtowns.
The biggest one has 2750 locations.
I might add a road variant of the USA datasets later, those go up to 100 000 locations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/09/02/belgium-datasets-unsolved.png&quot; alt=&quot;belgium datasets unsolved&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By using the excellent Java library &lt;a href=&quot;https://graphhopper.com/&quot;&gt;GraphHopper&lt;/a&gt;,
based on &lt;a href=&quot;http://www.openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt;, querying practical road distances was relatively easy.
It&amp;#8217;s also fast, as long as the entire road network (only 200MB for Belgium) can be loaded into memory.
Loading the entire road network of North-America (6GB) is a bit more challenging.
I&amp;#8217;ll submit these datasets to the VRP Web, so others researchers can use them too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All this happens &lt;em&gt;before&lt;/em&gt; &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;&apos;s VRP example starts solving it.
During solving, the distances are already available in a lookup table.
Once we start generating datasets with &lt;code&gt;1000&lt;/code&gt; locations or more,
pre-calculating all distances between every location pair can introduce memory and performance issues.
I&amp;#8217;ll explain those and the remedies in my next blog.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_air_distance_vs_road_distance&quot;&gt;Air distance vs Road distance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For clarity, I&amp;#8217;ll focus on the dataset &lt;code&gt;belgium-n50-k10.vrp&lt;/code&gt; which has &lt;code&gt;50&lt;/code&gt; locations and &lt;code&gt;10&lt;/code&gt; vehicles with capacity &lt;code&gt;125&lt;/code&gt; each.
OptaPlanner was given 5 minutes to solve both variants (air and road distance).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;strong&gt;air distances&lt;/strong&gt; (which calculates the euclidean distance based on latitude and longitude) results in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/09/02/belgium-n52-airSolution.png&quot; alt=&quot;belgium n52 airSolution&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The total distance, &lt;code&gt;22.99&lt;/code&gt; doesn&amp;#8217;t mean much because it&amp;#8217;s not in a common unit of measurement
and because our vehicles can&amp;#8217;t fly from point to point anyway.
We need to apply &lt;strong&gt;this air distance solution on the real road network&lt;/strong&gt; (shown below), to know the real distance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/09/02/belgium-road-n51-airSolution.png&quot; alt=&quot;belgium road n51 airSolution&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s compare that air distance solution above with the &lt;strong&gt;road distance&lt;/strong&gt; solution below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/09/02/belgium-road-n50-roadSolution.png&quot; alt=&quot;belgium road n50 roadSolution&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;The road distance solution takes &lt;code&gt;108.45&lt;/code&gt; km less, so it&amp;#8217;s almost 5% better!&lt;/strong&gt;
And that&amp;#8217;s on one of the most dense road networks in the world (Belgium&amp;#8217;s road network):
on more sparse road networks the gain might be more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using real distances instead of air distances does matter.
Solving an VRP with air distances and then apply road distances is suboptimal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But can we really pre-calculate every locations pair in big datasets? Stay tuned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2014/05/12/CheatingOnTheNQueensBenchmark.html</id>
            <title type="html">Cheating on the N Queens benchmark</title>
            <updated>2014-05-12T00:00:00+00:00</updated>
            <published>2014-05-12T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2014/05/12/CheatingOnTheNQueensBenchmark.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="insight"></category>
                    <category term="benchmark"></category>
            <summary type="html">
                 Many Solver distributions include an N Queens example, in which n queens need to be placed on a n*n sized chessboard, with no attack opportunities. So when you&amp;#8217;re looking for the fastest ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many Solver distributions include an N Queens example,
in which &lt;code&gt;n&lt;/code&gt; queens need to be placed on a &lt;code&gt;n*n&lt;/code&gt; sized chessboard, with no attack opportunities.
So when you&amp;#8217;re looking for the fastest Solver,
it&amp;#8217;s tempting to use the N Queens example as a benchmark to compare those solvers.
That&amp;#8217;s a tragic mistake, because the N Queens problem is solvable in polynomial time,
which means there&amp;#8217;s a way to cheat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That being said, &lt;strong&gt;&lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; solves the &lt;code&gt;1 000 000&lt;/code&gt; queens problem in less than 3 seconds&lt;/strong&gt; :)
Here&amp;#8217;s a log to prove it (with time spent in milliseconds):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;INFO  Opened: data/nqueens/unsolved/10000queens.xml
INFO  Solving ended: time spent (23), best score (0), ...

INFO  Opened: data/nqueens/unsolved/100000queens.xml
INFO  Solving ended: time spent (159), best score (0), ...

INFO  Opened: data/nqueens/unsolved/1000000queens.xml
INFO  Solving ended: time spent (2981), best score (0), ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_to_cheat_on_the_n_queens_problem&quot;&gt;How to cheat on the N Queens problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The N Queens problem is not NP-complete, nor NP-hard.
That is &lt;em&gt;math speak&lt;/em&gt; for stating that &lt;em&gt;there&amp;#8217;s a perfect algorithm to solve this problem&lt;/em&gt;:
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle#Explicit_solutions&quot;&gt;Explicits Solutions algorithm&lt;/a&gt;.
Implemented with a &lt;code&gt;CustomPhaseCommand&lt;/code&gt; in OptaPlanner it looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class CheatingNQueensPhaseCommand implements CustomPhaseCommand {

    public void changeWorkingSolution(ScoreDirector scoreDirector) {
        NQueens nQueens = (NQueens) scoreDirector.getWorkingSolution();
        int n = nQueens.getN();
        List&amp;lt;Queen&amp;gt; queenList = nQueens.getQueenList();
        List&amp;lt;Row&amp;gt; rowList = nQueens.getRowList();

        if (n % 2 == 1) {
            Queen a = queenList.get(n - 1);
            scoreDirector.beforeVariableChanged(a, &quot;row&quot;);
            a.setRow(rowList.get(n - 1));
            scoreDirector.afterVariableChanged(a, &quot;row&quot;);
            n--;
        }
        int halfN = n / 2;
        if (n % 6 != 2) {
            for (int i = 0; i &amp;lt; halfN; i++) {
                Queen a = queenList.get(i);
                scoreDirector.beforeVariableChanged(a, &quot;row&quot;);
                a.setRow(rowList.get((2 * i) + 1));
                scoreDirector.afterVariableChanged(a, &quot;row&quot;);

                Queen b = queenList.get(halfN + i);
                scoreDirector.beforeVariableChanged(b, &quot;row&quot;);
                b.setRow(rowList.get(2 * i));
                scoreDirector.afterVariableChanged(b, &quot;row&quot;);
            }
        } else {
            for (int i = 0; i &amp;lt; halfN; i++) {
                Queen a = queenList.get(i);
                scoreDirector.beforeVariableChanged(a, &quot;row&quot;);
                a.setRow(rowList.get((halfN + (2 * i) - 1) % n));
                scoreDirector.afterVariableChanged(a, &quot;row&quot;);

                Queen b = queenList.get(n - i - 1);
                scoreDirector.beforeVariableChanged(b, &quot;row&quot;);
                b.setRow(rowList.get(n - 1 - ((halfN + (2 * i) - 1) % n)));
                scoreDirector.afterVariableChanged(b, &quot;row&quot;);
            }
        }

    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, one could argue that this implementation doesn&amp;#8217;t use any of OptaPlanner&amp;#8217;s algorithms
(such as the Construction Heuristics or Local Search).
But it&amp;#8217;s straightforward to mimic this approach in a Construction Heuristic (or even a Local Search).
So, in a benchmark, any Solver which simulates that approach the most, is guaranteed to win when scaling out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_doesnt_that_work_for_other_planning_problems&quot;&gt;Why doesn&amp;#8217;t that work for other planning problems?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This algorithm is perfect for N Queens, so why don&amp;#8217;t we use a perfect algorithm on other planning problems?
Well, simply because there are &lt;em&gt;none&lt;/em&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most planning problems, such as vehicle routing, employee rostering, cloud optimization, bin packing, &amp;#8230;&amp;#8203;
are proven to be NP-complete (or NP-hard).
This means that these problems are in essence the same: a perfect algorithm for one, would work for all of them.
But no human has ever found such an algorithm (and most experts believe no such algorithm exists).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: There are a few notable exceptions of planning problems that are not NP-complete, nor NP-hard.
For example, finding the shortest distance between 2 points can be solved in polynomial time with A*-Search.
But their scope is narrow: finding the shortest distance to visit n points (TSP), on the other hand,
is not solvable in polynomial time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because N Queens differs intrinsically from real planning problems, it is a terrible use case to benchmark.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Benchmarks on the N Queens problem are meaningless.&lt;/strong&gt;
Instead, benchmark implementations of a realistic competition.
A realistic competition is &lt;strong&gt;an official, independent competition&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;that clearly defines a real-word use case&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;with real-world constraints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;with multiple, real-world datasets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;that expects reproducible results within a specific time limit on specific hardware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;that has had serious participation from the academic and/or enterprise Operations Research community&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;&apos;s examples implement
&lt;a href=&quot;https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#examplesOverview&quot;&gt;several cases of realistic competitions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2014/04/17/PutTheUserInControlOfTheScoreConstraints.html</id>
            <title type="html">Put the user in control of the score constraints</title>
            <updated>2014-04-17T00:00:00+00:00</updated>
            <published>2014-04-17T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2014/04/17/PutTheUserInControlOfTheScoreConstraints.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="howto"></category>
                    <category term="feature"></category>
            <summary type="html">
                 OptaPlanner optimizes towards the plan with the best score. But who defines the score function? Normally the developers do, based on the specs of the users. Can we empower users to define the ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OptaPlanner optimizes towards the plan with the best score.
But who defines the score function?
Normally the developers do, based on the specs of the users.
Can we empower users to define the score function themselves?
Let&amp;#8217;s take a look how.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we&amp;#8217;re using the Drools rule engine for the score calculation in &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;,
then we can use any of the supported features in the &lt;a href=&quot;https://www.drools.org&quot;&gt;Drools&lt;/a&gt; ecosystem to manipulate those score rules.
That includes &lt;em&gt;Decision Tables&lt;/em&gt;, &lt;em&gt;Scorecards&lt;/em&gt; and the &lt;em&gt;Drools Workbench&lt;/em&gt; web application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll empower the users on the Cloud Balancing example, for which we need to assign processes to computers,
without going above the capacity of any computer.
For more information about this example, see &lt;a href=&quot;https://www.youtube.com/watch?v=xhCtuM-Hiic&quot;&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_static_drl_rules&quot;&gt;Static DRL rules&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a developer, we can write the score rules statically in the DRL file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-drl hljs&quot; data-lang=&quot;drl&quot;&gt;rule &quot;Risk for out of memory&quot;
    when
        CloudComputerUsage(freeMemory &amp;lt; 2)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -100);
end
rule &quot;Unused memory but no CPU&quot;
    when
        CloudComputerUsage(freeMemory &amp;gt;= 8, freeCpuPower &amp;lt; 4)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -10);
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, DRL files are too difficult for a user to edit directly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_data_driven_drl_rules&quot;&gt;Data driven DRL rules&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way to empower the user, is to create a data object for him/her to fill in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class FreePenalty {

    private int minFreeMemory; // Defaults to 0
    private int maxFreeMemory; // Defaults to Integer.MAX_VALUE
    private int minFreeCpuPower; // Defaults to 0
    private int maxFreeCpuPower; // Defaults to Integer.MAX_VALUE
    private int minFreeNetworkBandwidth; // Defaults to 0
    private int maxFreeNetworkBandwidth; // Defaults to Integer.MAX_VALUE

    private int softScoreImpact;

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We write 1 rule to apply those &lt;code&gt;FreePenalty&lt;/code&gt; instances as score constraints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-drl hljs&quot; data-lang=&quot;drl&quot;&gt;rule &quot;requiredCpuPowerTotal&quot;
    when
        // Defined by the user
        FreePenalty(
                $minFreeMemory : minFreeMemory, $maxFreeMemory : maxFreeMemory,
                $minFreeCpuPower : minFreeCpuPower, $maxFreeCpuPower : maxFreeCpuPower,
                $minFreeNetworkBandwidth : minFreeNetworkBandwidth, $maxFreeNetworkBandwidth : maxFreeNetworkBandwidth)
        // Calculated insertlogical from the process assignments
        CloudComputerUsage(
                freeMemory &amp;gt;= $minFreeMemory, freeMemory &amp;lt; $maxFreeMemory,
                freeCpuPower &amp;gt;= $minFreeCpuPower, freeCpuPower &amp;lt; $maxFreeCpuPower,
                freeMemory &amp;gt;= $minFreeNetworkBandwidth, freeMemory &amp;lt; $maxFreeNetworkBandwidth,
                $softScoreImpact : softScoreImpact)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $softScoreImpact);
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And of course, we build a web interface so the user can create/update/delete &lt;code&gt;FreePenalty&lt;/code&gt; records.
So the user can use that UI to create these records:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-txt hljs&quot; data-lang=&quot;txt&quot;&gt;User creates new FreePenalty(maxFreeMemory = 2, softScoreImpact = -100)
User creates new FreePenalty(minFreeMemory = 8, maxFreeCpuPower = 4, softScoreImpact = -10)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These 2 records result in the same score function as the statically defines score function which we saw earlier,
but now the user can change them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An added advantage of this approach is that the user&amp;#8217;s changes are part of the dataset.
Multiple datasets, for the exact same Solver configuration, use separate &lt;code&gt;FreePenalty&lt;/code&gt; instances.
This is especially useful in a multi-tenancy application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_decision_tables&quot;&gt;Decision tables&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another way to expose the constraints to the user, is through a Drools &lt;em&gt;decision table&lt;/em&gt;.
The user edits an &lt;code&gt;xls&lt;/code&gt; file with Excel or LibreOffice to change the score function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/04/17/decisionTable.png&quot; alt=&quot;decisionTable&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before sending this file to the users, we hide row 2 to 11, so the user isn&amp;#8217;t exposed to the technical details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See this video for a detailed demonstration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/K084NKRZqkg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that a &lt;em&gt;decision table&lt;/em&gt; is more powerful than a &lt;em&gt;data driven DRL rule&lt;/em&gt;: the user decides which conditions to apply.
The other conditions are not even included (which is faster than checking them against default values).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_rule_templates&quot;&gt;Rule templates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If &lt;em&gt;data driven DRL rules&lt;/em&gt; aren&amp;#8217;t powerful enough for you,
but a &lt;em&gt;decision table&lt;/em&gt;&apos;s &lt;code&gt;xls&lt;/code&gt; file sticks out like sore thumb in your UI,
use Drools &lt;em&gt;rule templates&lt;/em&gt; with a custom UI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_drools_workbench&quot;&gt;Drools Workbench&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Workbench (formerly known as Guvnor) is a full-blown web application to manage rules and workflows.
Using a web interface, business users can create and edit rules, including the score rules used by OptaPlanner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a very interesting setup, which I&amp;#8217;ll demonstrate in a future blog post.
Meanwhile, for more information, see &lt;a href=&quot;https://www.drools.org/learn/documentation.html&quot;&gt;the Drools documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;, there are several ways
to enable your users to define the score function of their planning problem themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that your users can fine tune the score function at runtime,
by looking at the result of the &lt;code&gt;Solver&lt;/code&gt;, changing the score function and solving it again.
Those faster iterations, enables them to evolve the business planning quicker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2014/03/27/IsTheSearchSpaceOfAnOptimizationProblemReallyThatBig.html</id>
            <title type="html">Is the search space of an optimization problem really that big?</title>
            <updated>2014-03-27T00:00:00+00:00</updated>
            <published>2014-03-27T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2014/03/27/IsTheSearchSpaceOfAnOptimizationProblemReallyThatBig.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="insight"></category>
                    <category term="algorithm"></category>
                    <category term="school timetabling"></category>
            <summary type="html">
                 Given a planning or optimization problem, how big is the search space? Can we hope to enumerate every possible solution, looking for the optimal solution? Let&amp;#8217;s calculate the search space ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given a planning or optimization problem, how big is the search space?
Can we hope to enumerate every possible solution, looking for the optimal solution?
Let&amp;#8217;s calculate the search space of a few use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_use_cases&quot;&gt;Use cases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/searchSpaceSizeCalculationUseCases.png&quot; alt=&quot;searchSpaceSizeCalculationUseCases&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll look at these 3 use cases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cloud Balancing&lt;/strong&gt;: Assign processes to computers.
Each computer should have enough hardware capacity (CPU power, RAM, etc.) for all its processes.
Use as few computers as possible to minimize the maintenance costs.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Model: The class &lt;code&gt;Process&lt;/code&gt; has a planning variable &lt;code&gt;computer&lt;/code&gt; of type class &lt;code&gt;Computer&lt;/code&gt;.
So every &lt;code&gt;Process&lt;/code&gt; instance refers to the &lt;code&gt;Computer&lt;/code&gt; instance to which it&amp;#8217;s assigned.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Traveling Salesman Problem (TSP)&lt;/strong&gt;: Find the shortest path to visit every city.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Model: The class &lt;code&gt;Visit&lt;/code&gt; has a planning variable &lt;code&gt;previousVisit&lt;/code&gt;.
All &lt;code&gt;Visit&lt;/code&gt; instances together form a single linked list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Course Scheduling&lt;/strong&gt;: Assign lectures to periods and rooms.
No teacher should have 2 lectures in the same period.
No room should have 2 lectures in the same period.
There are 6 more constraint types.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Model: The class &lt;code&gt;Lecture&lt;/code&gt; has a planning variable &lt;code&gt;period&lt;/code&gt; and a planning variable &lt;code&gt;room&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s the search space for each of these use cases?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_base_search_space&quot;&gt;Base search space&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s first look at the number of combinations that each Solution model is able to represent,
regardless if those Solutions are feasible or infeasible (= have broken hard constraints).
Let&amp;#8217;s call this &lt;em&gt;the base search space&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/searchSpaceSizeCalculation.png&quot; alt=&quot;searchSpaceSizeCalculation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cloud Balancing&lt;/strong&gt;: The base search space is the number of computers raised to the power of the number of processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Traveling Salesman Problem (TSP)&lt;/strong&gt;: The base search space is the factorial of the number of cities (= visits).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Course Scheduling&lt;/strong&gt;: The base search space is the multiplication of the number of periods and rooms,
raised to the power of the number of lectures.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The base search space is beyond gigantic.
Let&amp;#8217;s compare it to the minimal number of atoms in the known universe, which is &lt;code&gt;10&lt;sup&gt;80&lt;/sup&gt;&lt;/code&gt;.
In Cloud Balancing, the base search space is already bigger than that,
for a small dataset of &lt;code&gt;100&lt;/code&gt; computers and &lt;code&gt;300&lt;/code&gt; processes. Not to mention the big datasets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the best case we can hope to enumerate &lt;code&gt;10&lt;sup&gt;20&lt;/sup&gt;&lt;/code&gt; combinations per year on modern hardware,
so &lt;strong&gt;enumerating all combinations would take an insane amount of years&lt;/strong&gt;.
We don&amp;#8217;t have years, we have seconds, maybe minutes or hours.
Can we cut any corners?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_feasible_search_space&quot;&gt;Feasible search space&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we look at the course scheduling example, there is relatively little point in enumerating all solutions
for which the first and the second lecture (A and B) are both in the same period and the same room.
Regardless of the values of other lectures (C, etc.), the solution is infeasible and our business doesn&amp;#8217;t want it.
So let&amp;#8217;s ignore those solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How big is our search space if we discard all infeasible solutions?
An infeasible solution is a solution that breaks at least 1 hard constraint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/feasibleSearchSpaceSizeCalculation.png&quot; alt=&quot;feasibleSearchSpaceSizeCalculation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cloud Balancing&lt;/strong&gt;: The feasible search space is impossible to calculate.
The capacity hard constraints are a form of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bin_packing_problem&quot;&gt;bin packing&lt;/a&gt;,
which is &lt;a href=&quot;https://en.wikipedia.org/wiki/NP-complete&quot;&gt;NP-complete&lt;/a&gt;.
That implies that even the smartest computer scientists fail to calculate it in reasonable time
for medium or big datasets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Traveling Salesman Problem (TSP)&lt;/strong&gt;: There are no hard constraints which aren&amp;#8217;t built-in into the model already.
So, the feasible search space is the same as the base search space, &lt;code&gt;n!&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Course Scheduling&lt;/strong&gt;: We can successfully take into account 1 hard constraint:
&lt;em&gt;no room should have 2 lectures in the same period&lt;/em&gt;.
In that case, the feasible search space is a number of digits less than the base search space.
The other hard constraints are far more difficult (or impossible) to taken into account,
especially because they can overlap.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if we were able to look at only the feasible solutions,
&lt;strong&gt;it would still take an insane amount of years to enumerate all of them&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pruned_search_space&quot;&gt;Pruned search space&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using feasibility as a threshold to check if we want to investigate a solution,
is arbitrary (from a mathematical point of view):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There might not be any feasible solutions. The optimal solution might be infeasible. We still want to find it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As soon as we know there is a solution of a certain score,
we want to prune all solutions with a worse score from the search space.
&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example: as soon as we know there is a solution of score &lt;code&gt;0hard/-100soft&lt;/code&gt;,
there is no point investigating partial solutions which already have a score of &lt;code&gt;0hard/-200soft&lt;/code&gt; (which is worse).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So instead of a using a &lt;em&gt;Brute Force&lt;/em&gt; algorithm, shown here on the N queens use case
(where to goal is to put n queens on a chessboard so they cannot attack each other):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/bruteForceNQueens04_4.png&quot; alt=&quot;bruteForceNQueens04 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can prune away the uninteresting search space, with the &lt;em&gt;Branch And Bound&lt;/em&gt; algorithm:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/depthFirstBranchAndBoundNQueens04_4.png&quot; alt=&quot;depthFirstBranchAndBoundNQueens04 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/depthFirstBranchAndBoundNQueens04_5.png&quot; alt=&quot;depthFirstBranchAndBoundNQueens04 5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/depthFirstBranchAndBoundNQueens04_8.png&quot; alt=&quot;depthFirstBranchAndBoundNQueens04 8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s pretty smart and it reduces the search space a lot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because it&amp;#8217;s not practical to calculate the size of the pruned search space,
let&amp;#8217;s look at how both algorithms scale. First on N queens:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/exhaustiveSearchScalabilityNQueens.png&quot; alt=&quot;exhaustiveSearchScalabilityNQueens&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then on the Cloud Balancing use case:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/27/exhaustiveSearchScalabilityCloudBalance.png&quot; alt=&quot;exhaustiveSearchScalabilityCloudBalance&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s bad. Even with &lt;strong&gt;Branch And Bound&lt;/strong&gt;, we hit the wall at &lt;code&gt;8&lt;/code&gt; computers and &lt;code&gt;24&lt;/code&gt; processes.
Although there are number of techniques to push that wall out further, &lt;strong&gt;these exhaustive algorithms don&amp;#8217;t scale&lt;/strong&gt;.
Despite that the pruned search space is a lot smaller than the base search space, it&amp;#8217;s still insanely large.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, the search space of planning or optimization problems is unbelievably big.
Exhaustive algorithms don&amp;#8217;t scale. Instead, use the other algorithms in &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;,
which do scale: heuristics and metaheuristics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Presumes the use case only has negative constraints. Most use cases do, including all those shown in this article.
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2014/03/20/HowMuchFasterIsJava8.html</id>
            <title type="html">How much faster is Java 8?</title>
            <updated>2014-03-20T00:00:00+00:00</updated>
            <published>2014-03-20T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2014/03/20/HowMuchFasterIsJava8.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="production"></category>
                    <category term="benchmark"></category>
            <summary type="html">
                 Java SE 8 was released yesterday. Traditionally, every new major JRE version comes with a free performance boost. Do we get another free lunch? And how big is the gain this time? Let&amp;#8217;s ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java SE 8 was &lt;a href=&quot;https://blogs.oracle.com/java/entry/java_se_8_is_now&quot;&gt;released&lt;/a&gt; yesterday.
Traditionally, every new major JRE version comes with a free performance boost.
Do we get another free lunch? And how big is the gain this time?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s benchmark it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_methodology&quot;&gt;Benchmark methodology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run the same code with 3 different JRE versions (SunJDK &lt;code&gt;1.6.0_26&lt;/code&gt;, OpenJDK &lt;code&gt;1.7.0_51&lt;/code&gt; and OpenJDK &lt;code&gt;1.8.0&lt;/code&gt;).
The code itself was written for Java 6 (both in syntax and JDK API&amp;#8217;s usage) and compiled for Java 6 with OpenJDK 1.7.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each run takes about 55 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VM arguments: &lt;code&gt;-Xmx1536M -server&lt;/code&gt;&lt;br&gt;
Software: &lt;code&gt;Linux 3.2.0-59-generic-pae&lt;/code&gt;&lt;br&gt;
Hardware: &lt;code&gt;Intel® Xeon&amp;#174; CPU W3550 @ 3.07GHz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each run solves 13 planning problems with &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt;.
Each planning problem runs for 5 minutes. It starts with a 30 second JVM warm up which is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solving a planning problem involves &lt;strong&gt;no IO&lt;/strong&gt; (except a few milliseconds during startup to load the input).
&lt;strong&gt;A single CPU is completely saturated.&lt;/strong&gt;
It constantly creates many short-lived objects, and the GC collects them afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmarks measure the number of scores that can be calculated per millisecond. Higher is better.
Calculating a score for a proposed planning solution is non-trivial:
it involves many calculations, including checking for conflicts between every entity and every other entity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To reproduce these benchmarks locally, &lt;a href=&quot;https://www.optaplanner.org/code/sourceCode.html&quot;&gt;build optaplanner from source&lt;/a&gt;
and run the main class
&lt;a href=&quot;https://github.com/kiegroup/optaplanner/blob/main/optaplanner-examples/src/main/java/org/optaplanner/examples/app/GeneralOptaPlannerBenchmarkApp.java&quot;&gt;GeneralOptaPlannerBenchmarkApp&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benchmark_results&quot;&gt;Benchmark results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_executive_summary&quot;&gt;Executive summary&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/20/jdk6vs7vs8Summary.png&quot; alt=&quot;jdk6vs7vs8Summary&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My observations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On the biggest dataset (Machine Reassignment B10), which dwarfs any of the other datasets in size,
Java 8 is &lt;code&gt;20%&lt;/code&gt; faster than Java 7, which was already &lt;code&gt;17%&lt;/code&gt; faster than Java 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In some cases, Java 8 is slower than Java 7.
Specially for the course scheduling datasets, Java 8 is &lt;code&gt;6%&lt;/code&gt; slower than Java 7.
Hopefully new releases of Java 8 will resolve this performance regression soon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On average, Java 8 is only &lt;code&gt;1%&lt;/code&gt; faster than Java 7. This while Java 7 is already &lt;code&gt;16%&lt;/code&gt; faster than Java 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Despite that this is the first final release of OpenJDK 8, I did not find any regressions in Java 8.
OptaPlanner&amp;#8217;s examples are 100% reproducible, so as expected, the different JREs give the exact same results at every single iteration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_raw_benchmark_numbers&quot;&gt;Raw benchmark numbers&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;JDK&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 200c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 800c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B10&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c7&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c8&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering m1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering mh1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Sport scheduling nl14&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SunJDK 1.6.0_26&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;46462&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;44963&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;94567&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;28655&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5473&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6989&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6954&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3785&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3232&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2948&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1977&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OpenJDK 1.7.0_51&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;53683&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;49798&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;116553&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;33733&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6182&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7848&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8243&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4606&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3645&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3377&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2445&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OpenJDK 1.8.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;54687&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;51625&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;135102&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;40529&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5798&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7357&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8048&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4441&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3637&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3324&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2321&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6 &amp;#8658; 7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15.54%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10.75%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.25%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17.72%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.95%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.29%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18.54%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21.69%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.78%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14.55%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.67%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7 &amp;#8658; 8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.87%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.67%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15.91%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20.15%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.21%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-6.26%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-2.37%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-3.58%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-0.22%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.57%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-5.07%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset scale&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;120k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1920k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;500k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;250000k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;217k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;145k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1705k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1613k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4k&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the big datasets, Java 8 is clearly faster. And this without changing a line of code.
On average, the result is less convincing (with the current release), but a free lunch is always welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_update_18_jun_2015_java_8_build_0_versus_build_45&quot;&gt;Update (18-JUN-2015): Java 8 build 0 versus build 45&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote this blog more than a year ago. Meanwhile both Java 8 and OptaPlanner have had a number of releases.
&lt;strong&gt;How much do the Java 8 updates affect performance?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make a fair comparison, I&amp;#8217;ve (re)run the latest OptaPlanner code on both the original Java 8 release (build 0) and the latest release (build 45).
These are the results:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3333%;&quot;&gt;
&lt;col style=&quot;width: 8.3337%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;JDK&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 200c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cloud balancing 800c&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Machine reassignment B10&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c7&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Course scheduling c8&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Exam scheduling s3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering m1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Nurse rostering mh1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Sport scheduling nl14&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OpenJDK 1.8.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;63404&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;55295&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;126743&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;38260&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6072&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7825&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10518&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7176&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3872&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3558&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1252&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OpenJDK 1.8.0_45&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;64715&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;56472&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;131941&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;36175&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6499&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8084&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10406&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7217&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3905&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3595&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1354&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.8.0 &amp;#8658; 1.8.0_45&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.07%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.13%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.10%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-5.45%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7.03%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.31%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-1.06%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.57%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.85%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.04%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.15%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dataset scale&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;120k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1920k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;500k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;250000k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;217k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;145k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1705k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1613k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;18k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12k&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4k&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On average, Java 8 build 45 is &lt;code&gt;2.07%&lt;/code&gt; faster than Java 8 build 0. That&amp;#8217;s welcome!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2014/03/03/CanMapReduceSolvePlanningProblems.html</id>
            <title type="html">Can MapReduce solve planning problems?</title>
            <updated>2014-03-03T00:00:00+00:00</updated>
            <published>2014-03-03T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2014/03/03/CanMapReduceSolvePlanningProblems.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="tsp"></category>
                    <category term="insight"></category>
                    <category term="algorithm"></category>
            <summary type="html">
                 To solve a planning or optimization problem, some solvers tend to scale out poorly: As the problem has more variables and more constraints, they use a lot more RAM memory and CPU power. They can ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To solve a planning or optimization problem, some solvers tend to scale out poorly:
As the problem has more variables and more constraints, they use a lot more RAM memory and CPU power.
They can hit hardware memory limits at a few thousand variables and few million constraint matches.
One way their users typically work around such hardware limits, is to use &lt;em&gt;MapReduce&lt;/em&gt;.
Let&amp;#8217;s see what happens if we MapReduce a planning problem, such as the &lt;em&gt;Traveling Salesman Problem&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_about_mapreduce&quot;&gt;About MapReduce&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/MapReduce&quot;&gt;MapReduce&lt;/a&gt; is programming model
which has proven to be very effective to run a &lt;em&gt;query&lt;/em&gt; on big data.
Generally speaking, it works like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The data is &lt;strong&gt;partitioned&lt;/strong&gt; across multiple computer nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;map&lt;/strong&gt; function runs on every partition and returns a result.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;reduce&lt;/strong&gt; function reduces 2 results into one result. It&amp;#8217;s continuously run until only a single result remains.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, suppose we need to find the most expensive invoice record in a data cluster:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The invoice records are partitioned across multiple computer nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each node, the &lt;strong&gt;map&lt;/strong&gt; function extracts the most expensive invoice for that node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;reduce&lt;/strong&gt; function takes 2 invoices and returns the most expensive.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_about_the_traveling_salesman_problem&quot;&gt;About the Traveling Salesman Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Travelling_salesman_problem&quot;&gt;Traveling Salesman Problem&lt;/a&gt; (TSP) is a very basic planning problem.
Given a list of cities, find the shortest path to visit all cities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, here&amp;#8217;s a dataset with &lt;code&gt;68&lt;/code&gt; cities and its optimal tour with a distance of &lt;code&gt;674&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/03/mapReduceTspBlogExplanation.png&quot; alt=&quot;mapReduceTspBlogExplanation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The search space of this small dataset has &lt;code&gt;68!&lt;/code&gt; (= &lt;code&gt;10&lt;sup&gt;96&lt;/sup&gt;&lt;/code&gt;) combinations. That&amp;#8217;s a lot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A more realistic planning problem, such vehicle routing, has more constraints (both in number as in complexity),
such as: vehicle capacity, vehicle type limitations, time windows, driver limits, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mapreduce_on_tsp&quot;&gt;MapReduce on TSP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though most solvers probably won&amp;#8217;t go out of memory on only &lt;code&gt;68&lt;/code&gt; variables,
the small size of this problem allows us to visualize it clearly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/03/mapReduceTspBlog_0.png&quot; alt=&quot;mapReduceTspBlog 0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s apply MapReduce on it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_1_partition_divide_the_problem_into_n_pieces&quot;&gt;1) &lt;strong&gt;Partition&lt;/strong&gt;: Divide the problem into n pieces&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we take the problem and split it into &lt;code&gt;n&lt;/code&gt; pieces.
Usually, &lt;code&gt;n&lt;/code&gt; is the number of computer nodes in our system.
For visual reasons, we divide it into only &lt;code&gt;4&lt;/code&gt; pieces:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/03/mapReduceTspBlog_1.png&quot; alt=&quot;mapReduceTspBlog 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TSP is easily partitioned because of it only has 1 relevant constraint: find the shortest path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a more realistic planning problem, sane partitioning can be hard or even impossible. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In capacitated vehicle routing, no 2 partitions should share the same vehicle. &lt;em&gt;What if we have more partitions than vehicles?&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In vehicle routing with time windows, each partition should have enough vehicle time to service each customer
and drive to each location. &lt;em&gt;Catch 22: How do we determine the drive time if we don&amp;#8217;t know the vehicle routes yet?&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s tempting to make &lt;a href=&quot;https://www.optaplanner.org/blog/2013/08/06/FalseAssumptionsForVRP.html&quot;&gt;false assumptions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_2_map_solve_each_piece_separately&quot;&gt;2) &lt;strong&gt;Map&lt;/strong&gt;: Solve each piece separately&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Solve each partition using a Solver:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/03/mapReduceTspBlog_2.png&quot; alt=&quot;mapReduceTspBlog 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We get 4 pieces, each with a partial solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_3_reduce_merge_solution_pieces&quot;&gt;3) &lt;strong&gt;Reduce&lt;/strong&gt;: Merge solution pieces&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Merge the pieces together. To merge 2 pieces together, we remove an arc from each piece
and add 2 arcs to connect cities of different pieces:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/03/mapReduceTspBlog_3.png&quot; alt=&quot;mapReduceTspBlog 3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do merge several times until all pieces are merged:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/03/mapReduceTspBlog_4.png&quot; alt=&quot;mapReduceTspBlog 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several ways to merge 2 pieces together. Here we try every combination and take the optimal one.
For performance reasons, we might instead connect the 2 closest cities of different pieces with an arc,
and then add a correcting arc on the other side (however long that may be).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a more realistic planning problem, with more complex constraints, merging feasible partial solutions
often results into an infeasible solution (with broken hard constraints).
Smarter partitioning, which takes all the hard constraints into account, can sometimes solve this&amp;#8230;&amp;#8203;
at the expense of more broken soft constraints and a higher maintenance cost.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_4_result_what_is_the_quality_of_the_result&quot;&gt;4) &lt;strong&gt;Result&lt;/strong&gt;: What is the quality of the result?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each piece was solved optimally. Pieces were merged optimally. But &lt;strong&gt;the result is not optimal&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2014/03/03/mapReduceTspBlog_5.png&quot; alt=&quot;mapReduceTspBlog 5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, the results aren&amp;#8217;t even near optimal, especially as we scale out with a MapReduce approach:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More variables result in a lower result quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More constraints result in a lower result quality, presuming it&amp;#8217;s even possible to partition and reduce sanely.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More partitions result in a lower result quality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MapReduce is great approach to handle a query problem (and presumably many other problems).
But &lt;strong&gt;MapReduce is a terrible approach on a planning or optimization problem.&lt;/strong&gt;
Use the right tool for the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: We applied MapReduce on the planning problem,
not on the optimization algorithm implementation in a Solver, for which it can make sense.
For example, in a depth-first search algorithm, MapReduce can make sense to explore the search tree
(although the search tree scales exponentially bad which dwarfs any gain of MapReduce).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To solve a big planning problem, use a Solver (such as &lt;a href=&quot;https://www.optaplanner.org/&quot;&gt;OptaPlanner&lt;/a&gt;)
that scales well in memory, so you don&amp;#8217;t need to resort to partitioning at the expense of solution quality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2013/10/11/WillSkynetControlOurSchedule.html</id>
            <title type="html">Will Skynet control our schedule if the computer optimizes it for us?</title>
            <updated>2013-10-11T00:00:00+00:00</updated>
            <published>2013-10-11T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2013/10/11/WillSkynetControlOurSchedule.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="school timetabling"></category>
                    <category term="insight"></category>
                    <category term="feature"></category>
            <summary type="html">
                 Not every organization is comfortable with letting a computer program, such as OptaPlanner (Java, open source planning engine), optimize their schedules. Let&amp;#8217;s take a look why - and how to ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not every organization is comfortable with letting a computer program,
such as &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; (Java, open source planning engine), optimize their schedules.
Let&amp;#8217;s take a look why - and how to remedy it - on the course scheduling example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_course_scheduling_introduction&quot;&gt;Course scheduling introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In course scheduling, we need to assign each lecture to a time and a place.
So we&amp;#8217;re basically telling teachers and students were to be at what time.
In the example schedule below, the &lt;code&gt;Math&lt;/code&gt; lecture will be given the &lt;code&gt;Monday morning&lt;/code&gt; in room &lt;code&gt;36&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/10/11/skynet1.png&quot; alt=&quot;skynet1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example above, OptaPlanner has come up with a feasible schedule.
This means that no room, nor any teacher, nor any student has 2 lectures at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_boss_wants_to_do_it_differently&quot;&gt;The boss wants to do it differently&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite that the previous schedule is optimized according to the score function (which the boss probably defined in the first place),
the boss wants to make some ad hoc changes. The &lt;code&gt;Math&lt;/code&gt; lecture should be given on &lt;code&gt;Tuesday morning&lt;/code&gt; instead of &lt;code&gt;Monday morning&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/10/11/skynet2.png&quot; alt=&quot;skynet2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The schedule is now infeasible because &lt;code&gt;Geo&lt;/code&gt; and &lt;code&gt;Math&lt;/code&gt; are now in the same room at the same time.
So we ask the computer to make it feasible&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_im_sorry_dave_im_afraid_i_cant_do_that&quot;&gt;&lt;em&gt; &amp;#8220;I&amp;#8217;m sorry Dave, I&amp;#8217;m afraid I can&amp;#8217;t do that&amp;#8221; &lt;/em&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;... and the first thing the computer does is change the &lt;code&gt;Math&lt;/code&gt; lecture to another time and place:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/10/11/skynet3.png&quot; alt=&quot;skynet3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The boss is unhappy because his commands are ignored. Let&amp;#8217;s fix that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_immovable_lecture&quot;&gt;Immovable lecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We lock the &lt;code&gt;Math&lt;/code&gt; lecture in place, making it immovable for OptaPlanner:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/10/11/skynet4.png&quot; alt=&quot;skynet4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we now solve the problem, the &lt;code&gt;Math&lt;/code&gt; lecture isn&amp;#8217;t moved.
We get a feasible solution which makes the boss happy too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/10/11/skynet5.png&quot; alt=&quot;skynet5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_video_demo&quot;&gt;Video demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to see this in action, skip to the end of this video:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/4meWIhPRVn8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_human_must_remain_in_control&quot;&gt;The human must remain in control&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We regularly see this requirement in other OptaPlanner use cases too (such as employee rostering, vehicle routing and equipment scheduling).
But hopefully this article has shown that the human is indeed in control.
There&amp;#8217;s no Skynet or HAL algorithm to disobey us&amp;#8230;&amp;#8203; for now :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
        <entry>
            <id>https://www.optaplanner.org/blog/2013/08/06/FalseAssumptionsForVRP.html</id>
            <title type="html">False assumptions for the Vehicle Routing Problem</title>
            <updated>2013-08-06T00:00:00+00:00</updated>
            <published>2013-08-06T00:00:00+00:00</published>
            <link href="https://beautifulnature.github.io/blog/2013/08/06/FalseAssumptionsForVRP.html" rel="alternate" type="text/html" />
            <author>
                <name>ge0ffrey</name>
            </author>
                    <category term="vehicle routing"></category>
                    <category term="insight"></category>
            <summary type="html">
                 Many companies are faced with the vehicle routing problem, when they need to: Deliver/pick up items at multiple locations Or execute repairs/maintenance at multiple locations These companies want ...
            </summary>
            <content type="html">
                &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many companies are faced with the vehicle routing problem, when they need to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deliver/pick up items at multiple locations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or execute repairs/maintenance at multiple locations&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These companies want to minimize their fuel and time usage, to reduce their costs and ecological footprint.
Sounds easy, right? &lt;em&gt;Just take the shortest route&lt;/em&gt;. Unfortunately it&amp;#8217;s not that simple&amp;#8230;&amp;#8203; Let&amp;#8217;s take a closer look.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_minimize_the_distance&quot;&gt;Minimize the distance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Vehicle Routing Problem (VRP), we need to transport items from the warehouse to the customers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions01.png&quot; alt=&quot;vrpPresumptions01&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, we have 7 customers across the region and 2 available vehicles stationed at the warehouse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The shortest route to visit all these customers is this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions02.png&quot; alt=&quot;vrpPresumptions02&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This optimal solution requires &lt;code&gt;210&lt;/code&gt; fuel (which includes each vehicle driving back to the warehouse).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that we only use 1 vehicle. Let&amp;#8217;s continue from that assumption.&lt;br&gt;
Assumption: &lt;strong&gt;An optimal VRP route uses only 1 vehicle. &lt;em&gt;(false)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vehicle_capacity&quot;&gt;Vehicle capacity&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a real-world delivery/pick up scenario, each customer needs a number of items, but a vehicle&amp;#8217;s capacity to transport items is limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions03.png&quot; alt=&quot;vrpPresumptions03&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, all 7 customers need 20 items and a vehicle can transport 100 items.
So a single vehicle cannot transport the 140 items of all customers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need to use 2 vehicles now:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions04.png&quot; alt=&quot;vrpPresumptions04&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This optimal solution requires &lt;code&gt;224&lt;/code&gt; fuel, which is - of course - more than the &lt;code&gt;210&lt;/code&gt; fuel of the previous solution.
The yellow truck transports 60 items and the green one 80 items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that none of the lines cross. Let&amp;#8217;s assume that&amp;#8217;s always the case.&lt;br&gt;
Assumption: &lt;strong&gt;An optimal VRP route has no crossing lines. &lt;em&gt;(false)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see what happens when some of the customers require more items than other customers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions05.png&quot; alt=&quot;vrpPresumptions05&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, 2 customers need 50 items and the other 5 still need 20 items.
So the previous solution is infeasible because the yellow truck would need to transport 120 items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the lines do need to cross:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions06.png&quot; alt=&quot;vrpPresumptions06&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The optimal solution now requires even more fuel: &lt;code&gt;284&lt;/code&gt;. We found a feasible solution with 2 vehicles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we don&amp;#8217;t seem to need any more vehicles.&lt;br&gt;
Assumption: &lt;strong&gt;An optimal, feasible VRP route with n vehicles is still optimal for n+1 vehicles. &lt;em&gt;(false)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s add a 3rd vehicle to disprove that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions07.png&quot; alt=&quot;vrpPresumptions07&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By adding an extra vehicle, the optimal solution now uses less fuel: only &lt;code&gt;274&lt;/code&gt;. This is a paradox: buying more vehicles can reduce expenses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that in both solutions above, no vehicle crosses its own line.&lt;br&gt;
Assumption: &lt;strong&gt;An optimal VRP route has no crossing lines of the same color. &lt;em&gt;(false)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_time_windows&quot;&gt;Time Windows&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In any real-world scenario, time is of the essence. Items need to be delivered on time, within the time window of each customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions08.png&quot; alt=&quot;vrpPresumptions08&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the case above, a vehicle needs to arrive at the top left customer between 3 and 4 o&amp;#8217;clock.
Different customers have different time windows. For example, all 4 customers on the right are flexible:
they are available between 1 and 6 o&amp;#8217;clock. Additionally, each delivery/pick up/repair at a customer takes 1 hour to complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the optimal solution, the yellow truck does cross its own line now:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions09.png&quot; alt=&quot;vrpPresumptions09&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the optimal solution, the yellow truck arrives at the most left customer at 1 o&amp;#8217;clock. An hour later it leaves for the bottom left customer at which it arrives at 2:20 (because driving takes some 20 minutes). Again an hour later it departs and arrives at its 3rd customer at 3:40.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice how the time windows pretty much dictate the route, especially on the left side.&lt;br&gt;
Assumption: &lt;strong&gt;We can focus on time windows before focusing on capacity (or vice versa). &lt;em&gt;(false)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see what happens if the time windowed customers also need a number of items:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions10.png&quot; alt=&quot;vrpPresumptions10&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given these requirements, we need to focus on the capacity and the time windows &lt;em&gt;in parallel&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions11.png&quot; alt=&quot;vrpPresumptions11&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The optimal solution now puts the bottom right customer in the yellow truck, because there was no more room in the green truck.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a real-world vehicle routing problem, many assumptions fail.
Finding a good solution is hard: there are no short-cuts.
We need to be able to optimize without making assumptions.
Yet, we cannot iterate through all possible states in a brute force manner either - even on relatively small problems - because of hardware limitations.
So we need good, flexible algorithms - such as the heuristics and metaheuristics implemented in &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; (Open Source, Java) - to solve bigger cases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.optaplanner.org/blog/2013/08/06/vrpPresumptions12.png&quot; alt=&quot;vrpPresumptions12&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All screenshots are taken from the &lt;a href=&quot;https://www.optaplanner.org&quot;&gt;OptaPlanner&lt;/a&gt; vehicle routing example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;")
            </content>
        </entry>
</feed>
